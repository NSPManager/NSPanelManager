// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuf_nspanel.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_5fnspanel_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_5fnspanel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protobuf_5fnspanel_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_5fnspanel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protobuf_5fnspanel_2eproto;
class NSPanelConfig;
struct NSPanelConfigDefaultTypeInternal;
extern NSPanelConfigDefaultTypeInternal _NSPanelConfig_default_instance_;
class NSPanelConfig_RoomInfo;
struct NSPanelConfig_RoomInfoDefaultTypeInternal;
extern NSPanelConfig_RoomInfoDefaultTypeInternal _NSPanelConfig_RoomInfo_default_instance_;
class NSPanelLightStatus;
struct NSPanelLightStatusDefaultTypeInternal;
extern NSPanelLightStatusDefaultTypeInternal _NSPanelLightStatus_default_instance_;
class NSPanelMQTTManagerCommand;
struct NSPanelMQTTManagerCommandDefaultTypeInternal;
extern NSPanelMQTTManagerCommandDefaultTypeInternal _NSPanelMQTTManagerCommand_default_instance_;
class NSPanelMQTTManagerCommand_ButtonPressed;
struct NSPanelMQTTManagerCommand_ButtonPressedDefaultTypeInternal;
extern NSPanelMQTTManagerCommand_ButtonPressedDefaultTypeInternal _NSPanelMQTTManagerCommand_ButtonPressed_default_instance_;
class NSPanelMQTTManagerCommand_FirstPageTurnLightOff;
struct NSPanelMQTTManagerCommand_FirstPageTurnLightOffDefaultTypeInternal;
extern NSPanelMQTTManagerCommand_FirstPageTurnLightOffDefaultTypeInternal _NSPanelMQTTManagerCommand_FirstPageTurnLightOff_default_instance_;
class NSPanelMQTTManagerCommand_FirstPageTurnLightOn;
struct NSPanelMQTTManagerCommand_FirstPageTurnLightOnDefaultTypeInternal;
extern NSPanelMQTTManagerCommand_FirstPageTurnLightOnDefaultTypeInternal _NSPanelMQTTManagerCommand_FirstPageTurnLightOn_default_instance_;
class NSPanelMQTTManagerCommand_LightCommand;
struct NSPanelMQTTManagerCommand_LightCommandDefaultTypeInternal;
extern NSPanelMQTTManagerCommand_LightCommandDefaultTypeInternal _NSPanelMQTTManagerCommand_LightCommand_default_instance_;
class NSPanelMQTTManagerCommand_SaveSceneCommand;
struct NSPanelMQTTManagerCommand_SaveSceneCommandDefaultTypeInternal;
extern NSPanelMQTTManagerCommand_SaveSceneCommandDefaultTypeInternal _NSPanelMQTTManagerCommand_SaveSceneCommand_default_instance_;
class NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage;
struct NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPageDefaultTypeInternal;
extern NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPageDefaultTypeInternal _NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage_default_instance_;
class NSPanelRoomEntitiesPage;
struct NSPanelRoomEntitiesPageDefaultTypeInternal;
extern NSPanelRoomEntitiesPageDefaultTypeInternal _NSPanelRoomEntitiesPage_default_instance_;
class NSPanelRoomEntitiesPage_EntitySlot;
struct NSPanelRoomEntitiesPage_EntitySlotDefaultTypeInternal;
extern NSPanelRoomEntitiesPage_EntitySlotDefaultTypeInternal _NSPanelRoomEntitiesPage_EntitySlot_default_instance_;
class NSPanelRoomStatus;
struct NSPanelRoomStatusDefaultTypeInternal;
extern NSPanelRoomStatusDefaultTypeInternal _NSPanelRoomStatus_default_instance_;
class NSPanelStatusReport;
struct NSPanelStatusReportDefaultTypeInternal;
extern NSPanelStatusReportDefaultTypeInternal _NSPanelStatusReport_default_instance_;
class NSPanelWarning;
struct NSPanelWarningDefaultTypeInternal;
extern NSPanelWarningDefaultTypeInternal _NSPanelWarning_default_instance_;
class NSPanelWeatherUpdate;
struct NSPanelWeatherUpdateDefaultTypeInternal;
extern NSPanelWeatherUpdateDefaultTypeInternal _NSPanelWeatherUpdate_default_instance_;
class NSPanelWeatherUpdate_ForecastItem;
struct NSPanelWeatherUpdate_ForecastItemDefaultTypeInternal;
extern NSPanelWeatherUpdate_ForecastItemDefaultTypeInternal _NSPanelWeatherUpdate_ForecastItem_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum NSPanelConfig_NSPanelDefaultPage : int {
  NSPanelConfig_NSPanelDefaultPage_HOME = 0,
  NSPanelConfig_NSPanelDefaultPage_SCENES = 1,
  NSPanelConfig_NSPanelDefaultPage_ENTITIES = 2,
  NSPanelConfig_NSPanelDefaultPage_NSPanelConfig_NSPanelDefaultPage_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelConfig_NSPanelDefaultPage_NSPanelConfig_NSPanelDefaultPage_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelConfig_NSPanelDefaultPage_IsValid(int value);
extern const uint32_t NSPanelConfig_NSPanelDefaultPage_internal_data_[];
constexpr NSPanelConfig_NSPanelDefaultPage NSPanelConfig_NSPanelDefaultPage_NSPanelDefaultPage_MIN = static_cast<NSPanelConfig_NSPanelDefaultPage>(0);
constexpr NSPanelConfig_NSPanelDefaultPage NSPanelConfig_NSPanelDefaultPage_NSPanelDefaultPage_MAX = static_cast<NSPanelConfig_NSPanelDefaultPage>(2);
constexpr int NSPanelConfig_NSPanelDefaultPage_NSPanelDefaultPage_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelConfig_NSPanelDefaultPage_descriptor();
template <typename T>
const std::string& NSPanelConfig_NSPanelDefaultPage_Name(T value) {
  static_assert(std::is_same<T, NSPanelConfig_NSPanelDefaultPage>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NSPanelDefaultPage_Name().");
  return NSPanelConfig_NSPanelDefaultPage_Name(static_cast<NSPanelConfig_NSPanelDefaultPage>(value));
}
template <>
inline const std::string& NSPanelConfig_NSPanelDefaultPage_Name(NSPanelConfig_NSPanelDefaultPage value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelConfig_NSPanelDefaultPage_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool NSPanelConfig_NSPanelDefaultPage_Parse(absl::string_view name, NSPanelConfig_NSPanelDefaultPage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelConfig_NSPanelDefaultPage>(
      NSPanelConfig_NSPanelDefaultPage_descriptor(), name, value);
}
enum NSPanelConfig_NSPanelScreensaverMode : int {
  NSPanelConfig_NSPanelScreensaverMode_WEATHER_WITH_BACKGROUND = 0,
  NSPanelConfig_NSPanelScreensaverMode_WEATHER_WITHOUT_BACKGROUND = 1,
  NSPanelConfig_NSPanelScreensaverMode_DATETIME_WITH_BACKGROUND = 3,
  NSPanelConfig_NSPanelScreensaverMode_DATETIME_WITHOUT_BACKGROUND = 4,
  NSPanelConfig_NSPanelScreensaverMode_NO_SCREENSAVER = 5,
  NSPanelConfig_NSPanelScreensaverMode_NSPanelConfig_NSPanelScreensaverMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelConfig_NSPanelScreensaverMode_NSPanelConfig_NSPanelScreensaverMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelConfig_NSPanelScreensaverMode_IsValid(int value);
extern const uint32_t NSPanelConfig_NSPanelScreensaverMode_internal_data_[];
constexpr NSPanelConfig_NSPanelScreensaverMode NSPanelConfig_NSPanelScreensaverMode_NSPanelScreensaverMode_MIN = static_cast<NSPanelConfig_NSPanelScreensaverMode>(0);
constexpr NSPanelConfig_NSPanelScreensaverMode NSPanelConfig_NSPanelScreensaverMode_NSPanelScreensaverMode_MAX = static_cast<NSPanelConfig_NSPanelScreensaverMode>(5);
constexpr int NSPanelConfig_NSPanelScreensaverMode_NSPanelScreensaverMode_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelConfig_NSPanelScreensaverMode_descriptor();
template <typename T>
const std::string& NSPanelConfig_NSPanelScreensaverMode_Name(T value) {
  static_assert(std::is_same<T, NSPanelConfig_NSPanelScreensaverMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NSPanelScreensaverMode_Name().");
  return NSPanelConfig_NSPanelScreensaverMode_Name(static_cast<NSPanelConfig_NSPanelScreensaverMode>(value));
}
template <>
inline const std::string& NSPanelConfig_NSPanelScreensaverMode_Name(NSPanelConfig_NSPanelScreensaverMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelConfig_NSPanelScreensaverMode_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool NSPanelConfig_NSPanelScreensaverMode_Parse(absl::string_view name, NSPanelConfig_NSPanelScreensaverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelConfig_NSPanelScreensaverMode>(
      NSPanelConfig_NSPanelScreensaverMode_descriptor(), name, value);
}
enum NSPanelConfig_NSPanelButtonMode : int {
  NSPanelConfig_NSPanelButtonMode_DIRECT = 0,
  NSPanelConfig_NSPanelButtonMode_FOLLOW = 1,
  NSPanelConfig_NSPanelButtonMode_NOTIFY_MANAGER = 2,
  NSPanelConfig_NSPanelButtonMode_NSPanelConfig_NSPanelButtonMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelConfig_NSPanelButtonMode_NSPanelConfig_NSPanelButtonMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelConfig_NSPanelButtonMode_IsValid(int value);
extern const uint32_t NSPanelConfig_NSPanelButtonMode_internal_data_[];
constexpr NSPanelConfig_NSPanelButtonMode NSPanelConfig_NSPanelButtonMode_NSPanelButtonMode_MIN = static_cast<NSPanelConfig_NSPanelButtonMode>(0);
constexpr NSPanelConfig_NSPanelButtonMode NSPanelConfig_NSPanelButtonMode_NSPanelButtonMode_MAX = static_cast<NSPanelConfig_NSPanelButtonMode>(2);
constexpr int NSPanelConfig_NSPanelButtonMode_NSPanelButtonMode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelConfig_NSPanelButtonMode_descriptor();
template <typename T>
const std::string& NSPanelConfig_NSPanelButtonMode_Name(T value) {
  static_assert(std::is_same<T, NSPanelConfig_NSPanelButtonMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NSPanelButtonMode_Name().");
  return NSPanelConfig_NSPanelButtonMode_Name(static_cast<NSPanelConfig_NSPanelButtonMode>(value));
}
template <>
inline const std::string& NSPanelConfig_NSPanelButtonMode_Name(NSPanelConfig_NSPanelButtonMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelConfig_NSPanelButtonMode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool NSPanelConfig_NSPanelButtonMode_Parse(absl::string_view name, NSPanelConfig_NSPanelButtonMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelConfig_NSPanelButtonMode>(
      NSPanelConfig_NSPanelButtonMode_descriptor(), name, value);
}
enum NSPanelStatusReport_state : int {
  NSPanelStatusReport_state_ONLINE = 0,
  NSPanelStatusReport_state_OFFLINE = 1,
  NSPanelStatusReport_state_UPDATING_TFT = 2,
  NSPanelStatusReport_state_UPDATING_FIRMWARE = 3,
  NSPanelStatusReport_state_UPDATING_LITTLEFS = 4,
  NSPanelStatusReport_state_NSPanelStatusReport_state_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelStatusReport_state_NSPanelStatusReport_state_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelStatusReport_state_IsValid(int value);
extern const uint32_t NSPanelStatusReport_state_internal_data_[];
constexpr NSPanelStatusReport_state NSPanelStatusReport_state_state_MIN = static_cast<NSPanelStatusReport_state>(0);
constexpr NSPanelStatusReport_state NSPanelStatusReport_state_state_MAX = static_cast<NSPanelStatusReport_state>(4);
constexpr int NSPanelStatusReport_state_state_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelStatusReport_state_descriptor();
template <typename T>
const std::string& NSPanelStatusReport_state_Name(T value) {
  static_assert(std::is_same<T, NSPanelStatusReport_state>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to state_Name().");
  return NSPanelStatusReport_state_Name(static_cast<NSPanelStatusReport_state>(value));
}
template <>
inline const std::string& NSPanelStatusReport_state_Name(NSPanelStatusReport_state value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelStatusReport_state_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool NSPanelStatusReport_state_Parse(absl::string_view name, NSPanelStatusReport_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelStatusReport_state>(
      NSPanelStatusReport_state_descriptor(), name, value);
}
enum NSPanelMQTTManagerCommand_AffectLightsOptions : int {
  NSPanelMQTTManagerCommand_AffectLightsOptions_ALL = 0,
  NSPanelMQTTManagerCommand_AffectLightsOptions_TABLE_LIGHTS = 1,
  NSPanelMQTTManagerCommand_AffectLightsOptions_CEILING_LIGHTS = 2,
  NSPanelMQTTManagerCommand_AffectLightsOptions_NSPanelMQTTManagerCommand_AffectLightsOptions_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelMQTTManagerCommand_AffectLightsOptions_NSPanelMQTTManagerCommand_AffectLightsOptions_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelMQTTManagerCommand_AffectLightsOptions_IsValid(int value);
extern const uint32_t NSPanelMQTTManagerCommand_AffectLightsOptions_internal_data_[];
constexpr NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand_AffectLightsOptions_AffectLightsOptions_MIN = static_cast<NSPanelMQTTManagerCommand_AffectLightsOptions>(0);
constexpr NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand_AffectLightsOptions_AffectLightsOptions_MAX = static_cast<NSPanelMQTTManagerCommand_AffectLightsOptions>(2);
constexpr int NSPanelMQTTManagerCommand_AffectLightsOptions_AffectLightsOptions_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelMQTTManagerCommand_AffectLightsOptions_descriptor();
template <typename T>
const std::string& NSPanelMQTTManagerCommand_AffectLightsOptions_Name(T value) {
  static_assert(std::is_same<T, NSPanelMQTTManagerCommand_AffectLightsOptions>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AffectLightsOptions_Name().");
  return NSPanelMQTTManagerCommand_AffectLightsOptions_Name(static_cast<NSPanelMQTTManagerCommand_AffectLightsOptions>(value));
}
template <>
inline const std::string& NSPanelMQTTManagerCommand_AffectLightsOptions_Name(NSPanelMQTTManagerCommand_AffectLightsOptions value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelMQTTManagerCommand_AffectLightsOptions_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool NSPanelMQTTManagerCommand_AffectLightsOptions_Parse(absl::string_view name, NSPanelMQTTManagerCommand_AffectLightsOptions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelMQTTManagerCommand_AffectLightsOptions>(
      NSPanelMQTTManagerCommand_AffectLightsOptions_descriptor(), name, value);
}
enum NSPanelWarningLevel : int {
  CRITICAL = 0,
  ERROR = 1,
  WARNING = 2,
  INFO = 3,
  DEBUG = 4,
  TRACE = 5,
  NSPanelWarningLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelWarningLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelWarningLevel_IsValid(int value);
extern const uint32_t NSPanelWarningLevel_internal_data_[];
constexpr NSPanelWarningLevel NSPanelWarningLevel_MIN = static_cast<NSPanelWarningLevel>(0);
constexpr NSPanelWarningLevel NSPanelWarningLevel_MAX = static_cast<NSPanelWarningLevel>(5);
constexpr int NSPanelWarningLevel_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelWarningLevel_descriptor();
template <typename T>
const std::string& NSPanelWarningLevel_Name(T value) {
  static_assert(std::is_same<T, NSPanelWarningLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NSPanelWarningLevel_Name().");
  return NSPanelWarningLevel_Name(static_cast<NSPanelWarningLevel>(value));
}
template <>
inline const std::string& NSPanelWarningLevel_Name(NSPanelWarningLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelWarningLevel_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool NSPanelWarningLevel_Parse(absl::string_view name, NSPanelWarningLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelWarningLevel>(
      NSPanelWarningLevel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class NSPanelWeatherUpdate_ForecastItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelWeatherUpdate.ForecastItem) */ {
 public:
  inline NSPanelWeatherUpdate_ForecastItem() : NSPanelWeatherUpdate_ForecastItem(nullptr) {}
  ~NSPanelWeatherUpdate_ForecastItem() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelWeatherUpdate_ForecastItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelWeatherUpdate_ForecastItem(const NSPanelWeatherUpdate_ForecastItem& from) : NSPanelWeatherUpdate_ForecastItem(nullptr, from) {}
  inline NSPanelWeatherUpdate_ForecastItem(NSPanelWeatherUpdate_ForecastItem&& from) noexcept
      : NSPanelWeatherUpdate_ForecastItem(nullptr, std::move(from)) {}
  inline NSPanelWeatherUpdate_ForecastItem& operator=(const NSPanelWeatherUpdate_ForecastItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelWeatherUpdate_ForecastItem& operator=(NSPanelWeatherUpdate_ForecastItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelWeatherUpdate_ForecastItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelWeatherUpdate_ForecastItem* internal_default_instance() {
    return reinterpret_cast<const NSPanelWeatherUpdate_ForecastItem*>(
        &_NSPanelWeatherUpdate_ForecastItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(NSPanelWeatherUpdate_ForecastItem& a, NSPanelWeatherUpdate_ForecastItem& b) { a.Swap(&b); }
  inline void Swap(NSPanelWeatherUpdate_ForecastItem* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelWeatherUpdate_ForecastItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelWeatherUpdate_ForecastItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelWeatherUpdate_ForecastItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelWeatherUpdate_ForecastItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelWeatherUpdate_ForecastItem& from) { NSPanelWeatherUpdate_ForecastItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelWeatherUpdate_ForecastItem* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelWeatherUpdate.ForecastItem"; }

 protected:
  explicit NSPanelWeatherUpdate_ForecastItem(::google::protobuf::Arena* arena);
  NSPanelWeatherUpdate_ForecastItem(::google::protobuf::Arena* arena, const NSPanelWeatherUpdate_ForecastItem& from);
  NSPanelWeatherUpdate_ForecastItem(::google::protobuf::Arena* arena, NSPanelWeatherUpdate_ForecastItem&& from) noexcept
      : NSPanelWeatherUpdate_ForecastItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWeatherIconFieldNumber = 1,
    kPrecipitationStringFieldNumber = 2,
    kTemperatureMaxminStringFieldNumber = 3,
    kWindStringFieldNumber = 4,
    kDisplayStringFieldNumber = 5,
  };
  // string weather_icon = 1;
  void clear_weather_icon() ;
  const std::string& weather_icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_weather_icon(Arg_&& arg, Args_... args);
  std::string* mutable_weather_icon();
  PROTOBUF_NODISCARD std::string* release_weather_icon();
  void set_allocated_weather_icon(std::string* value);

  private:
  const std::string& _internal_weather_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weather_icon(
      const std::string& value);
  std::string* _internal_mutable_weather_icon();

  public:
  // string precipitation_string = 2;
  void clear_precipitation_string() ;
  const std::string& precipitation_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_precipitation_string(Arg_&& arg, Args_... args);
  std::string* mutable_precipitation_string();
  PROTOBUF_NODISCARD std::string* release_precipitation_string();
  void set_allocated_precipitation_string(std::string* value);

  private:
  const std::string& _internal_precipitation_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_precipitation_string(
      const std::string& value);
  std::string* _internal_mutable_precipitation_string();

  public:
  // string temperature_maxmin_string = 3;
  void clear_temperature_maxmin_string() ;
  const std::string& temperature_maxmin_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_temperature_maxmin_string(Arg_&& arg, Args_... args);
  std::string* mutable_temperature_maxmin_string();
  PROTOBUF_NODISCARD std::string* release_temperature_maxmin_string();
  void set_allocated_temperature_maxmin_string(std::string* value);

  private:
  const std::string& _internal_temperature_maxmin_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_temperature_maxmin_string(
      const std::string& value);
  std::string* _internal_mutable_temperature_maxmin_string();

  public:
  // string wind_string = 4;
  void clear_wind_string() ;
  const std::string& wind_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wind_string(Arg_&& arg, Args_... args);
  std::string* mutable_wind_string();
  PROTOBUF_NODISCARD std::string* release_wind_string();
  void set_allocated_wind_string(std::string* value);

  private:
  const std::string& _internal_wind_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wind_string(
      const std::string& value);
  std::string* _internal_mutable_wind_string();

  public:
  // string display_string = 5;
  void clear_display_string() ;
  const std::string& display_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_string(Arg_&& arg, Args_... args);
  std::string* mutable_display_string();
  PROTOBUF_NODISCARD std::string* release_display_string();
  void set_allocated_display_string(std::string* value);

  private:
  const std::string& _internal_display_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_string(
      const std::string& value);
  std::string* _internal_mutable_display_string();

  public:
  // @@protoc_insertion_point(class_scope:NSPanelWeatherUpdate.ForecastItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      124, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelWeatherUpdate_ForecastItem_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelWeatherUpdate_ForecastItem& from_msg);
    ::google::protobuf::internal::ArenaStringPtr weather_icon_;
    ::google::protobuf::internal::ArenaStringPtr precipitation_string_;
    ::google::protobuf::internal::ArenaStringPtr temperature_maxmin_string_;
    ::google::protobuf::internal::ArenaStringPtr wind_string_;
    ::google::protobuf::internal::ArenaStringPtr display_string_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelWarning final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelWarning) */ {
 public:
  inline NSPanelWarning() : NSPanelWarning(nullptr) {}
  ~NSPanelWarning() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelWarning(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelWarning(const NSPanelWarning& from) : NSPanelWarning(nullptr, from) {}
  inline NSPanelWarning(NSPanelWarning&& from) noexcept
      : NSPanelWarning(nullptr, std::move(from)) {}
  inline NSPanelWarning& operator=(const NSPanelWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelWarning& operator=(NSPanelWarning&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelWarning& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelWarning* internal_default_instance() {
    return reinterpret_cast<const NSPanelWarning*>(
        &_NSPanelWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NSPanelWarning& a, NSPanelWarning& b) { a.Swap(&b); }
  inline void Swap(NSPanelWarning* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelWarning* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelWarning* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelWarning>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelWarning& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelWarning& from) { NSPanelWarning::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelWarning* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelWarning"; }

 protected:
  explicit NSPanelWarning(::google::protobuf::Arena* arena);
  NSPanelWarning(::google::protobuf::Arena* arena, const NSPanelWarning& from);
  NSPanelWarning(::google::protobuf::Arena* arena, NSPanelWarning&& from) noexcept
      : NSPanelWarning(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTextFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // .NSPanelWarningLevel level = 1;
  void clear_level() ;
  ::NSPanelWarningLevel level() const;
  void set_level(::NSPanelWarningLevel value);

  private:
  ::NSPanelWarningLevel _internal_level() const;
  void _internal_set_level(::NSPanelWarningLevel value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelWarning)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      27, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelWarning_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelWarning& from_msg);
    ::google::protobuf::internal::ArenaStringPtr text_;
    int level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelRoomStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelRoomStatus) */ {
 public:
  inline NSPanelRoomStatus() : NSPanelRoomStatus(nullptr) {}
  ~NSPanelRoomStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelRoomStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelRoomStatus(const NSPanelRoomStatus& from) : NSPanelRoomStatus(nullptr, from) {}
  inline NSPanelRoomStatus(NSPanelRoomStatus&& from) noexcept
      : NSPanelRoomStatus(nullptr, std::move(from)) {}
  inline NSPanelRoomStatus& operator=(const NSPanelRoomStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelRoomStatus& operator=(NSPanelRoomStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelRoomStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelRoomStatus* internal_default_instance() {
    return reinterpret_cast<const NSPanelRoomStatus*>(
        &_NSPanelRoomStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(NSPanelRoomStatus& a, NSPanelRoomStatus& b) { a.Swap(&b); }
  inline void Swap(NSPanelRoomStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelRoomStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelRoomStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelRoomStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelRoomStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelRoomStatus& from) { NSPanelRoomStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelRoomStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelRoomStatus"; }

 protected:
  explicit NSPanelRoomStatus(::google::protobuf::Arena* arena);
  NSPanelRoomStatus(::google::protobuf::Arena* arena, const NSPanelRoomStatus& from);
  NSPanelRoomStatus(::google::protobuf::Arena* arena, NSPanelRoomStatus&& from) noexcept
      : NSPanelRoomStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntityPageIdsFieldNumber = 13,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kAverageDimLevelFieldNumber = 3,
    kCeilingLightsDimLevelFieldNumber = 4,
    kTableLightsDimLevelFieldNumber = 5,
    kAverageColorTemperatureFieldNumber = 6,
    kCeilingLightsColorTemperatureValueFieldNumber = 7,
    kTableLightsColorTemperatureValueFieldNumber = 8,
    kNumCeilingLightsFieldNumber = 9,
    kNumTableLightsFieldNumber = 10,
    kNumCeilingLightsOnFieldNumber = 11,
    kNumTableLightsOnFieldNumber = 12,
  };
  // repeated int32 entity_page_ids = 13;
  int entity_page_ids_size() const;
  private:
  int _internal_entity_page_ids_size() const;

  public:
  void clear_entity_page_ids() ;
  ::int32_t entity_page_ids(int index) const;
  void set_entity_page_ids(int index, ::int32_t value);
  void add_entity_page_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& entity_page_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_entity_page_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_entity_page_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_entity_page_ids();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 average_dim_level = 3;
  void clear_average_dim_level() ;
  ::int32_t average_dim_level() const;
  void set_average_dim_level(::int32_t value);

  private:
  ::int32_t _internal_average_dim_level() const;
  void _internal_set_average_dim_level(::int32_t value);

  public:
  // int32 ceiling_lights_dim_level = 4;
  void clear_ceiling_lights_dim_level() ;
  ::int32_t ceiling_lights_dim_level() const;
  void set_ceiling_lights_dim_level(::int32_t value);

  private:
  ::int32_t _internal_ceiling_lights_dim_level() const;
  void _internal_set_ceiling_lights_dim_level(::int32_t value);

  public:
  // int32 table_lights_dim_level = 5;
  void clear_table_lights_dim_level() ;
  ::int32_t table_lights_dim_level() const;
  void set_table_lights_dim_level(::int32_t value);

  private:
  ::int32_t _internal_table_lights_dim_level() const;
  void _internal_set_table_lights_dim_level(::int32_t value);

  public:
  // int32 average_color_temperature = 6;
  void clear_average_color_temperature() ;
  ::int32_t average_color_temperature() const;
  void set_average_color_temperature(::int32_t value);

  private:
  ::int32_t _internal_average_color_temperature() const;
  void _internal_set_average_color_temperature(::int32_t value);

  public:
  // int32 ceiling_lights_color_temperature_value = 7;
  void clear_ceiling_lights_color_temperature_value() ;
  ::int32_t ceiling_lights_color_temperature_value() const;
  void set_ceiling_lights_color_temperature_value(::int32_t value);

  private:
  ::int32_t _internal_ceiling_lights_color_temperature_value() const;
  void _internal_set_ceiling_lights_color_temperature_value(::int32_t value);

  public:
  // int32 table_lights_color_temperature_value = 8;
  void clear_table_lights_color_temperature_value() ;
  ::int32_t table_lights_color_temperature_value() const;
  void set_table_lights_color_temperature_value(::int32_t value);

  private:
  ::int32_t _internal_table_lights_color_temperature_value() const;
  void _internal_set_table_lights_color_temperature_value(::int32_t value);

  public:
  // int32 num_ceiling_lights = 9;
  void clear_num_ceiling_lights() ;
  ::int32_t num_ceiling_lights() const;
  void set_num_ceiling_lights(::int32_t value);

  private:
  ::int32_t _internal_num_ceiling_lights() const;
  void _internal_set_num_ceiling_lights(::int32_t value);

  public:
  // int32 num_table_lights = 10;
  void clear_num_table_lights() ;
  ::int32_t num_table_lights() const;
  void set_num_table_lights(::int32_t value);

  private:
  ::int32_t _internal_num_table_lights() const;
  void _internal_set_num_table_lights(::int32_t value);

  public:
  // int32 num_ceiling_lights_on = 11;
  void clear_num_ceiling_lights_on() ;
  ::int32_t num_ceiling_lights_on() const;
  void set_num_ceiling_lights_on(::int32_t value);

  private:
  ::int32_t _internal_num_ceiling_lights_on() const;
  void _internal_set_num_ceiling_lights_on(::int32_t value);

  public:
  // int32 num_table_lights_on = 12;
  void clear_num_table_lights_on() ;
  ::int32_t num_table_lights_on() const;
  void set_num_table_lights_on(::int32_t value);

  private:
  ::int32_t _internal_num_table_lights_on() const;
  void _internal_set_num_table_lights_on(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelRoomStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 0,
      38, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelRoomStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelRoomStatus& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> entity_page_ids_;
    mutable ::google::protobuf::internal::CachedSize _entity_page_ids_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    ::int32_t average_dim_level_;
    ::int32_t ceiling_lights_dim_level_;
    ::int32_t table_lights_dim_level_;
    ::int32_t average_color_temperature_;
    ::int32_t ceiling_lights_color_temperature_value_;
    ::int32_t table_lights_color_temperature_value_;
    ::int32_t num_ceiling_lights_;
    ::int32_t num_table_lights_;
    ::int32_t num_ceiling_lights_on_;
    ::int32_t num_table_lights_on_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelRoomEntitiesPage_EntitySlot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelRoomEntitiesPage.EntitySlot) */ {
 public:
  inline NSPanelRoomEntitiesPage_EntitySlot() : NSPanelRoomEntitiesPage_EntitySlot(nullptr) {}
  ~NSPanelRoomEntitiesPage_EntitySlot() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelRoomEntitiesPage_EntitySlot(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelRoomEntitiesPage_EntitySlot(const NSPanelRoomEntitiesPage_EntitySlot& from) : NSPanelRoomEntitiesPage_EntitySlot(nullptr, from) {}
  inline NSPanelRoomEntitiesPage_EntitySlot(NSPanelRoomEntitiesPage_EntitySlot&& from) noexcept
      : NSPanelRoomEntitiesPage_EntitySlot(nullptr, std::move(from)) {}
  inline NSPanelRoomEntitiesPage_EntitySlot& operator=(const NSPanelRoomEntitiesPage_EntitySlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelRoomEntitiesPage_EntitySlot& operator=(NSPanelRoomEntitiesPage_EntitySlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelRoomEntitiesPage_EntitySlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelRoomEntitiesPage_EntitySlot* internal_default_instance() {
    return reinterpret_cast<const NSPanelRoomEntitiesPage_EntitySlot*>(
        &_NSPanelRoomEntitiesPage_EntitySlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(NSPanelRoomEntitiesPage_EntitySlot& a, NSPanelRoomEntitiesPage_EntitySlot& b) { a.Swap(&b); }
  inline void Swap(NSPanelRoomEntitiesPage_EntitySlot* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelRoomEntitiesPage_EntitySlot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelRoomEntitiesPage_EntitySlot* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelRoomEntitiesPage_EntitySlot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelRoomEntitiesPage_EntitySlot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelRoomEntitiesPage_EntitySlot& from) { NSPanelRoomEntitiesPage_EntitySlot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelRoomEntitiesPage_EntitySlot* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelRoomEntitiesPage.EntitySlot"; }

 protected:
  explicit NSPanelRoomEntitiesPage_EntitySlot(::google::protobuf::Arena* arena);
  NSPanelRoomEntitiesPage_EntitySlot(::google::protobuf::Arena* arena, const NSPanelRoomEntitiesPage_EntitySlot& from);
  NSPanelRoomEntitiesPage_EntitySlot(::google::protobuf::Arena* arena, NSPanelRoomEntitiesPage_EntitySlot&& from) noexcept
      : NSPanelRoomEntitiesPage_EntitySlot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kIconFieldNumber = 3,
    kMqttStateTopicFieldNumber = 7,
    kRoomViewPositionFieldNumber = 1,
    kPcoFieldNumber = 4,
    kPco2FieldNumber = 5,
    kCanSaveSceneFieldNumber = 6,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string icon = 3;
  void clear_icon() ;
  const std::string& icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon(Arg_&& arg, Args_... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* value);

  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(
      const std::string& value);
  std::string* _internal_mutable_icon();

  public:
  // string mqtt_state_topic = 7;
  void clear_mqtt_state_topic() ;
  const std::string& mqtt_state_topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mqtt_state_topic(Arg_&& arg, Args_... args);
  std::string* mutable_mqtt_state_topic();
  PROTOBUF_NODISCARD std::string* release_mqtt_state_topic();
  void set_allocated_mqtt_state_topic(std::string* value);

  private:
  const std::string& _internal_mqtt_state_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mqtt_state_topic(
      const std::string& value);
  std::string* _internal_mutable_mqtt_state_topic();

  public:
  // int32 room_view_position = 1;
  void clear_room_view_position() ;
  ::int32_t room_view_position() const;
  void set_room_view_position(::int32_t value);

  private:
  ::int32_t _internal_room_view_position() const;
  void _internal_set_room_view_position(::int32_t value);

  public:
  // int32 pco = 4;
  void clear_pco() ;
  ::int32_t pco() const;
  void set_pco(::int32_t value);

  private:
  ::int32_t _internal_pco() const;
  void _internal_set_pco(::int32_t value);

  public:
  // int32 pco2 = 5;
  void clear_pco2() ;
  ::int32_t pco2() const;
  void set_pco2(::int32_t value);

  private:
  ::int32_t _internal_pco2() const;
  void _internal_set_pco2(::int32_t value);

  public:
  // bool can_save_scene = 6;
  void clear_can_save_scene() ;
  bool can_save_scene() const;
  void set_can_save_scene(bool value);

  private:
  bool _internal_can_save_scene() const;
  void _internal_set_can_save_scene(bool value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelRoomEntitiesPage.EntitySlot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      67, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelRoomEntitiesPage_EntitySlot_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelRoomEntitiesPage_EntitySlot& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr icon_;
    ::google::protobuf::internal::ArenaStringPtr mqtt_state_topic_;
    ::int32_t room_view_position_;
    ::int32_t pco_;
    ::int32_t pco2_;
    bool can_save_scene_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage) */ {
 public:
  inline NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage() : NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(nullptr) {}
  ~NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& from) : NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(nullptr, from) {}
  inline NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage&& from) noexcept
      : NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(nullptr, std::move(from)) {}
  inline NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& operator=(const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& operator=(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* internal_default_instance() {
    return reinterpret_cast<const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage*>(
        &_NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& a, NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& b) { a.Swap(&b); }
  inline void Swap(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& from) { NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage"; }

 protected:
  explicit NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(::google::protobuf::Arena* arena);
  NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& from);
  NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(::google::protobuf::Arena* arena, NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage&& from) noexcept
      : NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntityPageIdFieldNumber = 1,
    kEntitySlotFieldNumber = 2,
  };
  // int32 entity_page_id = 1;
  void clear_entity_page_id() ;
  ::int32_t entity_page_id() const;
  void set_entity_page_id(::int32_t value);

  private:
  ::int32_t _internal_entity_page_id() const;
  void _internal_set_entity_page_id(::int32_t value);

  public:
  // int32 entity_slot = 2;
  void clear_entity_slot() ;
  ::int32_t entity_slot() const;
  void set_entity_slot(::int32_t value);

  private:
  ::int32_t _internal_entity_slot() const;
  void _internal_set_entity_slot(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& from_msg);
    ::int32_t entity_page_id_;
    ::int32_t entity_slot_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelMQTTManagerCommand_SaveSceneCommand final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelMQTTManagerCommand.SaveSceneCommand) */ {
 public:
  inline NSPanelMQTTManagerCommand_SaveSceneCommand() : NSPanelMQTTManagerCommand_SaveSceneCommand(nullptr) {}
  ~NSPanelMQTTManagerCommand_SaveSceneCommand() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_SaveSceneCommand(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelMQTTManagerCommand_SaveSceneCommand(const NSPanelMQTTManagerCommand_SaveSceneCommand& from) : NSPanelMQTTManagerCommand_SaveSceneCommand(nullptr, from) {}
  inline NSPanelMQTTManagerCommand_SaveSceneCommand(NSPanelMQTTManagerCommand_SaveSceneCommand&& from) noexcept
      : NSPanelMQTTManagerCommand_SaveSceneCommand(nullptr, std::move(from)) {}
  inline NSPanelMQTTManagerCommand_SaveSceneCommand& operator=(const NSPanelMQTTManagerCommand_SaveSceneCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelMQTTManagerCommand_SaveSceneCommand& operator=(NSPanelMQTTManagerCommand_SaveSceneCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelMQTTManagerCommand_SaveSceneCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelMQTTManagerCommand_SaveSceneCommand* internal_default_instance() {
    return reinterpret_cast<const NSPanelMQTTManagerCommand_SaveSceneCommand*>(
        &_NSPanelMQTTManagerCommand_SaveSceneCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(NSPanelMQTTManagerCommand_SaveSceneCommand& a, NSPanelMQTTManagerCommand_SaveSceneCommand& b) { a.Swap(&b); }
  inline void Swap(NSPanelMQTTManagerCommand_SaveSceneCommand* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelMQTTManagerCommand_SaveSceneCommand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelMQTTManagerCommand_SaveSceneCommand* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelMQTTManagerCommand_SaveSceneCommand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelMQTTManagerCommand_SaveSceneCommand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelMQTTManagerCommand_SaveSceneCommand& from) { NSPanelMQTTManagerCommand_SaveSceneCommand::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelMQTTManagerCommand_SaveSceneCommand* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelMQTTManagerCommand.SaveSceneCommand"; }

 protected:
  explicit NSPanelMQTTManagerCommand_SaveSceneCommand(::google::protobuf::Arena* arena);
  NSPanelMQTTManagerCommand_SaveSceneCommand(::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_SaveSceneCommand& from);
  NSPanelMQTTManagerCommand_SaveSceneCommand(::google::protobuf::Arena* arena, NSPanelMQTTManagerCommand_SaveSceneCommand&& from) noexcept
      : NSPanelMQTTManagerCommand_SaveSceneCommand(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntityPageIdFieldNumber = 1,
    kEntitySlotFieldNumber = 2,
  };
  // int32 entity_page_id = 1;
  void clear_entity_page_id() ;
  ::int32_t entity_page_id() const;
  void set_entity_page_id(::int32_t value);

  private:
  ::int32_t _internal_entity_page_id() const;
  void _internal_set_entity_page_id(::int32_t value);

  public:
  // int32 entity_slot = 2;
  void clear_entity_slot() ;
  ::int32_t entity_slot() const;
  void set_entity_slot(::int32_t value);

  private:
  ::int32_t _internal_entity_slot() const;
  void _internal_set_entity_slot(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelMQTTManagerCommand.SaveSceneCommand)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelMQTTManagerCommand_SaveSceneCommand_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelMQTTManagerCommand_SaveSceneCommand& from_msg);
    ::int32_t entity_page_id_;
    ::int32_t entity_slot_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelMQTTManagerCommand_LightCommand final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelMQTTManagerCommand.LightCommand) */ {
 public:
  inline NSPanelMQTTManagerCommand_LightCommand() : NSPanelMQTTManagerCommand_LightCommand(nullptr) {}
  ~NSPanelMQTTManagerCommand_LightCommand() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_LightCommand(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelMQTTManagerCommand_LightCommand(const NSPanelMQTTManagerCommand_LightCommand& from) : NSPanelMQTTManagerCommand_LightCommand(nullptr, from) {}
  inline NSPanelMQTTManagerCommand_LightCommand(NSPanelMQTTManagerCommand_LightCommand&& from) noexcept
      : NSPanelMQTTManagerCommand_LightCommand(nullptr, std::move(from)) {}
  inline NSPanelMQTTManagerCommand_LightCommand& operator=(const NSPanelMQTTManagerCommand_LightCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelMQTTManagerCommand_LightCommand& operator=(NSPanelMQTTManagerCommand_LightCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelMQTTManagerCommand_LightCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelMQTTManagerCommand_LightCommand* internal_default_instance() {
    return reinterpret_cast<const NSPanelMQTTManagerCommand_LightCommand*>(
        &_NSPanelMQTTManagerCommand_LightCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(NSPanelMQTTManagerCommand_LightCommand& a, NSPanelMQTTManagerCommand_LightCommand& b) { a.Swap(&b); }
  inline void Swap(NSPanelMQTTManagerCommand_LightCommand* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelMQTTManagerCommand_LightCommand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelMQTTManagerCommand_LightCommand* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelMQTTManagerCommand_LightCommand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelMQTTManagerCommand_LightCommand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelMQTTManagerCommand_LightCommand& from) { NSPanelMQTTManagerCommand_LightCommand::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelMQTTManagerCommand_LightCommand* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelMQTTManagerCommand.LightCommand"; }

 protected:
  explicit NSPanelMQTTManagerCommand_LightCommand(::google::protobuf::Arena* arena);
  NSPanelMQTTManagerCommand_LightCommand(::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_LightCommand& from);
  NSPanelMQTTManagerCommand_LightCommand(::google::protobuf::Arena* arena, NSPanelMQTTManagerCommand_LightCommand&& from) noexcept
      : NSPanelMQTTManagerCommand_LightCommand(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLightIdsFieldNumber = 1,
    kBrightnessFieldNumber = 3,
    kColorTemperatureFieldNumber = 5,
    kHasBrightnessFieldNumber = 2,
    kHasColorTemperatureFieldNumber = 4,
    kHasHueFieldNumber = 6,
    kHasSaturationFieldNumber = 8,
    kHueFieldNumber = 7,
    kSaturationFieldNumber = 9,
  };
  // repeated int32 light_ids = 1;
  int light_ids_size() const;
  private:
  int _internal_light_ids_size() const;

  public:
  void clear_light_ids() ;
  ::int32_t light_ids(int index) const;
  void set_light_ids(int index, ::int32_t value);
  void add_light_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& light_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_light_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_light_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_light_ids();

  public:
  // int32 brightness = 3;
  void clear_brightness() ;
  ::int32_t brightness() const;
  void set_brightness(::int32_t value);

  private:
  ::int32_t _internal_brightness() const;
  void _internal_set_brightness(::int32_t value);

  public:
  // int32 color_temperature = 5;
  void clear_color_temperature() ;
  ::int32_t color_temperature() const;
  void set_color_temperature(::int32_t value);

  private:
  ::int32_t _internal_color_temperature() const;
  void _internal_set_color_temperature(::int32_t value);

  public:
  // bool has_brightness = 2;
  void clear_has_brightness() ;
  bool has_brightness() const;
  void set_has_brightness(bool value);

  private:
  bool _internal_has_brightness() const;
  void _internal_set_has_brightness(bool value);

  public:
  // bool has_color_temperature = 4;
  void clear_has_color_temperature() ;
  bool has_color_temperature() const;
  void set_has_color_temperature(bool value);

  private:
  bool _internal_has_color_temperature() const;
  void _internal_set_has_color_temperature(bool value);

  public:
  // bool has_hue = 6;
  void clear_has_hue() ;
  bool has_hue() const;
  void set_has_hue(bool value);

  private:
  bool _internal_has_hue() const;
  void _internal_set_has_hue(bool value);

  public:
  // bool has_saturation = 8;
  void clear_has_saturation() ;
  bool has_saturation() const;
  void set_has_saturation(bool value);

  private:
  bool _internal_has_saturation() const;
  void _internal_set_has_saturation(bool value);

  public:
  // int32 hue = 7;
  void clear_hue() ;
  ::int32_t hue() const;
  void set_hue(::int32_t value);

  private:
  ::int32_t _internal_hue() const;
  void _internal_set_hue(::int32_t value);

  public:
  // int32 saturation = 9;
  void clear_saturation() ;
  ::int32_t saturation() const;
  void set_saturation(::int32_t value);

  private:
  ::int32_t _internal_saturation() const;
  void _internal_set_saturation(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelMQTTManagerCommand.LightCommand)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelMQTTManagerCommand_LightCommand_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelMQTTManagerCommand_LightCommand& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> light_ids_;
    mutable ::google::protobuf::internal::CachedSize _light_ids_cached_byte_size_;
    ::int32_t brightness_;
    ::int32_t color_temperature_;
    bool has_brightness_;
    bool has_color_temperature_;
    bool has_hue_;
    bool has_saturation_;
    ::int32_t hue_;
    ::int32_t saturation_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelMQTTManagerCommand_FirstPageTurnLightOn final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelMQTTManagerCommand.FirstPageTurnLightOn) */ {
 public:
  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOn() : NSPanelMQTTManagerCommand_FirstPageTurnLightOn(nullptr) {}
  ~NSPanelMQTTManagerCommand_FirstPageTurnLightOn() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_FirstPageTurnLightOn(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOn(const NSPanelMQTTManagerCommand_FirstPageTurnLightOn& from) : NSPanelMQTTManagerCommand_FirstPageTurnLightOn(nullptr, from) {}
  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOn(NSPanelMQTTManagerCommand_FirstPageTurnLightOn&& from) noexcept
      : NSPanelMQTTManagerCommand_FirstPageTurnLightOn(nullptr, std::move(from)) {}
  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOn& operator=(const NSPanelMQTTManagerCommand_FirstPageTurnLightOn& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOn& operator=(NSPanelMQTTManagerCommand_FirstPageTurnLightOn&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelMQTTManagerCommand_FirstPageTurnLightOn& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelMQTTManagerCommand_FirstPageTurnLightOn* internal_default_instance() {
    return reinterpret_cast<const NSPanelMQTTManagerCommand_FirstPageTurnLightOn*>(
        &_NSPanelMQTTManagerCommand_FirstPageTurnLightOn_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(NSPanelMQTTManagerCommand_FirstPageTurnLightOn& a, NSPanelMQTTManagerCommand_FirstPageTurnLightOn& b) { a.Swap(&b); }
  inline void Swap(NSPanelMQTTManagerCommand_FirstPageTurnLightOn* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelMQTTManagerCommand_FirstPageTurnLightOn* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelMQTTManagerCommand_FirstPageTurnLightOn* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelMQTTManagerCommand_FirstPageTurnLightOn>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelMQTTManagerCommand_FirstPageTurnLightOn& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelMQTTManagerCommand_FirstPageTurnLightOn& from) { NSPanelMQTTManagerCommand_FirstPageTurnLightOn::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelMQTTManagerCommand_FirstPageTurnLightOn* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelMQTTManagerCommand.FirstPageTurnLightOn"; }

 protected:
  explicit NSPanelMQTTManagerCommand_FirstPageTurnLightOn(::google::protobuf::Arena* arena);
  NSPanelMQTTManagerCommand_FirstPageTurnLightOn(::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_FirstPageTurnLightOn& from);
  NSPanelMQTTManagerCommand_FirstPageTurnLightOn(::google::protobuf::Arena* arena, NSPanelMQTTManagerCommand_FirstPageTurnLightOn&& from) noexcept
      : NSPanelMQTTManagerCommand_FirstPageTurnLightOn(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAffectLightsFieldNumber = 1,
    kBrightnessSliderValueFieldNumber = 2,
    kKelvinSliderValueFieldNumber = 3,
    kSelectedRoomFieldNumber = 4,
    kGlobalFieldNumber = 5,
    kHasBrightnessValueFieldNumber = 6,
    kHasKelvinValueFieldNumber = 7,
  };
  // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
  void clear_affect_lights() ;
  ::NSPanelMQTTManagerCommand_AffectLightsOptions affect_lights() const;
  void set_affect_lights(::NSPanelMQTTManagerCommand_AffectLightsOptions value);

  private:
  ::NSPanelMQTTManagerCommand_AffectLightsOptions _internal_affect_lights() const;
  void _internal_set_affect_lights(::NSPanelMQTTManagerCommand_AffectLightsOptions value);

  public:
  // int32 brightness_slider_value = 2;
  void clear_brightness_slider_value() ;
  ::int32_t brightness_slider_value() const;
  void set_brightness_slider_value(::int32_t value);

  private:
  ::int32_t _internal_brightness_slider_value() const;
  void _internal_set_brightness_slider_value(::int32_t value);

  public:
  // int32 kelvin_slider_value = 3;
  void clear_kelvin_slider_value() ;
  ::int32_t kelvin_slider_value() const;
  void set_kelvin_slider_value(::int32_t value);

  private:
  ::int32_t _internal_kelvin_slider_value() const;
  void _internal_set_kelvin_slider_value(::int32_t value);

  public:
  // int32 selected_room = 4;
  void clear_selected_room() ;
  ::int32_t selected_room() const;
  void set_selected_room(::int32_t value);

  private:
  ::int32_t _internal_selected_room() const;
  void _internal_set_selected_room(::int32_t value);

  public:
  // bool global = 5;
  void clear_global() ;
  bool global() const;
  void set_global(bool value);

  private:
  bool _internal_global() const;
  void _internal_set_global(bool value);

  public:
  // bool has_brightness_value = 6;
  void clear_has_brightness_value() ;
  bool has_brightness_value() const;
  void set_has_brightness_value(bool value);

  private:
  bool _internal_has_brightness_value() const;
  void _internal_set_has_brightness_value(bool value);

  public:
  // bool has_kelvin_value = 7;
  void clear_has_kelvin_value() ;
  bool has_kelvin_value() const;
  void set_has_kelvin_value(bool value);

  private:
  bool _internal_has_kelvin_value() const;
  void _internal_set_has_kelvin_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelMQTTManagerCommand.FirstPageTurnLightOn)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelMQTTManagerCommand_FirstPageTurnLightOn_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelMQTTManagerCommand_FirstPageTurnLightOn& from_msg);
    int affect_lights_;
    ::int32_t brightness_slider_value_;
    ::int32_t kelvin_slider_value_;
    ::int32_t selected_room_;
    bool global_;
    bool has_brightness_value_;
    bool has_kelvin_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelMQTTManagerCommand_FirstPageTurnLightOff final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelMQTTManagerCommand.FirstPageTurnLightOff) */ {
 public:
  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOff() : NSPanelMQTTManagerCommand_FirstPageTurnLightOff(nullptr) {}
  ~NSPanelMQTTManagerCommand_FirstPageTurnLightOff() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_FirstPageTurnLightOff(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOff(const NSPanelMQTTManagerCommand_FirstPageTurnLightOff& from) : NSPanelMQTTManagerCommand_FirstPageTurnLightOff(nullptr, from) {}
  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOff(NSPanelMQTTManagerCommand_FirstPageTurnLightOff&& from) noexcept
      : NSPanelMQTTManagerCommand_FirstPageTurnLightOff(nullptr, std::move(from)) {}
  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOff& operator=(const NSPanelMQTTManagerCommand_FirstPageTurnLightOff& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelMQTTManagerCommand_FirstPageTurnLightOff& operator=(NSPanelMQTTManagerCommand_FirstPageTurnLightOff&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelMQTTManagerCommand_FirstPageTurnLightOff& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelMQTTManagerCommand_FirstPageTurnLightOff* internal_default_instance() {
    return reinterpret_cast<const NSPanelMQTTManagerCommand_FirstPageTurnLightOff*>(
        &_NSPanelMQTTManagerCommand_FirstPageTurnLightOff_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(NSPanelMQTTManagerCommand_FirstPageTurnLightOff& a, NSPanelMQTTManagerCommand_FirstPageTurnLightOff& b) { a.Swap(&b); }
  inline void Swap(NSPanelMQTTManagerCommand_FirstPageTurnLightOff* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelMQTTManagerCommand_FirstPageTurnLightOff* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelMQTTManagerCommand_FirstPageTurnLightOff* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelMQTTManagerCommand_FirstPageTurnLightOff>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelMQTTManagerCommand_FirstPageTurnLightOff& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelMQTTManagerCommand_FirstPageTurnLightOff& from) { NSPanelMQTTManagerCommand_FirstPageTurnLightOff::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelMQTTManagerCommand_FirstPageTurnLightOff* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelMQTTManagerCommand.FirstPageTurnLightOff"; }

 protected:
  explicit NSPanelMQTTManagerCommand_FirstPageTurnLightOff(::google::protobuf::Arena* arena);
  NSPanelMQTTManagerCommand_FirstPageTurnLightOff(::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_FirstPageTurnLightOff& from);
  NSPanelMQTTManagerCommand_FirstPageTurnLightOff(::google::protobuf::Arena* arena, NSPanelMQTTManagerCommand_FirstPageTurnLightOff&& from) noexcept
      : NSPanelMQTTManagerCommand_FirstPageTurnLightOff(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAffectLightsFieldNumber = 1,
    kGlobalFieldNumber = 2,
  };
  // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
  void clear_affect_lights() ;
  ::NSPanelMQTTManagerCommand_AffectLightsOptions affect_lights() const;
  void set_affect_lights(::NSPanelMQTTManagerCommand_AffectLightsOptions value);

  private:
  ::NSPanelMQTTManagerCommand_AffectLightsOptions _internal_affect_lights() const;
  void _internal_set_affect_lights(::NSPanelMQTTManagerCommand_AffectLightsOptions value);

  public:
  // bool global = 2;
  void clear_global() ;
  bool global() const;
  void set_global(bool value);

  private:
  bool _internal_global() const;
  void _internal_set_global(bool value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelMQTTManagerCommand.FirstPageTurnLightOff)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelMQTTManagerCommand_FirstPageTurnLightOff_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelMQTTManagerCommand_FirstPageTurnLightOff& from_msg);
    int affect_lights_;
    bool global_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelMQTTManagerCommand_ButtonPressed final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelMQTTManagerCommand.ButtonPressed) */ {
 public:
  inline NSPanelMQTTManagerCommand_ButtonPressed() : NSPanelMQTTManagerCommand_ButtonPressed(nullptr) {}
  ~NSPanelMQTTManagerCommand_ButtonPressed() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_ButtonPressed(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelMQTTManagerCommand_ButtonPressed(const NSPanelMQTTManagerCommand_ButtonPressed& from) : NSPanelMQTTManagerCommand_ButtonPressed(nullptr, from) {}
  inline NSPanelMQTTManagerCommand_ButtonPressed(NSPanelMQTTManagerCommand_ButtonPressed&& from) noexcept
      : NSPanelMQTTManagerCommand_ButtonPressed(nullptr, std::move(from)) {}
  inline NSPanelMQTTManagerCommand_ButtonPressed& operator=(const NSPanelMQTTManagerCommand_ButtonPressed& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelMQTTManagerCommand_ButtonPressed& operator=(NSPanelMQTTManagerCommand_ButtonPressed&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelMQTTManagerCommand_ButtonPressed& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelMQTTManagerCommand_ButtonPressed* internal_default_instance() {
    return reinterpret_cast<const NSPanelMQTTManagerCommand_ButtonPressed*>(
        &_NSPanelMQTTManagerCommand_ButtonPressed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(NSPanelMQTTManagerCommand_ButtonPressed& a, NSPanelMQTTManagerCommand_ButtonPressed& b) { a.Swap(&b); }
  inline void Swap(NSPanelMQTTManagerCommand_ButtonPressed* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelMQTTManagerCommand_ButtonPressed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelMQTTManagerCommand_ButtonPressed* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelMQTTManagerCommand_ButtonPressed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelMQTTManagerCommand_ButtonPressed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelMQTTManagerCommand_ButtonPressed& from) { NSPanelMQTTManagerCommand_ButtonPressed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelMQTTManagerCommand_ButtonPressed* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelMQTTManagerCommand.ButtonPressed"; }

 protected:
  explicit NSPanelMQTTManagerCommand_ButtonPressed(::google::protobuf::Arena* arena);
  NSPanelMQTTManagerCommand_ButtonPressed(::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_ButtonPressed& from);
  NSPanelMQTTManagerCommand_ButtonPressed(::google::protobuf::Arena* arena, NSPanelMQTTManagerCommand_ButtonPressed&& from) noexcept
      : NSPanelMQTTManagerCommand_ButtonPressed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNspanelIdFieldNumber = 1,
    kButtonIdFieldNumber = 2,
  };
  // int32 nspanel_id = 1;
  void clear_nspanel_id() ;
  ::int32_t nspanel_id() const;
  void set_nspanel_id(::int32_t value);

  private:
  ::int32_t _internal_nspanel_id() const;
  void _internal_set_nspanel_id(::int32_t value);

  public:
  // int32 button_id = 2;
  void clear_button_id() ;
  ::int32_t button_id() const;
  void set_button_id(::int32_t value);

  private:
  ::int32_t _internal_button_id() const;
  void _internal_set_button_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelMQTTManagerCommand.ButtonPressed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelMQTTManagerCommand_ButtonPressed_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelMQTTManagerCommand_ButtonPressed& from_msg);
    ::int32_t nspanel_id_;
    ::int32_t button_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelLightStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelLightStatus) */ {
 public:
  inline NSPanelLightStatus() : NSPanelLightStatus(nullptr) {}
  ~NSPanelLightStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelLightStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelLightStatus(const NSPanelLightStatus& from) : NSPanelLightStatus(nullptr, from) {}
  inline NSPanelLightStatus(NSPanelLightStatus&& from) noexcept
      : NSPanelLightStatus(nullptr, std::move(from)) {}
  inline NSPanelLightStatus& operator=(const NSPanelLightStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelLightStatus& operator=(NSPanelLightStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelLightStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelLightStatus* internal_default_instance() {
    return reinterpret_cast<const NSPanelLightStatus*>(
        &_NSPanelLightStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(NSPanelLightStatus& a, NSPanelLightStatus& b) { a.Swap(&b); }
  inline void Swap(NSPanelLightStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelLightStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelLightStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelLightStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelLightStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelLightStatus& from) { NSPanelLightStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelLightStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelLightStatus"; }

 protected:
  explicit NSPanelLightStatus(::google::protobuf::Arena* arena);
  NSPanelLightStatus(::google::protobuf::Arena* arena, const NSPanelLightStatus& from);
  NSPanelLightStatus(::google::protobuf::Arena* arena, NSPanelLightStatus&& from) noexcept
      : NSPanelLightStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kCanDimFieldNumber = 3,
    kCanColorTemperatureFieldNumber = 4,
    kCanRgbFieldNumber = 5,
    kLightLevelFieldNumber = 6,
    kColorTempFieldNumber = 7,
    kHueFieldNumber = 8,
    kSaturationFieldNumber = 9,
    kRoomViewPositionFieldNumber = 10,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool can_dim = 3;
  void clear_can_dim() ;
  bool can_dim() const;
  void set_can_dim(bool value);

  private:
  bool _internal_can_dim() const;
  void _internal_set_can_dim(bool value);

  public:
  // bool can_color_temperature = 4;
  void clear_can_color_temperature() ;
  bool can_color_temperature() const;
  void set_can_color_temperature(bool value);

  private:
  bool _internal_can_color_temperature() const;
  void _internal_set_can_color_temperature(bool value);

  public:
  // bool can_rgb = 5;
  void clear_can_rgb() ;
  bool can_rgb() const;
  void set_can_rgb(bool value);

  private:
  bool _internal_can_rgb() const;
  void _internal_set_can_rgb(bool value);

  public:
  // int32 light_level = 6;
  void clear_light_level() ;
  ::int32_t light_level() const;
  void set_light_level(::int32_t value);

  private:
  ::int32_t _internal_light_level() const;
  void _internal_set_light_level(::int32_t value);

  public:
  // int32 color_temp = 7;
  void clear_color_temp() ;
  ::int32_t color_temp() const;
  void set_color_temp(::int32_t value);

  private:
  ::int32_t _internal_color_temp() const;
  void _internal_set_color_temp(::int32_t value);

  public:
  // int32 hue = 8;
  void clear_hue() ;
  ::int32_t hue() const;
  void set_hue(::int32_t value);

  private:
  ::int32_t _internal_hue() const;
  void _internal_set_hue(::int32_t value);

  public:
  // int32 saturation = 9;
  void clear_saturation() ;
  ::int32_t saturation() const;
  void set_saturation(::int32_t value);

  private:
  ::int32_t _internal_saturation() const;
  void _internal_set_saturation(::int32_t value);

  public:
  // int32 room_view_position = 10;
  void clear_room_view_position() ;
  ::int32_t room_view_position() const;
  void set_room_view_position(::int32_t value);

  private:
  ::int32_t _internal_room_view_position() const;
  void _internal_set_room_view_position(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelLightStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      39, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelLightStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelLightStatus& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    bool can_dim_;
    bool can_color_temperature_;
    bool can_rgb_;
    ::int32_t light_level_;
    ::int32_t color_temp_;
    ::int32_t hue_;
    ::int32_t saturation_;
    ::int32_t room_view_position_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelConfig_RoomInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelConfig.RoomInfo) */ {
 public:
  inline NSPanelConfig_RoomInfo() : NSPanelConfig_RoomInfo(nullptr) {}
  ~NSPanelConfig_RoomInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelConfig_RoomInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelConfig_RoomInfo(const NSPanelConfig_RoomInfo& from) : NSPanelConfig_RoomInfo(nullptr, from) {}
  inline NSPanelConfig_RoomInfo(NSPanelConfig_RoomInfo&& from) noexcept
      : NSPanelConfig_RoomInfo(nullptr, std::move(from)) {}
  inline NSPanelConfig_RoomInfo& operator=(const NSPanelConfig_RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelConfig_RoomInfo& operator=(NSPanelConfig_RoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelConfig_RoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelConfig_RoomInfo* internal_default_instance() {
    return reinterpret_cast<const NSPanelConfig_RoomInfo*>(
        &_NSPanelConfig_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NSPanelConfig_RoomInfo& a, NSPanelConfig_RoomInfo& b) { a.Swap(&b); }
  inline void Swap(NSPanelConfig_RoomInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelConfig_RoomInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelConfig_RoomInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelConfig_RoomInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelConfig_RoomInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelConfig_RoomInfo& from) { NSPanelConfig_RoomInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelConfig_RoomInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelConfig.RoomInfo"; }

 protected:
  explicit NSPanelConfig_RoomInfo(::google::protobuf::Arena* arena);
  NSPanelConfig_RoomInfo(::google::protobuf::Arena* arena, const NSPanelConfig_RoomInfo& from);
  NSPanelConfig_RoomInfo(::google::protobuf::Arena* arena, NSPanelConfig_RoomInfo&& from) noexcept
      : NSPanelConfig_RoomInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntityPageIdsFieldNumber = 2,
    kScenePageIdsFieldNumber = 3,
    kRoomIdFieldNumber = 1,
  };
  // repeated int32 entity_page_ids = 2;
  int entity_page_ids_size() const;
  private:
  int _internal_entity_page_ids_size() const;

  public:
  void clear_entity_page_ids() ;
  ::int32_t entity_page_ids(int index) const;
  void set_entity_page_ids(int index, ::int32_t value);
  void add_entity_page_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& entity_page_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_entity_page_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_entity_page_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_entity_page_ids();

  public:
  // repeated int32 scene_page_ids = 3;
  int scene_page_ids_size() const;
  private:
  int _internal_scene_page_ids_size() const;

  public:
  void clear_scene_page_ids() ;
  ::int32_t scene_page_ids(int index) const;
  void set_scene_page_ids(int index, ::int32_t value);
  void add_scene_page_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& scene_page_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_scene_page_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_scene_page_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_scene_page_ids();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelConfig.RoomInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelConfig_RoomInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelConfig_RoomInfo& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> entity_page_ids_;
    mutable ::google::protobuf::internal::CachedSize _entity_page_ids_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> scene_page_ids_;
    mutable ::google::protobuf::internal::CachedSize _scene_page_ids_cached_byte_size_;
    ::int32_t room_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelWeatherUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelWeatherUpdate) */ {
 public:
  inline NSPanelWeatherUpdate() : NSPanelWeatherUpdate(nullptr) {}
  ~NSPanelWeatherUpdate() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelWeatherUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelWeatherUpdate(const NSPanelWeatherUpdate& from) : NSPanelWeatherUpdate(nullptr, from) {}
  inline NSPanelWeatherUpdate(NSPanelWeatherUpdate&& from) noexcept
      : NSPanelWeatherUpdate(nullptr, std::move(from)) {}
  inline NSPanelWeatherUpdate& operator=(const NSPanelWeatherUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelWeatherUpdate& operator=(NSPanelWeatherUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelWeatherUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelWeatherUpdate* internal_default_instance() {
    return reinterpret_cast<const NSPanelWeatherUpdate*>(
        &_NSPanelWeatherUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(NSPanelWeatherUpdate& a, NSPanelWeatherUpdate& b) { a.Swap(&b); }
  inline void Swap(NSPanelWeatherUpdate* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelWeatherUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelWeatherUpdate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelWeatherUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelWeatherUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelWeatherUpdate& from) { NSPanelWeatherUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelWeatherUpdate* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelWeatherUpdate"; }

 protected:
  explicit NSPanelWeatherUpdate(::google::protobuf::Arena* arena);
  NSPanelWeatherUpdate(::google::protobuf::Arena* arena, const NSPanelWeatherUpdate& from);
  NSPanelWeatherUpdate(::google::protobuf::Arena* arena, NSPanelWeatherUpdate&& from) noexcept
      : NSPanelWeatherUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ForecastItem = NSPanelWeatherUpdate_ForecastItem;

  // accessors -------------------------------------------------------
  enum : int {
    kForecastItemsFieldNumber = 1,
    kCurrentWeatherIconFieldNumber = 2,
    kCurrentTemperatureStringFieldNumber = 3,
    kCurrentMaxminTemperatureFieldNumber = 4,
    kCurrentWindStringFieldNumber = 5,
    kSunriseStringFieldNumber = 6,
    kSunsetStringFieldNumber = 7,
    kCurrentPrecipitationStringFieldNumber = 8,
  };
  // repeated .NSPanelWeatherUpdate.ForecastItem forecast_items = 1;
  int forecast_items_size() const;
  private:
  int _internal_forecast_items_size() const;

  public:
  void clear_forecast_items() ;
  ::NSPanelWeatherUpdate_ForecastItem* mutable_forecast_items(int index);
  ::google::protobuf::RepeatedPtrField<::NSPanelWeatherUpdate_ForecastItem>* mutable_forecast_items();

  private:
  const ::google::protobuf::RepeatedPtrField<::NSPanelWeatherUpdate_ForecastItem>& _internal_forecast_items() const;
  ::google::protobuf::RepeatedPtrField<::NSPanelWeatherUpdate_ForecastItem>* _internal_mutable_forecast_items();
  public:
  const ::NSPanelWeatherUpdate_ForecastItem& forecast_items(int index) const;
  ::NSPanelWeatherUpdate_ForecastItem* add_forecast_items();
  const ::google::protobuf::RepeatedPtrField<::NSPanelWeatherUpdate_ForecastItem>& forecast_items() const;
  // string current_weather_icon = 2;
  void clear_current_weather_icon() ;
  const std::string& current_weather_icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_weather_icon(Arg_&& arg, Args_... args);
  std::string* mutable_current_weather_icon();
  PROTOBUF_NODISCARD std::string* release_current_weather_icon();
  void set_allocated_current_weather_icon(std::string* value);

  private:
  const std::string& _internal_current_weather_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_weather_icon(
      const std::string& value);
  std::string* _internal_mutable_current_weather_icon();

  public:
  // string current_temperature_string = 3;
  void clear_current_temperature_string() ;
  const std::string& current_temperature_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_temperature_string(Arg_&& arg, Args_... args);
  std::string* mutable_current_temperature_string();
  PROTOBUF_NODISCARD std::string* release_current_temperature_string();
  void set_allocated_current_temperature_string(std::string* value);

  private:
  const std::string& _internal_current_temperature_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_temperature_string(
      const std::string& value);
  std::string* _internal_mutable_current_temperature_string();

  public:
  // string current_maxmin_temperature = 4;
  void clear_current_maxmin_temperature() ;
  const std::string& current_maxmin_temperature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_maxmin_temperature(Arg_&& arg, Args_... args);
  std::string* mutable_current_maxmin_temperature();
  PROTOBUF_NODISCARD std::string* release_current_maxmin_temperature();
  void set_allocated_current_maxmin_temperature(std::string* value);

  private:
  const std::string& _internal_current_maxmin_temperature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_maxmin_temperature(
      const std::string& value);
  std::string* _internal_mutable_current_maxmin_temperature();

  public:
  // string current_wind_string = 5;
  void clear_current_wind_string() ;
  const std::string& current_wind_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_wind_string(Arg_&& arg, Args_... args);
  std::string* mutable_current_wind_string();
  PROTOBUF_NODISCARD std::string* release_current_wind_string();
  void set_allocated_current_wind_string(std::string* value);

  private:
  const std::string& _internal_current_wind_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_wind_string(
      const std::string& value);
  std::string* _internal_mutable_current_wind_string();

  public:
  // string sunrise_string = 6;
  void clear_sunrise_string() ;
  const std::string& sunrise_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sunrise_string(Arg_&& arg, Args_... args);
  std::string* mutable_sunrise_string();
  PROTOBUF_NODISCARD std::string* release_sunrise_string();
  void set_allocated_sunrise_string(std::string* value);

  private:
  const std::string& _internal_sunrise_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sunrise_string(
      const std::string& value);
  std::string* _internal_mutable_sunrise_string();

  public:
  // string sunset_string = 7;
  void clear_sunset_string() ;
  const std::string& sunset_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sunset_string(Arg_&& arg, Args_... args);
  std::string* mutable_sunset_string();
  PROTOBUF_NODISCARD std::string* release_sunset_string();
  void set_allocated_sunset_string(std::string* value);

  private:
  const std::string& _internal_sunset_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sunset_string(
      const std::string& value);
  std::string* _internal_mutable_sunset_string();

  public:
  // string current_precipitation_string = 8;
  void clear_current_precipitation_string() ;
  const std::string& current_precipitation_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_precipitation_string(Arg_&& arg, Args_... args);
  std::string* mutable_current_precipitation_string();
  PROTOBUF_NODISCARD std::string* release_current_precipitation_string();
  void set_allocated_current_precipitation_string(std::string* value);

  private:
  const std::string& _internal_current_precipitation_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_precipitation_string(
      const std::string& value);
  std::string* _internal_mutable_current_precipitation_string();

  public:
  // @@protoc_insertion_point(class_scope:NSPanelWeatherUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      183, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelWeatherUpdate_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelWeatherUpdate& from_msg);
    ::google::protobuf::RepeatedPtrField< ::NSPanelWeatherUpdate_ForecastItem > forecast_items_;
    ::google::protobuf::internal::ArenaStringPtr current_weather_icon_;
    ::google::protobuf::internal::ArenaStringPtr current_temperature_string_;
    ::google::protobuf::internal::ArenaStringPtr current_maxmin_temperature_;
    ::google::protobuf::internal::ArenaStringPtr current_wind_string_;
    ::google::protobuf::internal::ArenaStringPtr sunrise_string_;
    ::google::protobuf::internal::ArenaStringPtr sunset_string_;
    ::google::protobuf::internal::ArenaStringPtr current_precipitation_string_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelStatusReport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelStatusReport) */ {
 public:
  inline NSPanelStatusReport() : NSPanelStatusReport(nullptr) {}
  ~NSPanelStatusReport() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelStatusReport(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelStatusReport(const NSPanelStatusReport& from) : NSPanelStatusReport(nullptr, from) {}
  inline NSPanelStatusReport(NSPanelStatusReport&& from) noexcept
      : NSPanelStatusReport(nullptr, std::move(from)) {}
  inline NSPanelStatusReport& operator=(const NSPanelStatusReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelStatusReport& operator=(NSPanelStatusReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelStatusReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelStatusReport* internal_default_instance() {
    return reinterpret_cast<const NSPanelStatusReport*>(
        &_NSPanelStatusReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(NSPanelStatusReport& a, NSPanelStatusReport& b) { a.Swap(&b); }
  inline void Swap(NSPanelStatusReport* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelStatusReport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelStatusReport* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelStatusReport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelStatusReport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelStatusReport& from) { NSPanelStatusReport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelStatusReport* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelStatusReport"; }

 protected:
  explicit NSPanelStatusReport(::google::protobuf::Arena* arena);
  NSPanelStatusReport(::google::protobuf::Arena* arena, const NSPanelStatusReport& from);
  NSPanelStatusReport(::google::protobuf::Arena* arena, NSPanelStatusReport&& from) noexcept
      : NSPanelStatusReport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using state = NSPanelStatusReport_state;
  static constexpr state ONLINE = NSPanelStatusReport_state_ONLINE;
  static constexpr state OFFLINE = NSPanelStatusReport_state_OFFLINE;
  static constexpr state UPDATING_TFT = NSPanelStatusReport_state_UPDATING_TFT;
  static constexpr state UPDATING_FIRMWARE = NSPanelStatusReport_state_UPDATING_FIRMWARE;
  static constexpr state UPDATING_LITTLEFS = NSPanelStatusReport_state_UPDATING_LITTLEFS;
  static inline bool state_IsValid(int value) {
    return NSPanelStatusReport_state_IsValid(value);
  }
  static constexpr state state_MIN = NSPanelStatusReport_state_state_MIN;
  static constexpr state state_MAX = NSPanelStatusReport_state_state_MAX;
  static constexpr int state_ARRAYSIZE = NSPanelStatusReport_state_state_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* state_descriptor() {
    return NSPanelStatusReport_state_descriptor();
  }
  template <typename T>
  static inline const std::string& state_Name(T value) {
    return NSPanelStatusReport_state_Name(value);
  }
  static inline bool state_Parse(absl::string_view name, state* value) {
    return NSPanelStatusReport_state_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kWarningsFieldNumber = 8,
    kMacAddressFieldNumber = 5,
    kIpAddressFieldNumber = 7,
    kNspanelStateFieldNumber = 1,
    kUpdateProgressFieldNumber = 2,
    kRssiFieldNumber = 3,
    kHeapUsedPctFieldNumber = 4,
    kTemperatureFieldNumber = 6,
  };
  // repeated .NSPanelWarning warnings = 8;
  int warnings_size() const;
  private:
  int _internal_warnings_size() const;

  public:
  void clear_warnings() ;
  ::NSPanelWarning* mutable_warnings(int index);
  ::google::protobuf::RepeatedPtrField<::NSPanelWarning>* mutable_warnings();

  private:
  const ::google::protobuf::RepeatedPtrField<::NSPanelWarning>& _internal_warnings() const;
  ::google::protobuf::RepeatedPtrField<::NSPanelWarning>* _internal_mutable_warnings();
  public:
  const ::NSPanelWarning& warnings(int index) const;
  ::NSPanelWarning* add_warnings();
  const ::google::protobuf::RepeatedPtrField<::NSPanelWarning>& warnings() const;
  // string mac_address = 5;
  void clear_mac_address() ;
  const std::string& mac_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mac_address(Arg_&& arg, Args_... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* value);

  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(
      const std::string& value);
  std::string* _internal_mutable_mac_address();

  public:
  // string ip_address = 7;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* value);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // .NSPanelStatusReport.state nspanel_state = 1;
  void clear_nspanel_state() ;
  ::NSPanelStatusReport_state nspanel_state() const;
  void set_nspanel_state(::NSPanelStatusReport_state value);

  private:
  ::NSPanelStatusReport_state _internal_nspanel_state() const;
  void _internal_set_nspanel_state(::NSPanelStatusReport_state value);

  public:
  // int32 update_progress = 2;
  void clear_update_progress() ;
  ::int32_t update_progress() const;
  void set_update_progress(::int32_t value);

  private:
  ::int32_t _internal_update_progress() const;
  void _internal_set_update_progress(::int32_t value);

  public:
  // int32 rssi = 3;
  void clear_rssi() ;
  ::int32_t rssi() const;
  void set_rssi(::int32_t value);

  private:
  ::int32_t _internal_rssi() const;
  void _internal_set_rssi(::int32_t value);

  public:
  // int32 heap_used_pct = 4;
  void clear_heap_used_pct() ;
  ::int32_t heap_used_pct() const;
  void set_heap_used_pct(::int32_t value);

  private:
  ::int32_t _internal_heap_used_pct() const;
  void _internal_set_heap_used_pct(::int32_t value);

  public:
  // float temperature = 6;
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelStatusReport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      57, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelStatusReport_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelStatusReport& from_msg);
    ::google::protobuf::RepeatedPtrField< ::NSPanelWarning > warnings_;
    ::google::protobuf::internal::ArenaStringPtr mac_address_;
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    int nspanel_state_;
    ::int32_t update_progress_;
    ::int32_t rssi_;
    ::int32_t heap_used_pct_;
    float temperature_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelRoomEntitiesPage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelRoomEntitiesPage) */ {
 public:
  inline NSPanelRoomEntitiesPage() : NSPanelRoomEntitiesPage(nullptr) {}
  ~NSPanelRoomEntitiesPage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelRoomEntitiesPage(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelRoomEntitiesPage(const NSPanelRoomEntitiesPage& from) : NSPanelRoomEntitiesPage(nullptr, from) {}
  inline NSPanelRoomEntitiesPage(NSPanelRoomEntitiesPage&& from) noexcept
      : NSPanelRoomEntitiesPage(nullptr, std::move(from)) {}
  inline NSPanelRoomEntitiesPage& operator=(const NSPanelRoomEntitiesPage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelRoomEntitiesPage& operator=(NSPanelRoomEntitiesPage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelRoomEntitiesPage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelRoomEntitiesPage* internal_default_instance() {
    return reinterpret_cast<const NSPanelRoomEntitiesPage*>(
        &_NSPanelRoomEntitiesPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(NSPanelRoomEntitiesPage& a, NSPanelRoomEntitiesPage& b) { a.Swap(&b); }
  inline void Swap(NSPanelRoomEntitiesPage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelRoomEntitiesPage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelRoomEntitiesPage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelRoomEntitiesPage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelRoomEntitiesPage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelRoomEntitiesPage& from) { NSPanelRoomEntitiesPage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelRoomEntitiesPage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelRoomEntitiesPage"; }

 protected:
  explicit NSPanelRoomEntitiesPage(::google::protobuf::Arena* arena);
  NSPanelRoomEntitiesPage(::google::protobuf::Arena* arena, const NSPanelRoomEntitiesPage& from);
  NSPanelRoomEntitiesPage(::google::protobuf::Arena* arena, NSPanelRoomEntitiesPage&& from) noexcept
      : NSPanelRoomEntitiesPage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using EntitySlot = NSPanelRoomEntitiesPage_EntitySlot;

  // accessors -------------------------------------------------------
  enum : int {
    kEntitiesFieldNumber = 4,
    kHeaderTextFieldNumber = 3,
    kIdFieldNumber = 1,
    kPageTypeFieldNumber = 2,
  };
  // repeated .NSPanelRoomEntitiesPage.EntitySlot entities = 4;
  int entities_size() const;
  private:
  int _internal_entities_size() const;

  public:
  void clear_entities() ;
  ::NSPanelRoomEntitiesPage_EntitySlot* mutable_entities(int index);
  ::google::protobuf::RepeatedPtrField<::NSPanelRoomEntitiesPage_EntitySlot>* mutable_entities();

  private:
  const ::google::protobuf::RepeatedPtrField<::NSPanelRoomEntitiesPage_EntitySlot>& _internal_entities() const;
  ::google::protobuf::RepeatedPtrField<::NSPanelRoomEntitiesPage_EntitySlot>* _internal_mutable_entities();
  public:
  const ::NSPanelRoomEntitiesPage_EntitySlot& entities(int index) const;
  ::NSPanelRoomEntitiesPage_EntitySlot* add_entities();
  const ::google::protobuf::RepeatedPtrField<::NSPanelRoomEntitiesPage_EntitySlot>& entities() const;
  // string header_text = 3;
  void clear_header_text() ;
  const std::string& header_text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_header_text(Arg_&& arg, Args_... args);
  std::string* mutable_header_text();
  PROTOBUF_NODISCARD std::string* release_header_text();
  void set_allocated_header_text(std::string* value);

  private:
  const std::string& _internal_header_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header_text(
      const std::string& value);
  std::string* _internal_mutable_header_text();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 page_type = 2;
  void clear_page_type() ;
  ::int32_t page_type() const;
  void set_page_type(::int32_t value);

  private:
  ::int32_t _internal_page_type() const;
  void _internal_set_page_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelRoomEntitiesPage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelRoomEntitiesPage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelRoomEntitiesPage& from_msg);
    ::google::protobuf::RepeatedPtrField< ::NSPanelRoomEntitiesPage_EntitySlot > entities_;
    ::google::protobuf::internal::ArenaStringPtr header_text_;
    ::int32_t id_;
    ::int32_t page_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelMQTTManagerCommand final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelMQTTManagerCommand) */ {
 public:
  inline NSPanelMQTTManagerCommand() : NSPanelMQTTManagerCommand(nullptr) {}
  ~NSPanelMQTTManagerCommand() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelMQTTManagerCommand(const NSPanelMQTTManagerCommand& from) : NSPanelMQTTManagerCommand(nullptr, from) {}
  inline NSPanelMQTTManagerCommand(NSPanelMQTTManagerCommand&& from) noexcept
      : NSPanelMQTTManagerCommand(nullptr, std::move(from)) {}
  inline NSPanelMQTTManagerCommand& operator=(const NSPanelMQTTManagerCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelMQTTManagerCommand& operator=(NSPanelMQTTManagerCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelMQTTManagerCommand& default_instance() {
    return *internal_default_instance();
  }
  enum CommandDataCase {
    kFirstPageTurnOn = 1,
    kFirstPageTurnOff = 2,
    kLightCommand = 3,
    kToggleEntityFromEntitiesPage = 4,
    kSaveSceneCommand = 5,
    kButtonPressed = 6,
    COMMANDDATA_NOT_SET = 0,
  };
  static inline const NSPanelMQTTManagerCommand* internal_default_instance() {
    return reinterpret_cast<const NSPanelMQTTManagerCommand*>(
        &_NSPanelMQTTManagerCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(NSPanelMQTTManagerCommand& a, NSPanelMQTTManagerCommand& b) { a.Swap(&b); }
  inline void Swap(NSPanelMQTTManagerCommand* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelMQTTManagerCommand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelMQTTManagerCommand* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelMQTTManagerCommand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelMQTTManagerCommand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelMQTTManagerCommand& from) { NSPanelMQTTManagerCommand::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelMQTTManagerCommand* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelMQTTManagerCommand"; }

 protected:
  explicit NSPanelMQTTManagerCommand(::google::protobuf::Arena* arena);
  NSPanelMQTTManagerCommand(::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand& from);
  NSPanelMQTTManagerCommand(::google::protobuf::Arena* arena, NSPanelMQTTManagerCommand&& from) noexcept
      : NSPanelMQTTManagerCommand(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using FirstPageTurnLightOn = NSPanelMQTTManagerCommand_FirstPageTurnLightOn;
  using FirstPageTurnLightOff = NSPanelMQTTManagerCommand_FirstPageTurnLightOff;
  using LightCommand = NSPanelMQTTManagerCommand_LightCommand;
  using ToggleEntityFromEntitiesPage = NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage;
  using SaveSceneCommand = NSPanelMQTTManagerCommand_SaveSceneCommand;
  using ButtonPressed = NSPanelMQTTManagerCommand_ButtonPressed;
  using AffectLightsOptions = NSPanelMQTTManagerCommand_AffectLightsOptions;
  static constexpr AffectLightsOptions ALL = NSPanelMQTTManagerCommand_AffectLightsOptions_ALL;
  static constexpr AffectLightsOptions TABLE_LIGHTS = NSPanelMQTTManagerCommand_AffectLightsOptions_TABLE_LIGHTS;
  static constexpr AffectLightsOptions CEILING_LIGHTS = NSPanelMQTTManagerCommand_AffectLightsOptions_CEILING_LIGHTS;
  static inline bool AffectLightsOptions_IsValid(int value) {
    return NSPanelMQTTManagerCommand_AffectLightsOptions_IsValid(value);
  }
  static constexpr AffectLightsOptions AffectLightsOptions_MIN = NSPanelMQTTManagerCommand_AffectLightsOptions_AffectLightsOptions_MIN;
  static constexpr AffectLightsOptions AffectLightsOptions_MAX = NSPanelMQTTManagerCommand_AffectLightsOptions_AffectLightsOptions_MAX;
  static constexpr int AffectLightsOptions_ARRAYSIZE = NSPanelMQTTManagerCommand_AffectLightsOptions_AffectLightsOptions_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* AffectLightsOptions_descriptor() {
    return NSPanelMQTTManagerCommand_AffectLightsOptions_descriptor();
  }
  template <typename T>
  static inline const std::string& AffectLightsOptions_Name(T value) {
    return NSPanelMQTTManagerCommand_AffectLightsOptions_Name(value);
  }
  static inline bool AffectLightsOptions_Parse(absl::string_view name, AffectLightsOptions* value) {
    return NSPanelMQTTManagerCommand_AffectLightsOptions_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kFirstPageTurnOnFieldNumber = 1,
    kFirstPageTurnOffFieldNumber = 2,
    kLightCommandFieldNumber = 3,
    kToggleEntityFromEntitiesPageFieldNumber = 4,
    kSaveSceneCommandFieldNumber = 5,
    kButtonPressedFieldNumber = 6,
  };
  // .NSPanelMQTTManagerCommand.FirstPageTurnLightOn first_page_turn_on = 1;
  bool has_first_page_turn_on() const;
  private:
  bool _internal_has_first_page_turn_on() const;

  public:
  void clear_first_page_turn_on() ;
  const ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn& first_page_turn_on() const;
  PROTOBUF_NODISCARD ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* release_first_page_turn_on();
  ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* mutable_first_page_turn_on();
  void set_allocated_first_page_turn_on(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* value);
  void unsafe_arena_set_allocated_first_page_turn_on(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* value);
  ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* unsafe_arena_release_first_page_turn_on();

  private:
  const ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn& _internal_first_page_turn_on() const;
  ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* _internal_mutable_first_page_turn_on();

  public:
  // .NSPanelMQTTManagerCommand.FirstPageTurnLightOff first_page_turn_off = 2;
  bool has_first_page_turn_off() const;
  private:
  bool _internal_has_first_page_turn_off() const;

  public:
  void clear_first_page_turn_off() ;
  const ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff& first_page_turn_off() const;
  PROTOBUF_NODISCARD ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* release_first_page_turn_off();
  ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* mutable_first_page_turn_off();
  void set_allocated_first_page_turn_off(::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* value);
  void unsafe_arena_set_allocated_first_page_turn_off(::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* value);
  ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* unsafe_arena_release_first_page_turn_off();

  private:
  const ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff& _internal_first_page_turn_off() const;
  ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* _internal_mutable_first_page_turn_off();

  public:
  // .NSPanelMQTTManagerCommand.LightCommand light_command = 3;
  bool has_light_command() const;
  private:
  bool _internal_has_light_command() const;

  public:
  void clear_light_command() ;
  const ::NSPanelMQTTManagerCommand_LightCommand& light_command() const;
  PROTOBUF_NODISCARD ::NSPanelMQTTManagerCommand_LightCommand* release_light_command();
  ::NSPanelMQTTManagerCommand_LightCommand* mutable_light_command();
  void set_allocated_light_command(::NSPanelMQTTManagerCommand_LightCommand* value);
  void unsafe_arena_set_allocated_light_command(::NSPanelMQTTManagerCommand_LightCommand* value);
  ::NSPanelMQTTManagerCommand_LightCommand* unsafe_arena_release_light_command();

  private:
  const ::NSPanelMQTTManagerCommand_LightCommand& _internal_light_command() const;
  ::NSPanelMQTTManagerCommand_LightCommand* _internal_mutable_light_command();

  public:
  // .NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage toggle_entity_from_entities_page = 4;
  bool has_toggle_entity_from_entities_page() const;
  private:
  bool _internal_has_toggle_entity_from_entities_page() const;

  public:
  void clear_toggle_entity_from_entities_page() ;
  const ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& toggle_entity_from_entities_page() const;
  PROTOBUF_NODISCARD ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* release_toggle_entity_from_entities_page();
  ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* mutable_toggle_entity_from_entities_page();
  void set_allocated_toggle_entity_from_entities_page(::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* value);
  void unsafe_arena_set_allocated_toggle_entity_from_entities_page(::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* value);
  ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* unsafe_arena_release_toggle_entity_from_entities_page();

  private:
  const ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& _internal_toggle_entity_from_entities_page() const;
  ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* _internal_mutable_toggle_entity_from_entities_page();

  public:
  // .NSPanelMQTTManagerCommand.SaveSceneCommand save_scene_command = 5;
  bool has_save_scene_command() const;
  private:
  bool _internal_has_save_scene_command() const;

  public:
  void clear_save_scene_command() ;
  const ::NSPanelMQTTManagerCommand_SaveSceneCommand& save_scene_command() const;
  PROTOBUF_NODISCARD ::NSPanelMQTTManagerCommand_SaveSceneCommand* release_save_scene_command();
  ::NSPanelMQTTManagerCommand_SaveSceneCommand* mutable_save_scene_command();
  void set_allocated_save_scene_command(::NSPanelMQTTManagerCommand_SaveSceneCommand* value);
  void unsafe_arena_set_allocated_save_scene_command(::NSPanelMQTTManagerCommand_SaveSceneCommand* value);
  ::NSPanelMQTTManagerCommand_SaveSceneCommand* unsafe_arena_release_save_scene_command();

  private:
  const ::NSPanelMQTTManagerCommand_SaveSceneCommand& _internal_save_scene_command() const;
  ::NSPanelMQTTManagerCommand_SaveSceneCommand* _internal_mutable_save_scene_command();

  public:
  // .NSPanelMQTTManagerCommand.ButtonPressed button_pressed = 6;
  bool has_button_pressed() const;
  private:
  bool _internal_has_button_pressed() const;

  public:
  void clear_button_pressed() ;
  const ::NSPanelMQTTManagerCommand_ButtonPressed& button_pressed() const;
  PROTOBUF_NODISCARD ::NSPanelMQTTManagerCommand_ButtonPressed* release_button_pressed();
  ::NSPanelMQTTManagerCommand_ButtonPressed* mutable_button_pressed();
  void set_allocated_button_pressed(::NSPanelMQTTManagerCommand_ButtonPressed* value);
  void unsafe_arena_set_allocated_button_pressed(::NSPanelMQTTManagerCommand_ButtonPressed* value);
  ::NSPanelMQTTManagerCommand_ButtonPressed* unsafe_arena_release_button_pressed();

  private:
  const ::NSPanelMQTTManagerCommand_ButtonPressed& _internal_button_pressed() const;
  ::NSPanelMQTTManagerCommand_ButtonPressed* _internal_mutable_button_pressed();

  public:
  void clear_CommandData();
  CommandDataCase CommandData_case() const;
  // @@protoc_insertion_point(class_scope:NSPanelMQTTManagerCommand)
 private:
  class _Internal;
  void set_has_first_page_turn_on();
  void set_has_first_page_turn_off();
  void set_has_light_command();
  void set_has_toggle_entity_from_entities_page();
  void set_has_save_scene_command();
  void set_has_button_pressed();
  inline bool has_CommandData() const;
  inline void clear_has_CommandData();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 6, 6,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelMQTTManagerCommand_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelMQTTManagerCommand& from_msg);
    union CommandDataUnion {
      constexpr CommandDataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* first_page_turn_on_;
      ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* first_page_turn_off_;
      ::NSPanelMQTTManagerCommand_LightCommand* light_command_;
      ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* toggle_entity_from_entities_page_;
      ::NSPanelMQTTManagerCommand_SaveSceneCommand* save_scene_command_;
      ::NSPanelMQTTManagerCommand_ButtonPressed* button_pressed_;
    } CommandData_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelConfig) */ {
 public:
  inline NSPanelConfig() : NSPanelConfig(nullptr) {}
  ~NSPanelConfig() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelConfig(const NSPanelConfig& from) : NSPanelConfig(nullptr, from) {}
  inline NSPanelConfig(NSPanelConfig&& from) noexcept
      : NSPanelConfig(nullptr, std::move(from)) {}
  inline NSPanelConfig& operator=(const NSPanelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelConfig& operator=(NSPanelConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelConfig* internal_default_instance() {
    return reinterpret_cast<const NSPanelConfig*>(
        &_NSPanelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NSPanelConfig& a, NSPanelConfig& b) { a.Swap(&b); }
  inline void Swap(NSPanelConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelConfig& from) { NSPanelConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelConfig"; }

 protected:
  explicit NSPanelConfig(::google::protobuf::Arena* arena);
  NSPanelConfig(::google::protobuf::Arena* arena, const NSPanelConfig& from);
  NSPanelConfig(::google::protobuf::Arena* arena, NSPanelConfig&& from) noexcept
      : NSPanelConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using RoomInfo = NSPanelConfig_RoomInfo;
  using NSPanelDefaultPage = NSPanelConfig_NSPanelDefaultPage;
  static constexpr NSPanelDefaultPage HOME = NSPanelConfig_NSPanelDefaultPage_HOME;
  static constexpr NSPanelDefaultPage SCENES = NSPanelConfig_NSPanelDefaultPage_SCENES;
  static constexpr NSPanelDefaultPage ENTITIES = NSPanelConfig_NSPanelDefaultPage_ENTITIES;
  static inline bool NSPanelDefaultPage_IsValid(int value) {
    return NSPanelConfig_NSPanelDefaultPage_IsValid(value);
  }
  static constexpr NSPanelDefaultPage NSPanelDefaultPage_MIN = NSPanelConfig_NSPanelDefaultPage_NSPanelDefaultPage_MIN;
  static constexpr NSPanelDefaultPage NSPanelDefaultPage_MAX = NSPanelConfig_NSPanelDefaultPage_NSPanelDefaultPage_MAX;
  static constexpr int NSPanelDefaultPage_ARRAYSIZE = NSPanelConfig_NSPanelDefaultPage_NSPanelDefaultPage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NSPanelDefaultPage_descriptor() {
    return NSPanelConfig_NSPanelDefaultPage_descriptor();
  }
  template <typename T>
  static inline const std::string& NSPanelDefaultPage_Name(T value) {
    return NSPanelConfig_NSPanelDefaultPage_Name(value);
  }
  static inline bool NSPanelDefaultPage_Parse(absl::string_view name, NSPanelDefaultPage* value) {
    return NSPanelConfig_NSPanelDefaultPage_Parse(name, value);
  }
  using NSPanelScreensaverMode = NSPanelConfig_NSPanelScreensaverMode;
  static constexpr NSPanelScreensaverMode WEATHER_WITH_BACKGROUND = NSPanelConfig_NSPanelScreensaverMode_WEATHER_WITH_BACKGROUND;
  static constexpr NSPanelScreensaverMode WEATHER_WITHOUT_BACKGROUND = NSPanelConfig_NSPanelScreensaverMode_WEATHER_WITHOUT_BACKGROUND;
  static constexpr NSPanelScreensaverMode DATETIME_WITH_BACKGROUND = NSPanelConfig_NSPanelScreensaverMode_DATETIME_WITH_BACKGROUND;
  static constexpr NSPanelScreensaverMode DATETIME_WITHOUT_BACKGROUND = NSPanelConfig_NSPanelScreensaverMode_DATETIME_WITHOUT_BACKGROUND;
  static constexpr NSPanelScreensaverMode NO_SCREENSAVER = NSPanelConfig_NSPanelScreensaverMode_NO_SCREENSAVER;
  static inline bool NSPanelScreensaverMode_IsValid(int value) {
    return NSPanelConfig_NSPanelScreensaverMode_IsValid(value);
  }
  static constexpr NSPanelScreensaverMode NSPanelScreensaverMode_MIN = NSPanelConfig_NSPanelScreensaverMode_NSPanelScreensaverMode_MIN;
  static constexpr NSPanelScreensaverMode NSPanelScreensaverMode_MAX = NSPanelConfig_NSPanelScreensaverMode_NSPanelScreensaverMode_MAX;
  static constexpr int NSPanelScreensaverMode_ARRAYSIZE = NSPanelConfig_NSPanelScreensaverMode_NSPanelScreensaverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NSPanelScreensaverMode_descriptor() {
    return NSPanelConfig_NSPanelScreensaverMode_descriptor();
  }
  template <typename T>
  static inline const std::string& NSPanelScreensaverMode_Name(T value) {
    return NSPanelConfig_NSPanelScreensaverMode_Name(value);
  }
  static inline bool NSPanelScreensaverMode_Parse(absl::string_view name, NSPanelScreensaverMode* value) {
    return NSPanelConfig_NSPanelScreensaverMode_Parse(name, value);
  }
  using NSPanelButtonMode = NSPanelConfig_NSPanelButtonMode;
  static constexpr NSPanelButtonMode DIRECT = NSPanelConfig_NSPanelButtonMode_DIRECT;
  static constexpr NSPanelButtonMode FOLLOW = NSPanelConfig_NSPanelButtonMode_FOLLOW;
  static constexpr NSPanelButtonMode NOTIFY_MANAGER = NSPanelConfig_NSPanelButtonMode_NOTIFY_MANAGER;
  static inline bool NSPanelButtonMode_IsValid(int value) {
    return NSPanelConfig_NSPanelButtonMode_IsValid(value);
  }
  static constexpr NSPanelButtonMode NSPanelButtonMode_MIN = NSPanelConfig_NSPanelButtonMode_NSPanelButtonMode_MIN;
  static constexpr NSPanelButtonMode NSPanelButtonMode_MAX = NSPanelConfig_NSPanelButtonMode_NSPanelButtonMode_MAX;
  static constexpr int NSPanelButtonMode_ARRAYSIZE = NSPanelConfig_NSPanelButtonMode_NSPanelButtonMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NSPanelButtonMode_descriptor() {
    return NSPanelConfig_NSPanelButtonMode_descriptor();
  }
  template <typename T>
  static inline const std::string& NSPanelButtonMode_Name(T value) {
    return NSPanelConfig_NSPanelButtonMode_Name(value);
  }
  static inline bool NSPanelButtonMode_Parse(absl::string_view name, NSPanelButtonMode* value) {
    return NSPanelConfig_NSPanelButtonMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kRoomInfosFieldNumber = 17,
    kGlobalSceneEntityPageIdsFieldNumber = 30,
    kRelay1RelayGroupFieldNumber = 35,
    kRelay2RelayGroupFieldNumber = 37,
    kNameFieldNumber = 1,
    kDefaultRoomFieldNumber = 2,
    kDefaultPageFieldNumber = 3,
    kScreensaverActivationTimeoutFieldNumber = 4,
    kMinButtonPushTimeFieldNumber = 5,
    kButtonLongPressTimeFieldNumber = 6,
    kSpecialModeTriggerTimeFieldNumber = 7,
    kSpecialModeReleaseTimeFieldNumber = 8,
    kScreenDimLevelFieldNumber = 9,
    kScreensaverDimLevelFieldNumber = 10,
    kScreensaverModeFieldNumber = 11,
    kShowScreensaverInsideTemperatureFieldNumber = 12,
    kShowScreensaverOutsideTemperatureFieldNumber = 13,
    kClockUsStyleFieldNumber = 14,
    kUseFahrenheitFieldNumber = 15,
    kIsUsPanelFieldNumber = 16,
    kReverseRelaysFieldNumber = 18,
    kRelay1DefaultModeFieldNumber = 19,
    kRelay2DefaultModeFieldNumber = 20,
    kTemperatureCalibrationFieldNumber = 21,
    kButton1ModeFieldNumber = 22,
    kButton2ModeFieldNumber = 25,
    kRaiseLightLevelTo100AboveFieldNumber = 32,
    kNspanelIdFieldNumber = 33,
    kOptimisticModeFieldNumber = 31,
    kLockedToDefaultRoomFieldNumber = 39,
    kDefaultLightBrightessFieldNumber = 38,
  };
  // repeated .NSPanelConfig.RoomInfo room_infos = 17;
  int room_infos_size() const;
  private:
  int _internal_room_infos_size() const;

  public:
  void clear_room_infos() ;
  ::NSPanelConfig_RoomInfo* mutable_room_infos(int index);
  ::google::protobuf::RepeatedPtrField<::NSPanelConfig_RoomInfo>* mutable_room_infos();

  private:
  const ::google::protobuf::RepeatedPtrField<::NSPanelConfig_RoomInfo>& _internal_room_infos() const;
  ::google::protobuf::RepeatedPtrField<::NSPanelConfig_RoomInfo>* _internal_mutable_room_infos();
  public:
  const ::NSPanelConfig_RoomInfo& room_infos(int index) const;
  ::NSPanelConfig_RoomInfo* add_room_infos();
  const ::google::protobuf::RepeatedPtrField<::NSPanelConfig_RoomInfo>& room_infos() const;
  // repeated int32 global_scene_entity_page_ids = 30;
  int global_scene_entity_page_ids_size() const;
  private:
  int _internal_global_scene_entity_page_ids_size() const;

  public:
  void clear_global_scene_entity_page_ids() ;
  ::int32_t global_scene_entity_page_ids(int index) const;
  void set_global_scene_entity_page_ids(int index, ::int32_t value);
  void add_global_scene_entity_page_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& global_scene_entity_page_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_global_scene_entity_page_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_global_scene_entity_page_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_global_scene_entity_page_ids();

  public:
  // repeated int32 relay1_relay_group = 35;
  int relay1_relay_group_size() const;
  private:
  int _internal_relay1_relay_group_size() const;

  public:
  void clear_relay1_relay_group() ;
  ::int32_t relay1_relay_group(int index) const;
  void set_relay1_relay_group(int index, ::int32_t value);
  void add_relay1_relay_group(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& relay1_relay_group() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_relay1_relay_group();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_relay1_relay_group() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_relay1_relay_group();

  public:
  // repeated int32 relay2_relay_group = 37;
  int relay2_relay_group_size() const;
  private:
  int _internal_relay2_relay_group_size() const;

  public:
  void clear_relay2_relay_group() ;
  ::int32_t relay2_relay_group(int index) const;
  void set_relay2_relay_group(int index, ::int32_t value);
  void add_relay2_relay_group(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& relay2_relay_group() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_relay2_relay_group();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_relay2_relay_group() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_relay2_relay_group();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 default_room = 2;
  void clear_default_room() ;
  ::int32_t default_room() const;
  void set_default_room(::int32_t value);

  private:
  ::int32_t _internal_default_room() const;
  void _internal_set_default_room(::int32_t value);

  public:
  // .NSPanelConfig.NSPanelDefaultPage default_page = 3;
  void clear_default_page() ;
  ::NSPanelConfig_NSPanelDefaultPage default_page() const;
  void set_default_page(::NSPanelConfig_NSPanelDefaultPage value);

  private:
  ::NSPanelConfig_NSPanelDefaultPage _internal_default_page() const;
  void _internal_set_default_page(::NSPanelConfig_NSPanelDefaultPage value);

  public:
  // int32 screensaver_activation_timeout = 4;
  void clear_screensaver_activation_timeout() ;
  ::int32_t screensaver_activation_timeout() const;
  void set_screensaver_activation_timeout(::int32_t value);

  private:
  ::int32_t _internal_screensaver_activation_timeout() const;
  void _internal_set_screensaver_activation_timeout(::int32_t value);

  public:
  // int32 min_button_push_time = 5;
  void clear_min_button_push_time() ;
  ::int32_t min_button_push_time() const;
  void set_min_button_push_time(::int32_t value);

  private:
  ::int32_t _internal_min_button_push_time() const;
  void _internal_set_min_button_push_time(::int32_t value);

  public:
  // int32 button_long_press_time = 6;
  void clear_button_long_press_time() ;
  ::int32_t button_long_press_time() const;
  void set_button_long_press_time(::int32_t value);

  private:
  ::int32_t _internal_button_long_press_time() const;
  void _internal_set_button_long_press_time(::int32_t value);

  public:
  // int32 special_mode_trigger_time = 7;
  void clear_special_mode_trigger_time() ;
  ::int32_t special_mode_trigger_time() const;
  void set_special_mode_trigger_time(::int32_t value);

  private:
  ::int32_t _internal_special_mode_trigger_time() const;
  void _internal_set_special_mode_trigger_time(::int32_t value);

  public:
  // int32 special_mode_release_time = 8;
  void clear_special_mode_release_time() ;
  ::int32_t special_mode_release_time() const;
  void set_special_mode_release_time(::int32_t value);

  private:
  ::int32_t _internal_special_mode_release_time() const;
  void _internal_set_special_mode_release_time(::int32_t value);

  public:
  // int32 screen_dim_level = 9;
  void clear_screen_dim_level() ;
  ::int32_t screen_dim_level() const;
  void set_screen_dim_level(::int32_t value);

  private:
  ::int32_t _internal_screen_dim_level() const;
  void _internal_set_screen_dim_level(::int32_t value);

  public:
  // int32 screensaver_dim_level = 10;
  void clear_screensaver_dim_level() ;
  ::int32_t screensaver_dim_level() const;
  void set_screensaver_dim_level(::int32_t value);

  private:
  ::int32_t _internal_screensaver_dim_level() const;
  void _internal_set_screensaver_dim_level(::int32_t value);

  public:
  // .NSPanelConfig.NSPanelScreensaverMode screensaver_mode = 11;
  void clear_screensaver_mode() ;
  ::NSPanelConfig_NSPanelScreensaverMode screensaver_mode() const;
  void set_screensaver_mode(::NSPanelConfig_NSPanelScreensaverMode value);

  private:
  ::NSPanelConfig_NSPanelScreensaverMode _internal_screensaver_mode() const;
  void _internal_set_screensaver_mode(::NSPanelConfig_NSPanelScreensaverMode value);

  public:
  // bool show_screensaver_inside_temperature = 12;
  void clear_show_screensaver_inside_temperature() ;
  bool show_screensaver_inside_temperature() const;
  void set_show_screensaver_inside_temperature(bool value);

  private:
  bool _internal_show_screensaver_inside_temperature() const;
  void _internal_set_show_screensaver_inside_temperature(bool value);

  public:
  // bool show_screensaver_outside_temperature = 13;
  void clear_show_screensaver_outside_temperature() ;
  bool show_screensaver_outside_temperature() const;
  void set_show_screensaver_outside_temperature(bool value);

  private:
  bool _internal_show_screensaver_outside_temperature() const;
  void _internal_set_show_screensaver_outside_temperature(bool value);

  public:
  // bool clock_us_style = 14;
  void clear_clock_us_style() ;
  bool clock_us_style() const;
  void set_clock_us_style(bool value);

  private:
  bool _internal_clock_us_style() const;
  void _internal_set_clock_us_style(bool value);

  public:
  // bool use_fahrenheit = 15;
  void clear_use_fahrenheit() ;
  bool use_fahrenheit() const;
  void set_use_fahrenheit(bool value);

  private:
  bool _internal_use_fahrenheit() const;
  void _internal_set_use_fahrenheit(bool value);

  public:
  // bool is_us_panel = 16;
  void clear_is_us_panel() ;
  bool is_us_panel() const;
  void set_is_us_panel(bool value);

  private:
  bool _internal_is_us_panel() const;
  void _internal_set_is_us_panel(bool value);

  public:
  // bool reverse_relays = 18;
  void clear_reverse_relays() ;
  bool reverse_relays() const;
  void set_reverse_relays(bool value);

  private:
  bool _internal_reverse_relays() const;
  void _internal_set_reverse_relays(bool value);

  public:
  // bool relay1_default_mode = 19;
  void clear_relay1_default_mode() ;
  bool relay1_default_mode() const;
  void set_relay1_default_mode(bool value);

  private:
  bool _internal_relay1_default_mode() const;
  void _internal_set_relay1_default_mode(bool value);

  public:
  // bool relay2_default_mode = 20;
  void clear_relay2_default_mode() ;
  bool relay2_default_mode() const;
  void set_relay2_default_mode(bool value);

  private:
  bool _internal_relay2_default_mode() const;
  void _internal_set_relay2_default_mode(bool value);

  public:
  // int32 temperature_calibration = 21;
  void clear_temperature_calibration() ;
  ::int32_t temperature_calibration() const;
  void set_temperature_calibration(::int32_t value);

  private:
  ::int32_t _internal_temperature_calibration() const;
  void _internal_set_temperature_calibration(::int32_t value);

  public:
  // .NSPanelConfig.NSPanelButtonMode button1_mode = 22;
  void clear_button1_mode() ;
  ::NSPanelConfig_NSPanelButtonMode button1_mode() const;
  void set_button1_mode(::NSPanelConfig_NSPanelButtonMode value);

  private:
  ::NSPanelConfig_NSPanelButtonMode _internal_button1_mode() const;
  void _internal_set_button1_mode(::NSPanelConfig_NSPanelButtonMode value);

  public:
  // .NSPanelConfig.NSPanelButtonMode button2_mode = 25;
  void clear_button2_mode() ;
  ::NSPanelConfig_NSPanelButtonMode button2_mode() const;
  void set_button2_mode(::NSPanelConfig_NSPanelButtonMode value);

  private:
  ::NSPanelConfig_NSPanelButtonMode _internal_button2_mode() const;
  void _internal_set_button2_mode(::NSPanelConfig_NSPanelButtonMode value);

  public:
  // int32 raise_light_level_to_100_above = 32;
  void clear_raise_light_level_to_100_above() ;
  ::int32_t raise_light_level_to_100_above() const;
  void set_raise_light_level_to_100_above(::int32_t value);

  private:
  ::int32_t _internal_raise_light_level_to_100_above() const;
  void _internal_set_raise_light_level_to_100_above(::int32_t value);

  public:
  // int32 nspanel_id = 33;
  void clear_nspanel_id() ;
  ::int32_t nspanel_id() const;
  void set_nspanel_id(::int32_t value);

  private:
  ::int32_t _internal_nspanel_id() const;
  void _internal_set_nspanel_id(::int32_t value);

  public:
  // bool optimistic_mode = 31;
  void clear_optimistic_mode() ;
  bool optimistic_mode() const;
  void set_optimistic_mode(bool value);

  private:
  bool _internal_optimistic_mode() const;
  void _internal_set_optimistic_mode(bool value);

  public:
  // bool locked_to_default_room = 39;
  void clear_locked_to_default_room() ;
  bool locked_to_default_room() const;
  void set_locked_to_default_room(bool value);

  private:
  bool _internal_locked_to_default_room() const;
  void _internal_set_locked_to_default_room(bool value);

  public:
  // int32 default_light_brightess = 38;
  void clear_default_light_brightess() ;
  ::int32_t default_light_brightess() const;
  void set_default_light_brightess(::int32_t value);

  private:
  ::int32_t _internal_default_light_brightess() const;
  void _internal_set_default_light_brightess(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 31, 1,
      50, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelConfig_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelConfig& from_msg);
    ::google::protobuf::RepeatedPtrField< ::NSPanelConfig_RoomInfo > room_infos_;
    ::google::protobuf::RepeatedField<::int32_t> global_scene_entity_page_ids_;
    mutable ::google::protobuf::internal::CachedSize _global_scene_entity_page_ids_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> relay1_relay_group_;
    mutable ::google::protobuf::internal::CachedSize _relay1_relay_group_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> relay2_relay_group_;
    mutable ::google::protobuf::internal::CachedSize _relay2_relay_group_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t default_room_;
    int default_page_;
    ::int32_t screensaver_activation_timeout_;
    ::int32_t min_button_push_time_;
    ::int32_t button_long_press_time_;
    ::int32_t special_mode_trigger_time_;
    ::int32_t special_mode_release_time_;
    ::int32_t screen_dim_level_;
    ::int32_t screensaver_dim_level_;
    int screensaver_mode_;
    bool show_screensaver_inside_temperature_;
    bool show_screensaver_outside_temperature_;
    bool clock_us_style_;
    bool use_fahrenheit_;
    bool is_us_panel_;
    bool reverse_relays_;
    bool relay1_default_mode_;
    bool relay2_default_mode_;
    ::int32_t temperature_calibration_;
    int button1_mode_;
    int button2_mode_;
    ::int32_t raise_light_level_to_100_above_;
    ::int32_t nspanel_id_;
    bool optimistic_mode_;
    bool locked_to_default_room_;
    ::int32_t default_light_brightess_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NSPanelConfig_RoomInfo

// int32 room_id = 1;
inline void NSPanelConfig_RoomInfo::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t NSPanelConfig_RoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.RoomInfo.room_id)
  return _internal_room_id();
}
inline void NSPanelConfig_RoomInfo::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.RoomInfo.room_id)
}
inline ::int32_t NSPanelConfig_RoomInfo::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void NSPanelConfig_RoomInfo::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// repeated int32 entity_page_ids = 2;
inline int NSPanelConfig_RoomInfo::_internal_entity_page_ids_size() const {
  return _internal_entity_page_ids().size();
}
inline int NSPanelConfig_RoomInfo::entity_page_ids_size() const {
  return _internal_entity_page_ids_size();
}
inline void NSPanelConfig_RoomInfo::clear_entity_page_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_page_ids_.Clear();
}
inline ::int32_t NSPanelConfig_RoomInfo::entity_page_ids(int index) const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.RoomInfo.entity_page_ids)
  return _internal_entity_page_ids().Get(index);
}
inline void NSPanelConfig_RoomInfo::set_entity_page_ids(int index, ::int32_t value) {
  _internal_mutable_entity_page_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.RoomInfo.entity_page_ids)
}
inline void NSPanelConfig_RoomInfo::add_entity_page_ids(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_entity_page_ids()->Add(value);
  // @@protoc_insertion_point(field_add:NSPanelConfig.RoomInfo.entity_page_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NSPanelConfig_RoomInfo::entity_page_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelConfig.RoomInfo.entity_page_ids)
  return _internal_entity_page_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig_RoomInfo::mutable_entity_page_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelConfig.RoomInfo.entity_page_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entity_page_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NSPanelConfig_RoomInfo::_internal_entity_page_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_page_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig_RoomInfo::_internal_mutable_entity_page_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entity_page_ids_;
}

// repeated int32 scene_page_ids = 3;
inline int NSPanelConfig_RoomInfo::_internal_scene_page_ids_size() const {
  return _internal_scene_page_ids().size();
}
inline int NSPanelConfig_RoomInfo::scene_page_ids_size() const {
  return _internal_scene_page_ids_size();
}
inline void NSPanelConfig_RoomInfo::clear_scene_page_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scene_page_ids_.Clear();
}
inline ::int32_t NSPanelConfig_RoomInfo::scene_page_ids(int index) const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.RoomInfo.scene_page_ids)
  return _internal_scene_page_ids().Get(index);
}
inline void NSPanelConfig_RoomInfo::set_scene_page_ids(int index, ::int32_t value) {
  _internal_mutable_scene_page_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.RoomInfo.scene_page_ids)
}
inline void NSPanelConfig_RoomInfo::add_scene_page_ids(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_scene_page_ids()->Add(value);
  // @@protoc_insertion_point(field_add:NSPanelConfig.RoomInfo.scene_page_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NSPanelConfig_RoomInfo::scene_page_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelConfig.RoomInfo.scene_page_ids)
  return _internal_scene_page_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig_RoomInfo::mutable_scene_page_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelConfig.RoomInfo.scene_page_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_scene_page_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NSPanelConfig_RoomInfo::_internal_scene_page_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scene_page_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig_RoomInfo::_internal_mutable_scene_page_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.scene_page_ids_;
}

// -------------------------------------------------------------------

// NSPanelConfig

// string name = 1;
inline void NSPanelConfig::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NSPanelConfig::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelConfig.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelConfig::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelConfig.name)
}
inline std::string* NSPanelConfig::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:NSPanelConfig.name)
  return _s;
}
inline const std::string& NSPanelConfig::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NSPanelConfig::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NSPanelConfig::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NSPanelConfig::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelConfig.name)
  return _impl_.name_.Release();
}
inline void NSPanelConfig::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelConfig.name)
}

// int32 default_room = 2;
inline void NSPanelConfig::clear_default_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_room_ = 0;
}
inline ::int32_t NSPanelConfig::default_room() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.default_room)
  return _internal_default_room();
}
inline void NSPanelConfig::set_default_room(::int32_t value) {
  _internal_set_default_room(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.default_room)
}
inline ::int32_t NSPanelConfig::_internal_default_room() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default_room_;
}
inline void NSPanelConfig::_internal_set_default_room(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_room_ = value;
}

// .NSPanelConfig.NSPanelDefaultPage default_page = 3;
inline void NSPanelConfig::clear_default_page() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_page_ = 0;
}
inline ::NSPanelConfig_NSPanelDefaultPage NSPanelConfig::default_page() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.default_page)
  return _internal_default_page();
}
inline void NSPanelConfig::set_default_page(::NSPanelConfig_NSPanelDefaultPage value) {
  _internal_set_default_page(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.default_page)
}
inline ::NSPanelConfig_NSPanelDefaultPage NSPanelConfig::_internal_default_page() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelConfig_NSPanelDefaultPage>(_impl_.default_page_);
}
inline void NSPanelConfig::_internal_set_default_page(::NSPanelConfig_NSPanelDefaultPage value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_page_ = value;
}

// int32 screensaver_activation_timeout = 4;
inline void NSPanelConfig::clear_screensaver_activation_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_activation_timeout_ = 0;
}
inline ::int32_t NSPanelConfig::screensaver_activation_timeout() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.screensaver_activation_timeout)
  return _internal_screensaver_activation_timeout();
}
inline void NSPanelConfig::set_screensaver_activation_timeout(::int32_t value) {
  _internal_set_screensaver_activation_timeout(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.screensaver_activation_timeout)
}
inline ::int32_t NSPanelConfig::_internal_screensaver_activation_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screensaver_activation_timeout_;
}
inline void NSPanelConfig::_internal_set_screensaver_activation_timeout(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_activation_timeout_ = value;
}

// int32 min_button_push_time = 5;
inline void NSPanelConfig::clear_min_button_push_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_button_push_time_ = 0;
}
inline ::int32_t NSPanelConfig::min_button_push_time() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.min_button_push_time)
  return _internal_min_button_push_time();
}
inline void NSPanelConfig::set_min_button_push_time(::int32_t value) {
  _internal_set_min_button_push_time(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.min_button_push_time)
}
inline ::int32_t NSPanelConfig::_internal_min_button_push_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_button_push_time_;
}
inline void NSPanelConfig::_internal_set_min_button_push_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_button_push_time_ = value;
}

// int32 button_long_press_time = 6;
inline void NSPanelConfig::clear_button_long_press_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_long_press_time_ = 0;
}
inline ::int32_t NSPanelConfig::button_long_press_time() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.button_long_press_time)
  return _internal_button_long_press_time();
}
inline void NSPanelConfig::set_button_long_press_time(::int32_t value) {
  _internal_set_button_long_press_time(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.button_long_press_time)
}
inline ::int32_t NSPanelConfig::_internal_button_long_press_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button_long_press_time_;
}
inline void NSPanelConfig::_internal_set_button_long_press_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_long_press_time_ = value;
}

// int32 special_mode_trigger_time = 7;
inline void NSPanelConfig::clear_special_mode_trigger_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.special_mode_trigger_time_ = 0;
}
inline ::int32_t NSPanelConfig::special_mode_trigger_time() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.special_mode_trigger_time)
  return _internal_special_mode_trigger_time();
}
inline void NSPanelConfig::set_special_mode_trigger_time(::int32_t value) {
  _internal_set_special_mode_trigger_time(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.special_mode_trigger_time)
}
inline ::int32_t NSPanelConfig::_internal_special_mode_trigger_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.special_mode_trigger_time_;
}
inline void NSPanelConfig::_internal_set_special_mode_trigger_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.special_mode_trigger_time_ = value;
}

// int32 special_mode_release_time = 8;
inline void NSPanelConfig::clear_special_mode_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.special_mode_release_time_ = 0;
}
inline ::int32_t NSPanelConfig::special_mode_release_time() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.special_mode_release_time)
  return _internal_special_mode_release_time();
}
inline void NSPanelConfig::set_special_mode_release_time(::int32_t value) {
  _internal_set_special_mode_release_time(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.special_mode_release_time)
}
inline ::int32_t NSPanelConfig::_internal_special_mode_release_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.special_mode_release_time_;
}
inline void NSPanelConfig::_internal_set_special_mode_release_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.special_mode_release_time_ = value;
}

// int32 screen_dim_level = 9;
inline void NSPanelConfig::clear_screen_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_dim_level_ = 0;
}
inline ::int32_t NSPanelConfig::screen_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.screen_dim_level)
  return _internal_screen_dim_level();
}
inline void NSPanelConfig::set_screen_dim_level(::int32_t value) {
  _internal_set_screen_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.screen_dim_level)
}
inline ::int32_t NSPanelConfig::_internal_screen_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screen_dim_level_;
}
inline void NSPanelConfig::_internal_set_screen_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_dim_level_ = value;
}

// int32 screensaver_dim_level = 10;
inline void NSPanelConfig::clear_screensaver_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_dim_level_ = 0;
}
inline ::int32_t NSPanelConfig::screensaver_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.screensaver_dim_level)
  return _internal_screensaver_dim_level();
}
inline void NSPanelConfig::set_screensaver_dim_level(::int32_t value) {
  _internal_set_screensaver_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.screensaver_dim_level)
}
inline ::int32_t NSPanelConfig::_internal_screensaver_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screensaver_dim_level_;
}
inline void NSPanelConfig::_internal_set_screensaver_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_dim_level_ = value;
}

// .NSPanelConfig.NSPanelScreensaverMode screensaver_mode = 11;
inline void NSPanelConfig::clear_screensaver_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_mode_ = 0;
}
inline ::NSPanelConfig_NSPanelScreensaverMode NSPanelConfig::screensaver_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.screensaver_mode)
  return _internal_screensaver_mode();
}
inline void NSPanelConfig::set_screensaver_mode(::NSPanelConfig_NSPanelScreensaverMode value) {
  _internal_set_screensaver_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.screensaver_mode)
}
inline ::NSPanelConfig_NSPanelScreensaverMode NSPanelConfig::_internal_screensaver_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelConfig_NSPanelScreensaverMode>(_impl_.screensaver_mode_);
}
inline void NSPanelConfig::_internal_set_screensaver_mode(::NSPanelConfig_NSPanelScreensaverMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_mode_ = value;
}

// bool show_screensaver_inside_temperature = 12;
inline void NSPanelConfig::clear_show_screensaver_inside_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_screensaver_inside_temperature_ = false;
}
inline bool NSPanelConfig::show_screensaver_inside_temperature() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.show_screensaver_inside_temperature)
  return _internal_show_screensaver_inside_temperature();
}
inline void NSPanelConfig::set_show_screensaver_inside_temperature(bool value) {
  _internal_set_show_screensaver_inside_temperature(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.show_screensaver_inside_temperature)
}
inline bool NSPanelConfig::_internal_show_screensaver_inside_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_screensaver_inside_temperature_;
}
inline void NSPanelConfig::_internal_set_show_screensaver_inside_temperature(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_screensaver_inside_temperature_ = value;
}

// bool show_screensaver_outside_temperature = 13;
inline void NSPanelConfig::clear_show_screensaver_outside_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_screensaver_outside_temperature_ = false;
}
inline bool NSPanelConfig::show_screensaver_outside_temperature() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.show_screensaver_outside_temperature)
  return _internal_show_screensaver_outside_temperature();
}
inline void NSPanelConfig::set_show_screensaver_outside_temperature(bool value) {
  _internal_set_show_screensaver_outside_temperature(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.show_screensaver_outside_temperature)
}
inline bool NSPanelConfig::_internal_show_screensaver_outside_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_screensaver_outside_temperature_;
}
inline void NSPanelConfig::_internal_set_show_screensaver_outside_temperature(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_screensaver_outside_temperature_ = value;
}

// bool clock_us_style = 14;
inline void NSPanelConfig::clear_clock_us_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_us_style_ = false;
}
inline bool NSPanelConfig::clock_us_style() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.clock_us_style)
  return _internal_clock_us_style();
}
inline void NSPanelConfig::set_clock_us_style(bool value) {
  _internal_set_clock_us_style(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.clock_us_style)
}
inline bool NSPanelConfig::_internal_clock_us_style() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clock_us_style_;
}
inline void NSPanelConfig::_internal_set_clock_us_style(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_us_style_ = value;
}

// bool use_fahrenheit = 15;
inline void NSPanelConfig::clear_use_fahrenheit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_fahrenheit_ = false;
}
inline bool NSPanelConfig::use_fahrenheit() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.use_fahrenheit)
  return _internal_use_fahrenheit();
}
inline void NSPanelConfig::set_use_fahrenheit(bool value) {
  _internal_set_use_fahrenheit(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.use_fahrenheit)
}
inline bool NSPanelConfig::_internal_use_fahrenheit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_fahrenheit_;
}
inline void NSPanelConfig::_internal_set_use_fahrenheit(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_fahrenheit_ = value;
}

// bool is_us_panel = 16;
inline void NSPanelConfig::clear_is_us_panel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_us_panel_ = false;
}
inline bool NSPanelConfig::is_us_panel() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.is_us_panel)
  return _internal_is_us_panel();
}
inline void NSPanelConfig::set_is_us_panel(bool value) {
  _internal_set_is_us_panel(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.is_us_panel)
}
inline bool NSPanelConfig::_internal_is_us_panel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_us_panel_;
}
inline void NSPanelConfig::_internal_set_is_us_panel(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_us_panel_ = value;
}

// repeated .NSPanelConfig.RoomInfo room_infos = 17;
inline int NSPanelConfig::_internal_room_infos_size() const {
  return _internal_room_infos().size();
}
inline int NSPanelConfig::room_infos_size() const {
  return _internal_room_infos_size();
}
inline void NSPanelConfig::clear_room_infos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_infos_.Clear();
}
inline ::NSPanelConfig_RoomInfo* NSPanelConfig::mutable_room_infos(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NSPanelConfig.room_infos)
  return _internal_mutable_room_infos()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelConfig_RoomInfo>* NSPanelConfig::mutable_room_infos()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelConfig.room_infos)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_room_infos();
}
inline const ::NSPanelConfig_RoomInfo& NSPanelConfig::room_infos(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelConfig.room_infos)
  return _internal_room_infos().Get(index);
}
inline ::NSPanelConfig_RoomInfo* NSPanelConfig::add_room_infos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::NSPanelConfig_RoomInfo* _add = _internal_mutable_room_infos()->Add();
  // @@protoc_insertion_point(field_add:NSPanelConfig.room_infos)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelConfig_RoomInfo>& NSPanelConfig::room_infos() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelConfig.room_infos)
  return _internal_room_infos();
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelConfig_RoomInfo>&
NSPanelConfig::_internal_room_infos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_infos_;
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelConfig_RoomInfo>*
NSPanelConfig::_internal_mutable_room_infos() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.room_infos_;
}

// bool reverse_relays = 18;
inline void NSPanelConfig::clear_reverse_relays() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_relays_ = false;
}
inline bool NSPanelConfig::reverse_relays() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.reverse_relays)
  return _internal_reverse_relays();
}
inline void NSPanelConfig::set_reverse_relays(bool value) {
  _internal_set_reverse_relays(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.reverse_relays)
}
inline bool NSPanelConfig::_internal_reverse_relays() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reverse_relays_;
}
inline void NSPanelConfig::_internal_set_reverse_relays(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_relays_ = value;
}

// bool relay1_default_mode = 19;
inline void NSPanelConfig::clear_relay1_default_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay1_default_mode_ = false;
}
inline bool NSPanelConfig::relay1_default_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.relay1_default_mode)
  return _internal_relay1_default_mode();
}
inline void NSPanelConfig::set_relay1_default_mode(bool value) {
  _internal_set_relay1_default_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.relay1_default_mode)
}
inline bool NSPanelConfig::_internal_relay1_default_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relay1_default_mode_;
}
inline void NSPanelConfig::_internal_set_relay1_default_mode(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay1_default_mode_ = value;
}

// bool relay2_default_mode = 20;
inline void NSPanelConfig::clear_relay2_default_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay2_default_mode_ = false;
}
inline bool NSPanelConfig::relay2_default_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.relay2_default_mode)
  return _internal_relay2_default_mode();
}
inline void NSPanelConfig::set_relay2_default_mode(bool value) {
  _internal_set_relay2_default_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.relay2_default_mode)
}
inline bool NSPanelConfig::_internal_relay2_default_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relay2_default_mode_;
}
inline void NSPanelConfig::_internal_set_relay2_default_mode(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay2_default_mode_ = value;
}

// int32 temperature_calibration = 21;
inline void NSPanelConfig::clear_temperature_calibration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_calibration_ = 0;
}
inline ::int32_t NSPanelConfig::temperature_calibration() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.temperature_calibration)
  return _internal_temperature_calibration();
}
inline void NSPanelConfig::set_temperature_calibration(::int32_t value) {
  _internal_set_temperature_calibration(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.temperature_calibration)
}
inline ::int32_t NSPanelConfig::_internal_temperature_calibration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_calibration_;
}
inline void NSPanelConfig::_internal_set_temperature_calibration(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_calibration_ = value;
}

// .NSPanelConfig.NSPanelButtonMode button1_mode = 22;
inline void NSPanelConfig::clear_button1_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button1_mode_ = 0;
}
inline ::NSPanelConfig_NSPanelButtonMode NSPanelConfig::button1_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.button1_mode)
  return _internal_button1_mode();
}
inline void NSPanelConfig::set_button1_mode(::NSPanelConfig_NSPanelButtonMode value) {
  _internal_set_button1_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.button1_mode)
}
inline ::NSPanelConfig_NSPanelButtonMode NSPanelConfig::_internal_button1_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelConfig_NSPanelButtonMode>(_impl_.button1_mode_);
}
inline void NSPanelConfig::_internal_set_button1_mode(::NSPanelConfig_NSPanelButtonMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button1_mode_ = value;
}

// .NSPanelConfig.NSPanelButtonMode button2_mode = 25;
inline void NSPanelConfig::clear_button2_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button2_mode_ = 0;
}
inline ::NSPanelConfig_NSPanelButtonMode NSPanelConfig::button2_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.button2_mode)
  return _internal_button2_mode();
}
inline void NSPanelConfig::set_button2_mode(::NSPanelConfig_NSPanelButtonMode value) {
  _internal_set_button2_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.button2_mode)
}
inline ::NSPanelConfig_NSPanelButtonMode NSPanelConfig::_internal_button2_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelConfig_NSPanelButtonMode>(_impl_.button2_mode_);
}
inline void NSPanelConfig::_internal_set_button2_mode(::NSPanelConfig_NSPanelButtonMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button2_mode_ = value;
}

// repeated int32 global_scene_entity_page_ids = 30;
inline int NSPanelConfig::_internal_global_scene_entity_page_ids_size() const {
  return _internal_global_scene_entity_page_ids().size();
}
inline int NSPanelConfig::global_scene_entity_page_ids_size() const {
  return _internal_global_scene_entity_page_ids_size();
}
inline void NSPanelConfig::clear_global_scene_entity_page_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_scene_entity_page_ids_.Clear();
}
inline ::int32_t NSPanelConfig::global_scene_entity_page_ids(int index) const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.global_scene_entity_page_ids)
  return _internal_global_scene_entity_page_ids().Get(index);
}
inline void NSPanelConfig::set_global_scene_entity_page_ids(int index, ::int32_t value) {
  _internal_mutable_global_scene_entity_page_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.global_scene_entity_page_ids)
}
inline void NSPanelConfig::add_global_scene_entity_page_ids(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_global_scene_entity_page_ids()->Add(value);
  // @@protoc_insertion_point(field_add:NSPanelConfig.global_scene_entity_page_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NSPanelConfig::global_scene_entity_page_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelConfig.global_scene_entity_page_ids)
  return _internal_global_scene_entity_page_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig::mutable_global_scene_entity_page_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelConfig.global_scene_entity_page_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_global_scene_entity_page_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NSPanelConfig::_internal_global_scene_entity_page_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.global_scene_entity_page_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig::_internal_mutable_global_scene_entity_page_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.global_scene_entity_page_ids_;
}

// bool optimistic_mode = 31;
inline void NSPanelConfig::clear_optimistic_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optimistic_mode_ = false;
}
inline bool NSPanelConfig::optimistic_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.optimistic_mode)
  return _internal_optimistic_mode();
}
inline void NSPanelConfig::set_optimistic_mode(bool value) {
  _internal_set_optimistic_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.optimistic_mode)
}
inline bool NSPanelConfig::_internal_optimistic_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optimistic_mode_;
}
inline void NSPanelConfig::_internal_set_optimistic_mode(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optimistic_mode_ = value;
}

// int32 raise_light_level_to_100_above = 32;
inline void NSPanelConfig::clear_raise_light_level_to_100_above() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.raise_light_level_to_100_above_ = 0;
}
inline ::int32_t NSPanelConfig::raise_light_level_to_100_above() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.raise_light_level_to_100_above)
  return _internal_raise_light_level_to_100_above();
}
inline void NSPanelConfig::set_raise_light_level_to_100_above(::int32_t value) {
  _internal_set_raise_light_level_to_100_above(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.raise_light_level_to_100_above)
}
inline ::int32_t NSPanelConfig::_internal_raise_light_level_to_100_above() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.raise_light_level_to_100_above_;
}
inline void NSPanelConfig::_internal_set_raise_light_level_to_100_above(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.raise_light_level_to_100_above_ = value;
}

// int32 nspanel_id = 33;
inline void NSPanelConfig::clear_nspanel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nspanel_id_ = 0;
}
inline ::int32_t NSPanelConfig::nspanel_id() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.nspanel_id)
  return _internal_nspanel_id();
}
inline void NSPanelConfig::set_nspanel_id(::int32_t value) {
  _internal_set_nspanel_id(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.nspanel_id)
}
inline ::int32_t NSPanelConfig::_internal_nspanel_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nspanel_id_;
}
inline void NSPanelConfig::_internal_set_nspanel_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nspanel_id_ = value;
}

// repeated int32 relay1_relay_group = 35;
inline int NSPanelConfig::_internal_relay1_relay_group_size() const {
  return _internal_relay1_relay_group().size();
}
inline int NSPanelConfig::relay1_relay_group_size() const {
  return _internal_relay1_relay_group_size();
}
inline void NSPanelConfig::clear_relay1_relay_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay1_relay_group_.Clear();
}
inline ::int32_t NSPanelConfig::relay1_relay_group(int index) const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.relay1_relay_group)
  return _internal_relay1_relay_group().Get(index);
}
inline void NSPanelConfig::set_relay1_relay_group(int index, ::int32_t value) {
  _internal_mutable_relay1_relay_group()->Set(index, value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.relay1_relay_group)
}
inline void NSPanelConfig::add_relay1_relay_group(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_relay1_relay_group()->Add(value);
  // @@protoc_insertion_point(field_add:NSPanelConfig.relay1_relay_group)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NSPanelConfig::relay1_relay_group() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelConfig.relay1_relay_group)
  return _internal_relay1_relay_group();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig::mutable_relay1_relay_group()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelConfig.relay1_relay_group)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_relay1_relay_group();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NSPanelConfig::_internal_relay1_relay_group() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relay1_relay_group_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig::_internal_mutable_relay1_relay_group() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.relay1_relay_group_;
}

// repeated int32 relay2_relay_group = 37;
inline int NSPanelConfig::_internal_relay2_relay_group_size() const {
  return _internal_relay2_relay_group().size();
}
inline int NSPanelConfig::relay2_relay_group_size() const {
  return _internal_relay2_relay_group_size();
}
inline void NSPanelConfig::clear_relay2_relay_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay2_relay_group_.Clear();
}
inline ::int32_t NSPanelConfig::relay2_relay_group(int index) const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.relay2_relay_group)
  return _internal_relay2_relay_group().Get(index);
}
inline void NSPanelConfig::set_relay2_relay_group(int index, ::int32_t value) {
  _internal_mutable_relay2_relay_group()->Set(index, value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.relay2_relay_group)
}
inline void NSPanelConfig::add_relay2_relay_group(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_relay2_relay_group()->Add(value);
  // @@protoc_insertion_point(field_add:NSPanelConfig.relay2_relay_group)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NSPanelConfig::relay2_relay_group() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelConfig.relay2_relay_group)
  return _internal_relay2_relay_group();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig::mutable_relay2_relay_group()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelConfig.relay2_relay_group)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_relay2_relay_group();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NSPanelConfig::_internal_relay2_relay_group() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relay2_relay_group_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelConfig::_internal_mutable_relay2_relay_group() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.relay2_relay_group_;
}

// int32 default_light_brightess = 38;
inline void NSPanelConfig::clear_default_light_brightess() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_light_brightess_ = 0;
}
inline ::int32_t NSPanelConfig::default_light_brightess() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.default_light_brightess)
  return _internal_default_light_brightess();
}
inline void NSPanelConfig::set_default_light_brightess(::int32_t value) {
  _internal_set_default_light_brightess(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.default_light_brightess)
}
inline ::int32_t NSPanelConfig::_internal_default_light_brightess() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default_light_brightess_;
}
inline void NSPanelConfig::_internal_set_default_light_brightess(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_light_brightess_ = value;
}

// bool locked_to_default_room = 39;
inline void NSPanelConfig::clear_locked_to_default_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locked_to_default_room_ = false;
}
inline bool NSPanelConfig::locked_to_default_room() const {
  // @@protoc_insertion_point(field_get:NSPanelConfig.locked_to_default_room)
  return _internal_locked_to_default_room();
}
inline void NSPanelConfig::set_locked_to_default_room(bool value) {
  _internal_set_locked_to_default_room(value);
  // @@protoc_insertion_point(field_set:NSPanelConfig.locked_to_default_room)
}
inline bool NSPanelConfig::_internal_locked_to_default_room() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.locked_to_default_room_;
}
inline void NSPanelConfig::_internal_set_locked_to_default_room(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locked_to_default_room_ = value;
}

// -------------------------------------------------------------------

// NSPanelWarning

// .NSPanelWarningLevel level = 1;
inline void NSPanelWarning::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0;
}
inline ::NSPanelWarningLevel NSPanelWarning::level() const {
  // @@protoc_insertion_point(field_get:NSPanelWarning.level)
  return _internal_level();
}
inline void NSPanelWarning::set_level(::NSPanelWarningLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:NSPanelWarning.level)
}
inline ::NSPanelWarningLevel NSPanelWarning::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelWarningLevel>(_impl_.level_);
}
inline void NSPanelWarning::_internal_set_level(::NSPanelWarningLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// string text = 2;
inline void NSPanelWarning::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& NSPanelWarning::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWarning.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWarning::set_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWarning.text)
}
inline std::string* NSPanelWarning::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:NSPanelWarning.text)
  return _s;
}
inline const std::string& NSPanelWarning::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_.Get();
}
inline void NSPanelWarning::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(value, GetArena());
}
inline std::string* NSPanelWarning::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* NSPanelWarning::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWarning.text)
  return _impl_.text_.Release();
}
inline void NSPanelWarning::set_allocated_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWarning.text)
}

// -------------------------------------------------------------------

// NSPanelStatusReport

// .NSPanelStatusReport.state nspanel_state = 1;
inline void NSPanelStatusReport::clear_nspanel_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nspanel_state_ = 0;
}
inline ::NSPanelStatusReport_state NSPanelStatusReport::nspanel_state() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.nspanel_state)
  return _internal_nspanel_state();
}
inline void NSPanelStatusReport::set_nspanel_state(::NSPanelStatusReport_state value) {
  _internal_set_nspanel_state(value);
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.nspanel_state)
}
inline ::NSPanelStatusReport_state NSPanelStatusReport::_internal_nspanel_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelStatusReport_state>(_impl_.nspanel_state_);
}
inline void NSPanelStatusReport::_internal_set_nspanel_state(::NSPanelStatusReport_state value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nspanel_state_ = value;
}

// int32 update_progress = 2;
inline void NSPanelStatusReport::clear_update_progress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_progress_ = 0;
}
inline ::int32_t NSPanelStatusReport::update_progress() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.update_progress)
  return _internal_update_progress();
}
inline void NSPanelStatusReport::set_update_progress(::int32_t value) {
  _internal_set_update_progress(value);
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.update_progress)
}
inline ::int32_t NSPanelStatusReport::_internal_update_progress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.update_progress_;
}
inline void NSPanelStatusReport::_internal_set_update_progress(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_progress_ = value;
}

// int32 rssi = 3;
inline void NSPanelStatusReport::clear_rssi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rssi_ = 0;
}
inline ::int32_t NSPanelStatusReport::rssi() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.rssi)
  return _internal_rssi();
}
inline void NSPanelStatusReport::set_rssi(::int32_t value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.rssi)
}
inline ::int32_t NSPanelStatusReport::_internal_rssi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rssi_;
}
inline void NSPanelStatusReport::_internal_set_rssi(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rssi_ = value;
}

// int32 heap_used_pct = 4;
inline void NSPanelStatusReport::clear_heap_used_pct() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heap_used_pct_ = 0;
}
inline ::int32_t NSPanelStatusReport::heap_used_pct() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.heap_used_pct)
  return _internal_heap_used_pct();
}
inline void NSPanelStatusReport::set_heap_used_pct(::int32_t value) {
  _internal_set_heap_used_pct(value);
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.heap_used_pct)
}
inline ::int32_t NSPanelStatusReport::_internal_heap_used_pct() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heap_used_pct_;
}
inline void NSPanelStatusReport::_internal_set_heap_used_pct(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heap_used_pct_ = value;
}

// string mac_address = 5;
inline void NSPanelStatusReport::clear_mac_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.ClearToEmpty();
}
inline const std::string& NSPanelStatusReport::mac_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.mac_address)
  return _internal_mac_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelStatusReport::set_mac_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.mac_address)
}
inline std::string* NSPanelStatusReport::mutable_mac_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:NSPanelStatusReport.mac_address)
  return _s;
}
inline const std::string& NSPanelStatusReport::_internal_mac_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mac_address_.Get();
}
inline void NSPanelStatusReport::_internal_set_mac_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.Set(value, GetArena());
}
inline std::string* NSPanelStatusReport::_internal_mutable_mac_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mac_address_.Mutable( GetArena());
}
inline std::string* NSPanelStatusReport::release_mac_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelStatusReport.mac_address)
  return _impl_.mac_address_.Release();
}
inline void NSPanelStatusReport::set_allocated_mac_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mac_address_.IsDefault()) {
          _impl_.mac_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelStatusReport.mac_address)
}

// float temperature = 6;
inline void NSPanelStatusReport::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline float NSPanelStatusReport::temperature() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.temperature)
  return _internal_temperature();
}
inline void NSPanelStatusReport::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.temperature)
}
inline float NSPanelStatusReport::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void NSPanelStatusReport::_internal_set_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// string ip_address = 7;
inline void NSPanelStatusReport::clear_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& NSPanelStatusReport::ip_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelStatusReport::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.ip_address)
}
inline std::string* NSPanelStatusReport::mutable_ip_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:NSPanelStatusReport.ip_address)
  return _s;
}
inline const std::string& NSPanelStatusReport::_internal_ip_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_address_.Get();
}
inline void NSPanelStatusReport::_internal_set_ip_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(value, GetArena());
}
inline std::string* NSPanelStatusReport::_internal_mutable_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ip_address_.Mutable( GetArena());
}
inline std::string* NSPanelStatusReport::release_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelStatusReport.ip_address)
  return _impl_.ip_address_.Release();
}
inline void NSPanelStatusReport::set_allocated_ip_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_address_.IsDefault()) {
          _impl_.ip_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelStatusReport.ip_address)
}

// repeated .NSPanelWarning warnings = 8;
inline int NSPanelStatusReport::_internal_warnings_size() const {
  return _internal_warnings().size();
}
inline int NSPanelStatusReport::warnings_size() const {
  return _internal_warnings_size();
}
inline void NSPanelStatusReport::clear_warnings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warnings_.Clear();
}
inline ::NSPanelWarning* NSPanelStatusReport::mutable_warnings(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NSPanelStatusReport.warnings)
  return _internal_mutable_warnings()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelWarning>* NSPanelStatusReport::mutable_warnings()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelStatusReport.warnings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_warnings();
}
inline const ::NSPanelWarning& NSPanelStatusReport::warnings(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.warnings)
  return _internal_warnings().Get(index);
}
inline ::NSPanelWarning* NSPanelStatusReport::add_warnings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::NSPanelWarning* _add = _internal_mutable_warnings()->Add();
  // @@protoc_insertion_point(field_add:NSPanelStatusReport.warnings)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelWarning>& NSPanelStatusReport::warnings() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelStatusReport.warnings)
  return _internal_warnings();
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelWarning>&
NSPanelStatusReport::_internal_warnings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.warnings_;
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelWarning>*
NSPanelStatusReport::_internal_mutable_warnings() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.warnings_;
}

// -------------------------------------------------------------------

// NSPanelLightStatus

// int32 id = 1;
inline void NSPanelLightStatus::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t NSPanelLightStatus::id() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.id)
  return _internal_id();
}
inline void NSPanelLightStatus::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.id)
}
inline ::int32_t NSPanelLightStatus::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void NSPanelLightStatus::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string name = 2;
inline void NSPanelLightStatus::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NSPanelLightStatus::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelLightStatus::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.name)
}
inline std::string* NSPanelLightStatus::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:NSPanelLightStatus.name)
  return _s;
}
inline const std::string& NSPanelLightStatus::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NSPanelLightStatus::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NSPanelLightStatus::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NSPanelLightStatus::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelLightStatus.name)
  return _impl_.name_.Release();
}
inline void NSPanelLightStatus::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelLightStatus.name)
}

// bool can_dim = 3;
inline void NSPanelLightStatus::clear_can_dim() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_dim_ = false;
}
inline bool NSPanelLightStatus::can_dim() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.can_dim)
  return _internal_can_dim();
}
inline void NSPanelLightStatus::set_can_dim(bool value) {
  _internal_set_can_dim(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.can_dim)
}
inline bool NSPanelLightStatus::_internal_can_dim() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_dim_;
}
inline void NSPanelLightStatus::_internal_set_can_dim(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_dim_ = value;
}

// bool can_color_temperature = 4;
inline void NSPanelLightStatus::clear_can_color_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_color_temperature_ = false;
}
inline bool NSPanelLightStatus::can_color_temperature() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.can_color_temperature)
  return _internal_can_color_temperature();
}
inline void NSPanelLightStatus::set_can_color_temperature(bool value) {
  _internal_set_can_color_temperature(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.can_color_temperature)
}
inline bool NSPanelLightStatus::_internal_can_color_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_color_temperature_;
}
inline void NSPanelLightStatus::_internal_set_can_color_temperature(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_color_temperature_ = value;
}

// bool can_rgb = 5;
inline void NSPanelLightStatus::clear_can_rgb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_rgb_ = false;
}
inline bool NSPanelLightStatus::can_rgb() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.can_rgb)
  return _internal_can_rgb();
}
inline void NSPanelLightStatus::set_can_rgb(bool value) {
  _internal_set_can_rgb(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.can_rgb)
}
inline bool NSPanelLightStatus::_internal_can_rgb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_rgb_;
}
inline void NSPanelLightStatus::_internal_set_can_rgb(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_rgb_ = value;
}

// int32 light_level = 6;
inline void NSPanelLightStatus::clear_light_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.light_level_ = 0;
}
inline ::int32_t NSPanelLightStatus::light_level() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.light_level)
  return _internal_light_level();
}
inline void NSPanelLightStatus::set_light_level(::int32_t value) {
  _internal_set_light_level(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.light_level)
}
inline ::int32_t NSPanelLightStatus::_internal_light_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.light_level_;
}
inline void NSPanelLightStatus::_internal_set_light_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.light_level_ = value;
}

// int32 color_temp = 7;
inline void NSPanelLightStatus::clear_color_temp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_temp_ = 0;
}
inline ::int32_t NSPanelLightStatus::color_temp() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.color_temp)
  return _internal_color_temp();
}
inline void NSPanelLightStatus::set_color_temp(::int32_t value) {
  _internal_set_color_temp(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.color_temp)
}
inline ::int32_t NSPanelLightStatus::_internal_color_temp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.color_temp_;
}
inline void NSPanelLightStatus::_internal_set_color_temp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_temp_ = value;
}

// int32 hue = 8;
inline void NSPanelLightStatus::clear_hue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hue_ = 0;
}
inline ::int32_t NSPanelLightStatus::hue() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.hue)
  return _internal_hue();
}
inline void NSPanelLightStatus::set_hue(::int32_t value) {
  _internal_set_hue(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.hue)
}
inline ::int32_t NSPanelLightStatus::_internal_hue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hue_;
}
inline void NSPanelLightStatus::_internal_set_hue(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hue_ = value;
}

// int32 saturation = 9;
inline void NSPanelLightStatus::clear_saturation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturation_ = 0;
}
inline ::int32_t NSPanelLightStatus::saturation() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.saturation)
  return _internal_saturation();
}
inline void NSPanelLightStatus::set_saturation(::int32_t value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.saturation)
}
inline ::int32_t NSPanelLightStatus::_internal_saturation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.saturation_;
}
inline void NSPanelLightStatus::_internal_set_saturation(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturation_ = value;
}

// int32 room_view_position = 10;
inline void NSPanelLightStatus::clear_room_view_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_view_position_ = 0;
}
inline ::int32_t NSPanelLightStatus::room_view_position() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.room_view_position)
  return _internal_room_view_position();
}
inline void NSPanelLightStatus::set_room_view_position(::int32_t value) {
  _internal_set_room_view_position(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.room_view_position)
}
inline ::int32_t NSPanelLightStatus::_internal_room_view_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_view_position_;
}
inline void NSPanelLightStatus::_internal_set_room_view_position(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_view_position_ = value;
}

// -------------------------------------------------------------------

// NSPanelRoomEntitiesPage_EntitySlot

// int32 room_view_position = 1;
inline void NSPanelRoomEntitiesPage_EntitySlot::clear_room_view_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_view_position_ = 0;
}
inline ::int32_t NSPanelRoomEntitiesPage_EntitySlot::room_view_position() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.EntitySlot.room_view_position)
  return _internal_room_view_position();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::set_room_view_position(::int32_t value) {
  _internal_set_room_view_position(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.EntitySlot.room_view_position)
}
inline ::int32_t NSPanelRoomEntitiesPage_EntitySlot::_internal_room_view_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_view_position_;
}
inline void NSPanelRoomEntitiesPage_EntitySlot::_internal_set_room_view_position(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_view_position_ = value;
}

// string name = 2;
inline void NSPanelRoomEntitiesPage_EntitySlot::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NSPanelRoomEntitiesPage_EntitySlot::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.EntitySlot.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelRoomEntitiesPage_EntitySlot::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.EntitySlot.name)
}
inline std::string* NSPanelRoomEntitiesPage_EntitySlot::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:NSPanelRoomEntitiesPage.EntitySlot.name)
  return _s;
}
inline const std::string& NSPanelRoomEntitiesPage_EntitySlot::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NSPanelRoomEntitiesPage_EntitySlot::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NSPanelRoomEntitiesPage_EntitySlot::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelRoomEntitiesPage.EntitySlot.name)
  return _impl_.name_.Release();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelRoomEntitiesPage.EntitySlot.name)
}

// string icon = 3;
inline void NSPanelRoomEntitiesPage_EntitySlot::clear_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& NSPanelRoomEntitiesPage_EntitySlot::icon() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.EntitySlot.icon)
  return _internal_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelRoomEntitiesPage_EntitySlot::set_icon(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.EntitySlot.icon)
}
inline std::string* NSPanelRoomEntitiesPage_EntitySlot::mutable_icon() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:NSPanelRoomEntitiesPage.EntitySlot.icon)
  return _s;
}
inline const std::string& NSPanelRoomEntitiesPage_EntitySlot::_internal_icon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.icon_.Get();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::_internal_set_icon(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(value, GetArena());
}
inline std::string* NSPanelRoomEntitiesPage_EntitySlot::_internal_mutable_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.icon_.Mutable( GetArena());
}
inline std::string* NSPanelRoomEntitiesPage_EntitySlot::release_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelRoomEntitiesPage.EntitySlot.icon)
  return _impl_.icon_.Release();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::set_allocated_icon(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.icon_.IsDefault()) {
          _impl_.icon_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelRoomEntitiesPage.EntitySlot.icon)
}

// int32 pco = 4;
inline void NSPanelRoomEntitiesPage_EntitySlot::clear_pco() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pco_ = 0;
}
inline ::int32_t NSPanelRoomEntitiesPage_EntitySlot::pco() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.EntitySlot.pco)
  return _internal_pco();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::set_pco(::int32_t value) {
  _internal_set_pco(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.EntitySlot.pco)
}
inline ::int32_t NSPanelRoomEntitiesPage_EntitySlot::_internal_pco() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pco_;
}
inline void NSPanelRoomEntitiesPage_EntitySlot::_internal_set_pco(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pco_ = value;
}

// int32 pco2 = 5;
inline void NSPanelRoomEntitiesPage_EntitySlot::clear_pco2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pco2_ = 0;
}
inline ::int32_t NSPanelRoomEntitiesPage_EntitySlot::pco2() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.EntitySlot.pco2)
  return _internal_pco2();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::set_pco2(::int32_t value) {
  _internal_set_pco2(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.EntitySlot.pco2)
}
inline ::int32_t NSPanelRoomEntitiesPage_EntitySlot::_internal_pco2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pco2_;
}
inline void NSPanelRoomEntitiesPage_EntitySlot::_internal_set_pco2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pco2_ = value;
}

// bool can_save_scene = 6;
inline void NSPanelRoomEntitiesPage_EntitySlot::clear_can_save_scene() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_save_scene_ = false;
}
inline bool NSPanelRoomEntitiesPage_EntitySlot::can_save_scene() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.EntitySlot.can_save_scene)
  return _internal_can_save_scene();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::set_can_save_scene(bool value) {
  _internal_set_can_save_scene(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.EntitySlot.can_save_scene)
}
inline bool NSPanelRoomEntitiesPage_EntitySlot::_internal_can_save_scene() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_save_scene_;
}
inline void NSPanelRoomEntitiesPage_EntitySlot::_internal_set_can_save_scene(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_save_scene_ = value;
}

// string mqtt_state_topic = 7;
inline void NSPanelRoomEntitiesPage_EntitySlot::clear_mqtt_state_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mqtt_state_topic_.ClearToEmpty();
}
inline const std::string& NSPanelRoomEntitiesPage_EntitySlot::mqtt_state_topic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.EntitySlot.mqtt_state_topic)
  return _internal_mqtt_state_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelRoomEntitiesPage_EntitySlot::set_mqtt_state_topic(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mqtt_state_topic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.EntitySlot.mqtt_state_topic)
}
inline std::string* NSPanelRoomEntitiesPage_EntitySlot::mutable_mqtt_state_topic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mqtt_state_topic();
  // @@protoc_insertion_point(field_mutable:NSPanelRoomEntitiesPage.EntitySlot.mqtt_state_topic)
  return _s;
}
inline const std::string& NSPanelRoomEntitiesPage_EntitySlot::_internal_mqtt_state_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mqtt_state_topic_.Get();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::_internal_set_mqtt_state_topic(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mqtt_state_topic_.Set(value, GetArena());
}
inline std::string* NSPanelRoomEntitiesPage_EntitySlot::_internal_mutable_mqtt_state_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mqtt_state_topic_.Mutable( GetArena());
}
inline std::string* NSPanelRoomEntitiesPage_EntitySlot::release_mqtt_state_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelRoomEntitiesPage.EntitySlot.mqtt_state_topic)
  return _impl_.mqtt_state_topic_.Release();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::set_allocated_mqtt_state_topic(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mqtt_state_topic_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mqtt_state_topic_.IsDefault()) {
          _impl_.mqtt_state_topic_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelRoomEntitiesPage.EntitySlot.mqtt_state_topic)
}

// -------------------------------------------------------------------

// NSPanelRoomEntitiesPage

// int32 id = 1;
inline void NSPanelRoomEntitiesPage::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t NSPanelRoomEntitiesPage::id() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.id)
  return _internal_id();
}
inline void NSPanelRoomEntitiesPage::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.id)
}
inline ::int32_t NSPanelRoomEntitiesPage::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void NSPanelRoomEntitiesPage::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// int32 page_type = 2;
inline void NSPanelRoomEntitiesPage::clear_page_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_type_ = 0;
}
inline ::int32_t NSPanelRoomEntitiesPage::page_type() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.page_type)
  return _internal_page_type();
}
inline void NSPanelRoomEntitiesPage::set_page_type(::int32_t value) {
  _internal_set_page_type(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.page_type)
}
inline ::int32_t NSPanelRoomEntitiesPage::_internal_page_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.page_type_;
}
inline void NSPanelRoomEntitiesPage::_internal_set_page_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_type_ = value;
}

// string header_text = 3;
inline void NSPanelRoomEntitiesPage::clear_header_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_text_.ClearToEmpty();
}
inline const std::string& NSPanelRoomEntitiesPage::header_text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.header_text)
  return _internal_header_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelRoomEntitiesPage::set_header_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelRoomEntitiesPage.header_text)
}
inline std::string* NSPanelRoomEntitiesPage::mutable_header_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_header_text();
  // @@protoc_insertion_point(field_mutable:NSPanelRoomEntitiesPage.header_text)
  return _s;
}
inline const std::string& NSPanelRoomEntitiesPage::_internal_header_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_text_.Get();
}
inline void NSPanelRoomEntitiesPage::_internal_set_header_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_text_.Set(value, GetArena());
}
inline std::string* NSPanelRoomEntitiesPage::_internal_mutable_header_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.header_text_.Mutable( GetArena());
}
inline std::string* NSPanelRoomEntitiesPage::release_header_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelRoomEntitiesPage.header_text)
  return _impl_.header_text_.Release();
}
inline void NSPanelRoomEntitiesPage::set_allocated_header_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.header_text_.IsDefault()) {
          _impl_.header_text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelRoomEntitiesPage.header_text)
}

// repeated .NSPanelRoomEntitiesPage.EntitySlot entities = 4;
inline int NSPanelRoomEntitiesPage::_internal_entities_size() const {
  return _internal_entities().size();
}
inline int NSPanelRoomEntitiesPage::entities_size() const {
  return _internal_entities_size();
}
inline void NSPanelRoomEntitiesPage::clear_entities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entities_.Clear();
}
inline ::NSPanelRoomEntitiesPage_EntitySlot* NSPanelRoomEntitiesPage::mutable_entities(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NSPanelRoomEntitiesPage.entities)
  return _internal_mutable_entities()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelRoomEntitiesPage_EntitySlot>* NSPanelRoomEntitiesPage::mutable_entities()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelRoomEntitiesPage.entities)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entities();
}
inline const ::NSPanelRoomEntitiesPage_EntitySlot& NSPanelRoomEntitiesPage::entities(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelRoomEntitiesPage.entities)
  return _internal_entities().Get(index);
}
inline ::NSPanelRoomEntitiesPage_EntitySlot* NSPanelRoomEntitiesPage::add_entities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::NSPanelRoomEntitiesPage_EntitySlot* _add = _internal_mutable_entities()->Add();
  // @@protoc_insertion_point(field_add:NSPanelRoomEntitiesPage.entities)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelRoomEntitiesPage_EntitySlot>& NSPanelRoomEntitiesPage::entities() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelRoomEntitiesPage.entities)
  return _internal_entities();
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelRoomEntitiesPage_EntitySlot>&
NSPanelRoomEntitiesPage::_internal_entities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entities_;
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelRoomEntitiesPage_EntitySlot>*
NSPanelRoomEntitiesPage::_internal_mutable_entities() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entities_;
}

// -------------------------------------------------------------------

// NSPanelRoomStatus

// int32 id = 1;
inline void NSPanelRoomStatus::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t NSPanelRoomStatus::id() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.id)
  return _internal_id();
}
inline void NSPanelRoomStatus::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.id)
}
inline ::int32_t NSPanelRoomStatus::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void NSPanelRoomStatus::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string name = 2;
inline void NSPanelRoomStatus::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NSPanelRoomStatus::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelRoomStatus::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.name)
}
inline std::string* NSPanelRoomStatus::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:NSPanelRoomStatus.name)
  return _s;
}
inline const std::string& NSPanelRoomStatus::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NSPanelRoomStatus::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NSPanelRoomStatus::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NSPanelRoomStatus::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelRoomStatus.name)
  return _impl_.name_.Release();
}
inline void NSPanelRoomStatus::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelRoomStatus.name)
}

// int32 average_dim_level = 3;
inline void NSPanelRoomStatus::clear_average_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_dim_level_ = 0;
}
inline ::int32_t NSPanelRoomStatus::average_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.average_dim_level)
  return _internal_average_dim_level();
}
inline void NSPanelRoomStatus::set_average_dim_level(::int32_t value) {
  _internal_set_average_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.average_dim_level)
}
inline ::int32_t NSPanelRoomStatus::_internal_average_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_dim_level_;
}
inline void NSPanelRoomStatus::_internal_set_average_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_dim_level_ = value;
}

// int32 ceiling_lights_dim_level = 4;
inline void NSPanelRoomStatus::clear_ceiling_lights_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ceiling_lights_dim_level_ = 0;
}
inline ::int32_t NSPanelRoomStatus::ceiling_lights_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.ceiling_lights_dim_level)
  return _internal_ceiling_lights_dim_level();
}
inline void NSPanelRoomStatus::set_ceiling_lights_dim_level(::int32_t value) {
  _internal_set_ceiling_lights_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.ceiling_lights_dim_level)
}
inline ::int32_t NSPanelRoomStatus::_internal_ceiling_lights_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ceiling_lights_dim_level_;
}
inline void NSPanelRoomStatus::_internal_set_ceiling_lights_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ceiling_lights_dim_level_ = value;
}

// int32 table_lights_dim_level = 5;
inline void NSPanelRoomStatus::clear_table_lights_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_lights_dim_level_ = 0;
}
inline ::int32_t NSPanelRoomStatus::table_lights_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.table_lights_dim_level)
  return _internal_table_lights_dim_level();
}
inline void NSPanelRoomStatus::set_table_lights_dim_level(::int32_t value) {
  _internal_set_table_lights_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.table_lights_dim_level)
}
inline ::int32_t NSPanelRoomStatus::_internal_table_lights_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.table_lights_dim_level_;
}
inline void NSPanelRoomStatus::_internal_set_table_lights_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_lights_dim_level_ = value;
}

// int32 average_color_temperature = 6;
inline void NSPanelRoomStatus::clear_average_color_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_color_temperature_ = 0;
}
inline ::int32_t NSPanelRoomStatus::average_color_temperature() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.average_color_temperature)
  return _internal_average_color_temperature();
}
inline void NSPanelRoomStatus::set_average_color_temperature(::int32_t value) {
  _internal_set_average_color_temperature(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.average_color_temperature)
}
inline ::int32_t NSPanelRoomStatus::_internal_average_color_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_color_temperature_;
}
inline void NSPanelRoomStatus::_internal_set_average_color_temperature(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_color_temperature_ = value;
}

// int32 ceiling_lights_color_temperature_value = 7;
inline void NSPanelRoomStatus::clear_ceiling_lights_color_temperature_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ceiling_lights_color_temperature_value_ = 0;
}
inline ::int32_t NSPanelRoomStatus::ceiling_lights_color_temperature_value() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.ceiling_lights_color_temperature_value)
  return _internal_ceiling_lights_color_temperature_value();
}
inline void NSPanelRoomStatus::set_ceiling_lights_color_temperature_value(::int32_t value) {
  _internal_set_ceiling_lights_color_temperature_value(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.ceiling_lights_color_temperature_value)
}
inline ::int32_t NSPanelRoomStatus::_internal_ceiling_lights_color_temperature_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ceiling_lights_color_temperature_value_;
}
inline void NSPanelRoomStatus::_internal_set_ceiling_lights_color_temperature_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ceiling_lights_color_temperature_value_ = value;
}

// int32 table_lights_color_temperature_value = 8;
inline void NSPanelRoomStatus::clear_table_lights_color_temperature_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_lights_color_temperature_value_ = 0;
}
inline ::int32_t NSPanelRoomStatus::table_lights_color_temperature_value() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.table_lights_color_temperature_value)
  return _internal_table_lights_color_temperature_value();
}
inline void NSPanelRoomStatus::set_table_lights_color_temperature_value(::int32_t value) {
  _internal_set_table_lights_color_temperature_value(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.table_lights_color_temperature_value)
}
inline ::int32_t NSPanelRoomStatus::_internal_table_lights_color_temperature_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.table_lights_color_temperature_value_;
}
inline void NSPanelRoomStatus::_internal_set_table_lights_color_temperature_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_lights_color_temperature_value_ = value;
}

// int32 num_ceiling_lights = 9;
inline void NSPanelRoomStatus::clear_num_ceiling_lights() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_ceiling_lights_ = 0;
}
inline ::int32_t NSPanelRoomStatus::num_ceiling_lights() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.num_ceiling_lights)
  return _internal_num_ceiling_lights();
}
inline void NSPanelRoomStatus::set_num_ceiling_lights(::int32_t value) {
  _internal_set_num_ceiling_lights(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.num_ceiling_lights)
}
inline ::int32_t NSPanelRoomStatus::_internal_num_ceiling_lights() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_ceiling_lights_;
}
inline void NSPanelRoomStatus::_internal_set_num_ceiling_lights(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_ceiling_lights_ = value;
}

// int32 num_table_lights = 10;
inline void NSPanelRoomStatus::clear_num_table_lights() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_table_lights_ = 0;
}
inline ::int32_t NSPanelRoomStatus::num_table_lights() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.num_table_lights)
  return _internal_num_table_lights();
}
inline void NSPanelRoomStatus::set_num_table_lights(::int32_t value) {
  _internal_set_num_table_lights(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.num_table_lights)
}
inline ::int32_t NSPanelRoomStatus::_internal_num_table_lights() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_table_lights_;
}
inline void NSPanelRoomStatus::_internal_set_num_table_lights(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_table_lights_ = value;
}

// int32 num_ceiling_lights_on = 11;
inline void NSPanelRoomStatus::clear_num_ceiling_lights_on() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_ceiling_lights_on_ = 0;
}
inline ::int32_t NSPanelRoomStatus::num_ceiling_lights_on() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.num_ceiling_lights_on)
  return _internal_num_ceiling_lights_on();
}
inline void NSPanelRoomStatus::set_num_ceiling_lights_on(::int32_t value) {
  _internal_set_num_ceiling_lights_on(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.num_ceiling_lights_on)
}
inline ::int32_t NSPanelRoomStatus::_internal_num_ceiling_lights_on() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_ceiling_lights_on_;
}
inline void NSPanelRoomStatus::_internal_set_num_ceiling_lights_on(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_ceiling_lights_on_ = value;
}

// int32 num_table_lights_on = 12;
inline void NSPanelRoomStatus::clear_num_table_lights_on() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_table_lights_on_ = 0;
}
inline ::int32_t NSPanelRoomStatus::num_table_lights_on() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.num_table_lights_on)
  return _internal_num_table_lights_on();
}
inline void NSPanelRoomStatus::set_num_table_lights_on(::int32_t value) {
  _internal_set_num_table_lights_on(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.num_table_lights_on)
}
inline ::int32_t NSPanelRoomStatus::_internal_num_table_lights_on() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_table_lights_on_;
}
inline void NSPanelRoomStatus::_internal_set_num_table_lights_on(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_table_lights_on_ = value;
}

// repeated int32 entity_page_ids = 13;
inline int NSPanelRoomStatus::_internal_entity_page_ids_size() const {
  return _internal_entity_page_ids().size();
}
inline int NSPanelRoomStatus::entity_page_ids_size() const {
  return _internal_entity_page_ids_size();
}
inline void NSPanelRoomStatus::clear_entity_page_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_page_ids_.Clear();
}
inline ::int32_t NSPanelRoomStatus::entity_page_ids(int index) const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.entity_page_ids)
  return _internal_entity_page_ids().Get(index);
}
inline void NSPanelRoomStatus::set_entity_page_ids(int index, ::int32_t value) {
  _internal_mutable_entity_page_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.entity_page_ids)
}
inline void NSPanelRoomStatus::add_entity_page_ids(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_entity_page_ids()->Add(value);
  // @@protoc_insertion_point(field_add:NSPanelRoomStatus.entity_page_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NSPanelRoomStatus::entity_page_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelRoomStatus.entity_page_ids)
  return _internal_entity_page_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelRoomStatus::mutable_entity_page_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelRoomStatus.entity_page_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entity_page_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NSPanelRoomStatus::_internal_entity_page_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_page_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelRoomStatus::_internal_mutable_entity_page_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entity_page_ids_;
}

// -------------------------------------------------------------------

// NSPanelWeatherUpdate_ForecastItem

// string weather_icon = 1;
inline void NSPanelWeatherUpdate_ForecastItem::clear_weather_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weather_icon_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::weather_icon() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.ForecastItem.weather_icon)
  return _internal_weather_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate_ForecastItem::set_weather_icon(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weather_icon_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.ForecastItem.weather_icon)
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::mutable_weather_icon() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_weather_icon();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.ForecastItem.weather_icon)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::_internal_weather_icon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.weather_icon_.Get();
}
inline void NSPanelWeatherUpdate_ForecastItem::_internal_set_weather_icon(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weather_icon_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::_internal_mutable_weather_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.weather_icon_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::release_weather_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.ForecastItem.weather_icon)
  return _impl_.weather_icon_.Release();
}
inline void NSPanelWeatherUpdate_ForecastItem::set_allocated_weather_icon(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weather_icon_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.weather_icon_.IsDefault()) {
          _impl_.weather_icon_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.ForecastItem.weather_icon)
}

// string precipitation_string = 2;
inline void NSPanelWeatherUpdate_ForecastItem::clear_precipitation_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.precipitation_string_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::precipitation_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.ForecastItem.precipitation_string)
  return _internal_precipitation_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate_ForecastItem::set_precipitation_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.precipitation_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.ForecastItem.precipitation_string)
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::mutable_precipitation_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_precipitation_string();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.ForecastItem.precipitation_string)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::_internal_precipitation_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.precipitation_string_.Get();
}
inline void NSPanelWeatherUpdate_ForecastItem::_internal_set_precipitation_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.precipitation_string_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::_internal_mutable_precipitation_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.precipitation_string_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::release_precipitation_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.ForecastItem.precipitation_string)
  return _impl_.precipitation_string_.Release();
}
inline void NSPanelWeatherUpdate_ForecastItem::set_allocated_precipitation_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.precipitation_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.precipitation_string_.IsDefault()) {
          _impl_.precipitation_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.ForecastItem.precipitation_string)
}

// string temperature_maxmin_string = 3;
inline void NSPanelWeatherUpdate_ForecastItem::clear_temperature_maxmin_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_maxmin_string_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::temperature_maxmin_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.ForecastItem.temperature_maxmin_string)
  return _internal_temperature_maxmin_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate_ForecastItem::set_temperature_maxmin_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_maxmin_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.ForecastItem.temperature_maxmin_string)
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::mutable_temperature_maxmin_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_temperature_maxmin_string();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.ForecastItem.temperature_maxmin_string)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::_internal_temperature_maxmin_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_maxmin_string_.Get();
}
inline void NSPanelWeatherUpdate_ForecastItem::_internal_set_temperature_maxmin_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_maxmin_string_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::_internal_mutable_temperature_maxmin_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.temperature_maxmin_string_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::release_temperature_maxmin_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.ForecastItem.temperature_maxmin_string)
  return _impl_.temperature_maxmin_string_.Release();
}
inline void NSPanelWeatherUpdate_ForecastItem::set_allocated_temperature_maxmin_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_maxmin_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.temperature_maxmin_string_.IsDefault()) {
          _impl_.temperature_maxmin_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.ForecastItem.temperature_maxmin_string)
}

// string wind_string = 4;
inline void NSPanelWeatherUpdate_ForecastItem::clear_wind_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_string_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::wind_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.ForecastItem.wind_string)
  return _internal_wind_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate_ForecastItem::set_wind_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.ForecastItem.wind_string)
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::mutable_wind_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_wind_string();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.ForecastItem.wind_string)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::_internal_wind_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wind_string_.Get();
}
inline void NSPanelWeatherUpdate_ForecastItem::_internal_set_wind_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_string_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::_internal_mutable_wind_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.wind_string_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::release_wind_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.ForecastItem.wind_string)
  return _impl_.wind_string_.Release();
}
inline void NSPanelWeatherUpdate_ForecastItem::set_allocated_wind_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.wind_string_.IsDefault()) {
          _impl_.wind_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.ForecastItem.wind_string)
}

// string display_string = 5;
inline void NSPanelWeatherUpdate_ForecastItem::clear_display_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_string_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::display_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.ForecastItem.display_string)
  return _internal_display_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate_ForecastItem::set_display_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.ForecastItem.display_string)
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::mutable_display_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_display_string();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.ForecastItem.display_string)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate_ForecastItem::_internal_display_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.display_string_.Get();
}
inline void NSPanelWeatherUpdate_ForecastItem::_internal_set_display_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_string_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::_internal_mutable_display_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.display_string_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate_ForecastItem::release_display_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.ForecastItem.display_string)
  return _impl_.display_string_.Release();
}
inline void NSPanelWeatherUpdate_ForecastItem::set_allocated_display_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.display_string_.IsDefault()) {
          _impl_.display_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.ForecastItem.display_string)
}

// -------------------------------------------------------------------

// NSPanelWeatherUpdate

// repeated .NSPanelWeatherUpdate.ForecastItem forecast_items = 1;
inline int NSPanelWeatherUpdate::_internal_forecast_items_size() const {
  return _internal_forecast_items().size();
}
inline int NSPanelWeatherUpdate::forecast_items_size() const {
  return _internal_forecast_items_size();
}
inline void NSPanelWeatherUpdate::clear_forecast_items() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_items_.Clear();
}
inline ::NSPanelWeatherUpdate_ForecastItem* NSPanelWeatherUpdate::mutable_forecast_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.forecast_items)
  return _internal_mutable_forecast_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelWeatherUpdate_ForecastItem>* NSPanelWeatherUpdate::mutable_forecast_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelWeatherUpdate.forecast_items)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_forecast_items();
}
inline const ::NSPanelWeatherUpdate_ForecastItem& NSPanelWeatherUpdate::forecast_items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.forecast_items)
  return _internal_forecast_items().Get(index);
}
inline ::NSPanelWeatherUpdate_ForecastItem* NSPanelWeatherUpdate::add_forecast_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::NSPanelWeatherUpdate_ForecastItem* _add = _internal_mutable_forecast_items()->Add();
  // @@protoc_insertion_point(field_add:NSPanelWeatherUpdate.forecast_items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelWeatherUpdate_ForecastItem>& NSPanelWeatherUpdate::forecast_items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelWeatherUpdate.forecast_items)
  return _internal_forecast_items();
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelWeatherUpdate_ForecastItem>&
NSPanelWeatherUpdate::_internal_forecast_items() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forecast_items_;
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelWeatherUpdate_ForecastItem>*
NSPanelWeatherUpdate::_internal_mutable_forecast_items() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.forecast_items_;
}

// string current_weather_icon = 2;
inline void NSPanelWeatherUpdate::clear_current_weather_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_weather_icon_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate::current_weather_icon() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.current_weather_icon)
  return _internal_current_weather_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate::set_current_weather_icon(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_weather_icon_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.current_weather_icon)
}
inline std::string* NSPanelWeatherUpdate::mutable_current_weather_icon() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_weather_icon();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.current_weather_icon)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate::_internal_current_weather_icon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_weather_icon_.Get();
}
inline void NSPanelWeatherUpdate::_internal_set_current_weather_icon(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_weather_icon_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate::_internal_mutable_current_weather_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.current_weather_icon_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate::release_current_weather_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.current_weather_icon)
  return _impl_.current_weather_icon_.Release();
}
inline void NSPanelWeatherUpdate::set_allocated_current_weather_icon(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_weather_icon_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_weather_icon_.IsDefault()) {
          _impl_.current_weather_icon_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.current_weather_icon)
}

// string current_temperature_string = 3;
inline void NSPanelWeatherUpdate::clear_current_temperature_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_temperature_string_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate::current_temperature_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.current_temperature_string)
  return _internal_current_temperature_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate::set_current_temperature_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_temperature_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.current_temperature_string)
}
inline std::string* NSPanelWeatherUpdate::mutable_current_temperature_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_temperature_string();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.current_temperature_string)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate::_internal_current_temperature_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_temperature_string_.Get();
}
inline void NSPanelWeatherUpdate::_internal_set_current_temperature_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_temperature_string_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate::_internal_mutable_current_temperature_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.current_temperature_string_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate::release_current_temperature_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.current_temperature_string)
  return _impl_.current_temperature_string_.Release();
}
inline void NSPanelWeatherUpdate::set_allocated_current_temperature_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_temperature_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_temperature_string_.IsDefault()) {
          _impl_.current_temperature_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.current_temperature_string)
}

// string current_maxmin_temperature = 4;
inline void NSPanelWeatherUpdate::clear_current_maxmin_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_maxmin_temperature_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate::current_maxmin_temperature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.current_maxmin_temperature)
  return _internal_current_maxmin_temperature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate::set_current_maxmin_temperature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_maxmin_temperature_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.current_maxmin_temperature)
}
inline std::string* NSPanelWeatherUpdate::mutable_current_maxmin_temperature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_maxmin_temperature();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.current_maxmin_temperature)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate::_internal_current_maxmin_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_maxmin_temperature_.Get();
}
inline void NSPanelWeatherUpdate::_internal_set_current_maxmin_temperature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_maxmin_temperature_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate::_internal_mutable_current_maxmin_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.current_maxmin_temperature_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate::release_current_maxmin_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.current_maxmin_temperature)
  return _impl_.current_maxmin_temperature_.Release();
}
inline void NSPanelWeatherUpdate::set_allocated_current_maxmin_temperature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_maxmin_temperature_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_maxmin_temperature_.IsDefault()) {
          _impl_.current_maxmin_temperature_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.current_maxmin_temperature)
}

// string current_wind_string = 5;
inline void NSPanelWeatherUpdate::clear_current_wind_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_wind_string_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate::current_wind_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.current_wind_string)
  return _internal_current_wind_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate::set_current_wind_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_wind_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.current_wind_string)
}
inline std::string* NSPanelWeatherUpdate::mutable_current_wind_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_wind_string();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.current_wind_string)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate::_internal_current_wind_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_wind_string_.Get();
}
inline void NSPanelWeatherUpdate::_internal_set_current_wind_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_wind_string_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate::_internal_mutable_current_wind_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.current_wind_string_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate::release_current_wind_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.current_wind_string)
  return _impl_.current_wind_string_.Release();
}
inline void NSPanelWeatherUpdate::set_allocated_current_wind_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_wind_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_wind_string_.IsDefault()) {
          _impl_.current_wind_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.current_wind_string)
}

// string sunrise_string = 6;
inline void NSPanelWeatherUpdate::clear_sunrise_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sunrise_string_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate::sunrise_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.sunrise_string)
  return _internal_sunrise_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate::set_sunrise_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sunrise_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.sunrise_string)
}
inline std::string* NSPanelWeatherUpdate::mutable_sunrise_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sunrise_string();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.sunrise_string)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate::_internal_sunrise_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sunrise_string_.Get();
}
inline void NSPanelWeatherUpdate::_internal_set_sunrise_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sunrise_string_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate::_internal_mutable_sunrise_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sunrise_string_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate::release_sunrise_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.sunrise_string)
  return _impl_.sunrise_string_.Release();
}
inline void NSPanelWeatherUpdate::set_allocated_sunrise_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sunrise_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sunrise_string_.IsDefault()) {
          _impl_.sunrise_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.sunrise_string)
}

// string sunset_string = 7;
inline void NSPanelWeatherUpdate::clear_sunset_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sunset_string_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate::sunset_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.sunset_string)
  return _internal_sunset_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate::set_sunset_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sunset_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.sunset_string)
}
inline std::string* NSPanelWeatherUpdate::mutable_sunset_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sunset_string();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.sunset_string)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate::_internal_sunset_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sunset_string_.Get();
}
inline void NSPanelWeatherUpdate::_internal_set_sunset_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sunset_string_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate::_internal_mutable_sunset_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sunset_string_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate::release_sunset_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.sunset_string)
  return _impl_.sunset_string_.Release();
}
inline void NSPanelWeatherUpdate::set_allocated_sunset_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sunset_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sunset_string_.IsDefault()) {
          _impl_.sunset_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.sunset_string)
}

// string current_precipitation_string = 8;
inline void NSPanelWeatherUpdate::clear_current_precipitation_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_precipitation_string_.ClearToEmpty();
}
inline const std::string& NSPanelWeatherUpdate::current_precipitation_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelWeatherUpdate.current_precipitation_string)
  return _internal_current_precipitation_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelWeatherUpdate::set_current_precipitation_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_precipitation_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelWeatherUpdate.current_precipitation_string)
}
inline std::string* NSPanelWeatherUpdate::mutable_current_precipitation_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_precipitation_string();
  // @@protoc_insertion_point(field_mutable:NSPanelWeatherUpdate.current_precipitation_string)
  return _s;
}
inline const std::string& NSPanelWeatherUpdate::_internal_current_precipitation_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_precipitation_string_.Get();
}
inline void NSPanelWeatherUpdate::_internal_set_current_precipitation_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_precipitation_string_.Set(value, GetArena());
}
inline std::string* NSPanelWeatherUpdate::_internal_mutable_current_precipitation_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.current_precipitation_string_.Mutable( GetArena());
}
inline std::string* NSPanelWeatherUpdate::release_current_precipitation_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelWeatherUpdate.current_precipitation_string)
  return _impl_.current_precipitation_string_.Release();
}
inline void NSPanelWeatherUpdate::set_allocated_current_precipitation_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_precipitation_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_precipitation_string_.IsDefault()) {
          _impl_.current_precipitation_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelWeatherUpdate.current_precipitation_string)
}

// -------------------------------------------------------------------

// NSPanelMQTTManagerCommand_FirstPageTurnLightOn

// .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::clear_affect_lights() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.affect_lights_ = 0;
}
inline ::NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand_FirstPageTurnLightOn::affect_lights() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.affect_lights)
  return _internal_affect_lights();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::set_affect_lights(::NSPanelMQTTManagerCommand_AffectLightsOptions value) {
  _internal_set_affect_lights(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.affect_lights)
}
inline ::NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_affect_lights() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelMQTTManagerCommand_AffectLightsOptions>(_impl_.affect_lights_);
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_set_affect_lights(::NSPanelMQTTManagerCommand_AffectLightsOptions value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.affect_lights_ = value;
}

// int32 brightness_slider_value = 2;
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::clear_brightness_slider_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brightness_slider_value_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_FirstPageTurnLightOn::brightness_slider_value() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.brightness_slider_value)
  return _internal_brightness_slider_value();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::set_brightness_slider_value(::int32_t value) {
  _internal_set_brightness_slider_value(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.brightness_slider_value)
}
inline ::int32_t NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_brightness_slider_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brightness_slider_value_;
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_set_brightness_slider_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brightness_slider_value_ = value;
}

// int32 kelvin_slider_value = 3;
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::clear_kelvin_slider_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kelvin_slider_value_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_FirstPageTurnLightOn::kelvin_slider_value() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.kelvin_slider_value)
  return _internal_kelvin_slider_value();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::set_kelvin_slider_value(::int32_t value) {
  _internal_set_kelvin_slider_value(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.kelvin_slider_value)
}
inline ::int32_t NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_kelvin_slider_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kelvin_slider_value_;
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_set_kelvin_slider_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kelvin_slider_value_ = value;
}

// int32 selected_room = 4;
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::clear_selected_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.selected_room_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_FirstPageTurnLightOn::selected_room() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.selected_room)
  return _internal_selected_room();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::set_selected_room(::int32_t value) {
  _internal_set_selected_room(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.selected_room)
}
inline ::int32_t NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_selected_room() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.selected_room_;
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_set_selected_room(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.selected_room_ = value;
}

// bool global = 5;
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::clear_global() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_ = false;
}
inline bool NSPanelMQTTManagerCommand_FirstPageTurnLightOn::global() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.global)
  return _internal_global();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::set_global(bool value) {
  _internal_set_global(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.global)
}
inline bool NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_global() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.global_;
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_set_global(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_ = value;
}

// bool has_brightness_value = 6;
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::clear_has_brightness_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_brightness_value_ = false;
}
inline bool NSPanelMQTTManagerCommand_FirstPageTurnLightOn::has_brightness_value() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.has_brightness_value)
  return _internal_has_brightness_value();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::set_has_brightness_value(bool value) {
  _internal_set_has_brightness_value(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.has_brightness_value)
}
inline bool NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_has_brightness_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_brightness_value_;
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_set_has_brightness_value(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_brightness_value_ = value;
}

// bool has_kelvin_value = 7;
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::clear_has_kelvin_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_kelvin_value_ = false;
}
inline bool NSPanelMQTTManagerCommand_FirstPageTurnLightOn::has_kelvin_value() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.has_kelvin_value)
  return _internal_has_kelvin_value();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::set_has_kelvin_value(bool value) {
  _internal_set_has_kelvin_value(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.FirstPageTurnLightOn.has_kelvin_value)
}
inline bool NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_has_kelvin_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_kelvin_value_;
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_internal_set_has_kelvin_value(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_kelvin_value_ = value;
}

// -------------------------------------------------------------------

// NSPanelMQTTManagerCommand_FirstPageTurnLightOff

// .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::clear_affect_lights() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.affect_lights_ = 0;
}
inline ::NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand_FirstPageTurnLightOff::affect_lights() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.FirstPageTurnLightOff.affect_lights)
  return _internal_affect_lights();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::set_affect_lights(::NSPanelMQTTManagerCommand_AffectLightsOptions value) {
  _internal_set_affect_lights(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.FirstPageTurnLightOff.affect_lights)
}
inline ::NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand_FirstPageTurnLightOff::_internal_affect_lights() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelMQTTManagerCommand_AffectLightsOptions>(_impl_.affect_lights_);
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::_internal_set_affect_lights(::NSPanelMQTTManagerCommand_AffectLightsOptions value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.affect_lights_ = value;
}

// bool global = 2;
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::clear_global() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_ = false;
}
inline bool NSPanelMQTTManagerCommand_FirstPageTurnLightOff::global() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.FirstPageTurnLightOff.global)
  return _internal_global();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::set_global(bool value) {
  _internal_set_global(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.FirstPageTurnLightOff.global)
}
inline bool NSPanelMQTTManagerCommand_FirstPageTurnLightOff::_internal_global() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.global_;
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::_internal_set_global(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_ = value;
}

// -------------------------------------------------------------------

// NSPanelMQTTManagerCommand_LightCommand

// repeated int32 light_ids = 1;
inline int NSPanelMQTTManagerCommand_LightCommand::_internal_light_ids_size() const {
  return _internal_light_ids().size();
}
inline int NSPanelMQTTManagerCommand_LightCommand::light_ids_size() const {
  return _internal_light_ids_size();
}
inline void NSPanelMQTTManagerCommand_LightCommand::clear_light_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.light_ids_.Clear();
}
inline ::int32_t NSPanelMQTTManagerCommand_LightCommand::light_ids(int index) const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.LightCommand.light_ids)
  return _internal_light_ids().Get(index);
}
inline void NSPanelMQTTManagerCommand_LightCommand::set_light_ids(int index, ::int32_t value) {
  _internal_mutable_light_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.LightCommand.light_ids)
}
inline void NSPanelMQTTManagerCommand_LightCommand::add_light_ids(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_light_ids()->Add(value);
  // @@protoc_insertion_point(field_add:NSPanelMQTTManagerCommand.LightCommand.light_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NSPanelMQTTManagerCommand_LightCommand::light_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelMQTTManagerCommand.LightCommand.light_ids)
  return _internal_light_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelMQTTManagerCommand_LightCommand::mutable_light_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelMQTTManagerCommand.LightCommand.light_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_light_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NSPanelMQTTManagerCommand_LightCommand::_internal_light_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.light_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelMQTTManagerCommand_LightCommand::_internal_mutable_light_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.light_ids_;
}

// bool has_brightness = 2;
inline void NSPanelMQTTManagerCommand_LightCommand::clear_has_brightness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_brightness_ = false;
}
inline bool NSPanelMQTTManagerCommand_LightCommand::has_brightness() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.LightCommand.has_brightness)
  return _internal_has_brightness();
}
inline void NSPanelMQTTManagerCommand_LightCommand::set_has_brightness(bool value) {
  _internal_set_has_brightness(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.LightCommand.has_brightness)
}
inline bool NSPanelMQTTManagerCommand_LightCommand::_internal_has_brightness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_brightness_;
}
inline void NSPanelMQTTManagerCommand_LightCommand::_internal_set_has_brightness(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_brightness_ = value;
}

// int32 brightness = 3;
inline void NSPanelMQTTManagerCommand_LightCommand::clear_brightness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brightness_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_LightCommand::brightness() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.LightCommand.brightness)
  return _internal_brightness();
}
inline void NSPanelMQTTManagerCommand_LightCommand::set_brightness(::int32_t value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.LightCommand.brightness)
}
inline ::int32_t NSPanelMQTTManagerCommand_LightCommand::_internal_brightness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brightness_;
}
inline void NSPanelMQTTManagerCommand_LightCommand::_internal_set_brightness(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brightness_ = value;
}

// bool has_color_temperature = 4;
inline void NSPanelMQTTManagerCommand_LightCommand::clear_has_color_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_color_temperature_ = false;
}
inline bool NSPanelMQTTManagerCommand_LightCommand::has_color_temperature() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.LightCommand.has_color_temperature)
  return _internal_has_color_temperature();
}
inline void NSPanelMQTTManagerCommand_LightCommand::set_has_color_temperature(bool value) {
  _internal_set_has_color_temperature(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.LightCommand.has_color_temperature)
}
inline bool NSPanelMQTTManagerCommand_LightCommand::_internal_has_color_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_color_temperature_;
}
inline void NSPanelMQTTManagerCommand_LightCommand::_internal_set_has_color_temperature(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_color_temperature_ = value;
}

// int32 color_temperature = 5;
inline void NSPanelMQTTManagerCommand_LightCommand::clear_color_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_temperature_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_LightCommand::color_temperature() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.LightCommand.color_temperature)
  return _internal_color_temperature();
}
inline void NSPanelMQTTManagerCommand_LightCommand::set_color_temperature(::int32_t value) {
  _internal_set_color_temperature(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.LightCommand.color_temperature)
}
inline ::int32_t NSPanelMQTTManagerCommand_LightCommand::_internal_color_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.color_temperature_;
}
inline void NSPanelMQTTManagerCommand_LightCommand::_internal_set_color_temperature(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_temperature_ = value;
}

// bool has_hue = 6;
inline void NSPanelMQTTManagerCommand_LightCommand::clear_has_hue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_hue_ = false;
}
inline bool NSPanelMQTTManagerCommand_LightCommand::has_hue() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.LightCommand.has_hue)
  return _internal_has_hue();
}
inline void NSPanelMQTTManagerCommand_LightCommand::set_has_hue(bool value) {
  _internal_set_has_hue(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.LightCommand.has_hue)
}
inline bool NSPanelMQTTManagerCommand_LightCommand::_internal_has_hue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_hue_;
}
inline void NSPanelMQTTManagerCommand_LightCommand::_internal_set_has_hue(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_hue_ = value;
}

// int32 hue = 7;
inline void NSPanelMQTTManagerCommand_LightCommand::clear_hue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hue_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_LightCommand::hue() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.LightCommand.hue)
  return _internal_hue();
}
inline void NSPanelMQTTManagerCommand_LightCommand::set_hue(::int32_t value) {
  _internal_set_hue(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.LightCommand.hue)
}
inline ::int32_t NSPanelMQTTManagerCommand_LightCommand::_internal_hue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hue_;
}
inline void NSPanelMQTTManagerCommand_LightCommand::_internal_set_hue(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hue_ = value;
}

// bool has_saturation = 8;
inline void NSPanelMQTTManagerCommand_LightCommand::clear_has_saturation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_saturation_ = false;
}
inline bool NSPanelMQTTManagerCommand_LightCommand::has_saturation() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.LightCommand.has_saturation)
  return _internal_has_saturation();
}
inline void NSPanelMQTTManagerCommand_LightCommand::set_has_saturation(bool value) {
  _internal_set_has_saturation(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.LightCommand.has_saturation)
}
inline bool NSPanelMQTTManagerCommand_LightCommand::_internal_has_saturation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_saturation_;
}
inline void NSPanelMQTTManagerCommand_LightCommand::_internal_set_has_saturation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_saturation_ = value;
}

// int32 saturation = 9;
inline void NSPanelMQTTManagerCommand_LightCommand::clear_saturation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturation_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_LightCommand::saturation() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.LightCommand.saturation)
  return _internal_saturation();
}
inline void NSPanelMQTTManagerCommand_LightCommand::set_saturation(::int32_t value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.LightCommand.saturation)
}
inline ::int32_t NSPanelMQTTManagerCommand_LightCommand::_internal_saturation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.saturation_;
}
inline void NSPanelMQTTManagerCommand_LightCommand::_internal_set_saturation(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturation_ = value;
}

// -------------------------------------------------------------------

// NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage

// int32 entity_page_id = 1;
inline void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::clear_entity_page_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_page_id_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::entity_page_id() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage.entity_page_id)
  return _internal_entity_page_id();
}
inline void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::set_entity_page_id(::int32_t value) {
  _internal_set_entity_page_id(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage.entity_page_id)
}
inline ::int32_t NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::_internal_entity_page_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_page_id_;
}
inline void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::_internal_set_entity_page_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_page_id_ = value;
}

// int32 entity_slot = 2;
inline void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::clear_entity_slot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_slot_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::entity_slot() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage.entity_slot)
  return _internal_entity_slot();
}
inline void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::set_entity_slot(::int32_t value) {
  _internal_set_entity_slot(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage.entity_slot)
}
inline ::int32_t NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::_internal_entity_slot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_slot_;
}
inline void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::_internal_set_entity_slot(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_slot_ = value;
}

// -------------------------------------------------------------------

// NSPanelMQTTManagerCommand_SaveSceneCommand

// int32 entity_page_id = 1;
inline void NSPanelMQTTManagerCommand_SaveSceneCommand::clear_entity_page_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_page_id_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_SaveSceneCommand::entity_page_id() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.SaveSceneCommand.entity_page_id)
  return _internal_entity_page_id();
}
inline void NSPanelMQTTManagerCommand_SaveSceneCommand::set_entity_page_id(::int32_t value) {
  _internal_set_entity_page_id(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.SaveSceneCommand.entity_page_id)
}
inline ::int32_t NSPanelMQTTManagerCommand_SaveSceneCommand::_internal_entity_page_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_page_id_;
}
inline void NSPanelMQTTManagerCommand_SaveSceneCommand::_internal_set_entity_page_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_page_id_ = value;
}

// int32 entity_slot = 2;
inline void NSPanelMQTTManagerCommand_SaveSceneCommand::clear_entity_slot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_slot_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_SaveSceneCommand::entity_slot() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.SaveSceneCommand.entity_slot)
  return _internal_entity_slot();
}
inline void NSPanelMQTTManagerCommand_SaveSceneCommand::set_entity_slot(::int32_t value) {
  _internal_set_entity_slot(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.SaveSceneCommand.entity_slot)
}
inline ::int32_t NSPanelMQTTManagerCommand_SaveSceneCommand::_internal_entity_slot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_slot_;
}
inline void NSPanelMQTTManagerCommand_SaveSceneCommand::_internal_set_entity_slot(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_slot_ = value;
}

// -------------------------------------------------------------------

// NSPanelMQTTManagerCommand_ButtonPressed

// int32 nspanel_id = 1;
inline void NSPanelMQTTManagerCommand_ButtonPressed::clear_nspanel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nspanel_id_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_ButtonPressed::nspanel_id() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.ButtonPressed.nspanel_id)
  return _internal_nspanel_id();
}
inline void NSPanelMQTTManagerCommand_ButtonPressed::set_nspanel_id(::int32_t value) {
  _internal_set_nspanel_id(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.ButtonPressed.nspanel_id)
}
inline ::int32_t NSPanelMQTTManagerCommand_ButtonPressed::_internal_nspanel_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nspanel_id_;
}
inline void NSPanelMQTTManagerCommand_ButtonPressed::_internal_set_nspanel_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nspanel_id_ = value;
}

// int32 button_id = 2;
inline void NSPanelMQTTManagerCommand_ButtonPressed::clear_button_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_id_ = 0;
}
inline ::int32_t NSPanelMQTTManagerCommand_ButtonPressed::button_id() const {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.ButtonPressed.button_id)
  return _internal_button_id();
}
inline void NSPanelMQTTManagerCommand_ButtonPressed::set_button_id(::int32_t value) {
  _internal_set_button_id(value);
  // @@protoc_insertion_point(field_set:NSPanelMQTTManagerCommand.ButtonPressed.button_id)
}
inline ::int32_t NSPanelMQTTManagerCommand_ButtonPressed::_internal_button_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button_id_;
}
inline void NSPanelMQTTManagerCommand_ButtonPressed::_internal_set_button_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_id_ = value;
}

// -------------------------------------------------------------------

// NSPanelMQTTManagerCommand

// .NSPanelMQTTManagerCommand.FirstPageTurnLightOn first_page_turn_on = 1;
inline bool NSPanelMQTTManagerCommand::has_first_page_turn_on() const {
  return CommandData_case() == kFirstPageTurnOn;
}
inline bool NSPanelMQTTManagerCommand::_internal_has_first_page_turn_on() const {
  return CommandData_case() == kFirstPageTurnOn;
}
inline void NSPanelMQTTManagerCommand::set_has_first_page_turn_on() {
  _impl_._oneof_case_[0] = kFirstPageTurnOn;
}
inline void NSPanelMQTTManagerCommand::clear_first_page_turn_on() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (CommandData_case() == kFirstPageTurnOn) {
    if (GetArena() == nullptr) {
      delete _impl_.CommandData_.first_page_turn_on_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.first_page_turn_on_);
    }
    clear_has_CommandData();
  }
}
inline ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* NSPanelMQTTManagerCommand::release_first_page_turn_on() {
  // @@protoc_insertion_point(field_release:NSPanelMQTTManagerCommand.first_page_turn_on)
  if (CommandData_case() == kFirstPageTurnOn) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.first_page_turn_on_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.CommandData_.first_page_turn_on_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn& NSPanelMQTTManagerCommand::_internal_first_page_turn_on() const {
  return CommandData_case() == kFirstPageTurnOn ? *_impl_.CommandData_.first_page_turn_on_ : reinterpret_cast<::NSPanelMQTTManagerCommand_FirstPageTurnLightOn&>(::_NSPanelMQTTManagerCommand_FirstPageTurnLightOn_default_instance_);
}
inline const ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn& NSPanelMQTTManagerCommand::first_page_turn_on() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.first_page_turn_on)
  return _internal_first_page_turn_on();
}
inline ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* NSPanelMQTTManagerCommand::unsafe_arena_release_first_page_turn_on() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NSPanelMQTTManagerCommand.first_page_turn_on)
  if (CommandData_case() == kFirstPageTurnOn) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.first_page_turn_on_;
    _impl_.CommandData_.first_page_turn_on_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NSPanelMQTTManagerCommand::unsafe_arena_set_allocated_first_page_turn_on(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_CommandData();
  if (value) {
    set_has_first_page_turn_on();
    _impl_.CommandData_.first_page_turn_on_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NSPanelMQTTManagerCommand.first_page_turn_on)
}
inline ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* NSPanelMQTTManagerCommand::_internal_mutable_first_page_turn_on() {
  if (CommandData_case() != kFirstPageTurnOn) {
    clear_CommandData();
    set_has_first_page_turn_on();
    _impl_.CommandData_.first_page_turn_on_ =
        ::google::protobuf::Message::DefaultConstruct<::NSPanelMQTTManagerCommand_FirstPageTurnLightOn>(GetArena());
  }
  return _impl_.CommandData_.first_page_turn_on_;
}
inline ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* NSPanelMQTTManagerCommand::mutable_first_page_turn_on() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* _msg = _internal_mutable_first_page_turn_on();
  // @@protoc_insertion_point(field_mutable:NSPanelMQTTManagerCommand.first_page_turn_on)
  return _msg;
}

// .NSPanelMQTTManagerCommand.FirstPageTurnLightOff first_page_turn_off = 2;
inline bool NSPanelMQTTManagerCommand::has_first_page_turn_off() const {
  return CommandData_case() == kFirstPageTurnOff;
}
inline bool NSPanelMQTTManagerCommand::_internal_has_first_page_turn_off() const {
  return CommandData_case() == kFirstPageTurnOff;
}
inline void NSPanelMQTTManagerCommand::set_has_first_page_turn_off() {
  _impl_._oneof_case_[0] = kFirstPageTurnOff;
}
inline void NSPanelMQTTManagerCommand::clear_first_page_turn_off() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (CommandData_case() == kFirstPageTurnOff) {
    if (GetArena() == nullptr) {
      delete _impl_.CommandData_.first_page_turn_off_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.first_page_turn_off_);
    }
    clear_has_CommandData();
  }
}
inline ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* NSPanelMQTTManagerCommand::release_first_page_turn_off() {
  // @@protoc_insertion_point(field_release:NSPanelMQTTManagerCommand.first_page_turn_off)
  if (CommandData_case() == kFirstPageTurnOff) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.first_page_turn_off_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.CommandData_.first_page_turn_off_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff& NSPanelMQTTManagerCommand::_internal_first_page_turn_off() const {
  return CommandData_case() == kFirstPageTurnOff ? *_impl_.CommandData_.first_page_turn_off_ : reinterpret_cast<::NSPanelMQTTManagerCommand_FirstPageTurnLightOff&>(::_NSPanelMQTTManagerCommand_FirstPageTurnLightOff_default_instance_);
}
inline const ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff& NSPanelMQTTManagerCommand::first_page_turn_off() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.first_page_turn_off)
  return _internal_first_page_turn_off();
}
inline ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* NSPanelMQTTManagerCommand::unsafe_arena_release_first_page_turn_off() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NSPanelMQTTManagerCommand.first_page_turn_off)
  if (CommandData_case() == kFirstPageTurnOff) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.first_page_turn_off_;
    _impl_.CommandData_.first_page_turn_off_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NSPanelMQTTManagerCommand::unsafe_arena_set_allocated_first_page_turn_off(::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_CommandData();
  if (value) {
    set_has_first_page_turn_off();
    _impl_.CommandData_.first_page_turn_off_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NSPanelMQTTManagerCommand.first_page_turn_off)
}
inline ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* NSPanelMQTTManagerCommand::_internal_mutable_first_page_turn_off() {
  if (CommandData_case() != kFirstPageTurnOff) {
    clear_CommandData();
    set_has_first_page_turn_off();
    _impl_.CommandData_.first_page_turn_off_ =
        ::google::protobuf::Message::DefaultConstruct<::NSPanelMQTTManagerCommand_FirstPageTurnLightOff>(GetArena());
  }
  return _impl_.CommandData_.first_page_turn_off_;
}
inline ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* NSPanelMQTTManagerCommand::mutable_first_page_turn_off() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* _msg = _internal_mutable_first_page_turn_off();
  // @@protoc_insertion_point(field_mutable:NSPanelMQTTManagerCommand.first_page_turn_off)
  return _msg;
}

// .NSPanelMQTTManagerCommand.LightCommand light_command = 3;
inline bool NSPanelMQTTManagerCommand::has_light_command() const {
  return CommandData_case() == kLightCommand;
}
inline bool NSPanelMQTTManagerCommand::_internal_has_light_command() const {
  return CommandData_case() == kLightCommand;
}
inline void NSPanelMQTTManagerCommand::set_has_light_command() {
  _impl_._oneof_case_[0] = kLightCommand;
}
inline void NSPanelMQTTManagerCommand::clear_light_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (CommandData_case() == kLightCommand) {
    if (GetArena() == nullptr) {
      delete _impl_.CommandData_.light_command_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.light_command_);
    }
    clear_has_CommandData();
  }
}
inline ::NSPanelMQTTManagerCommand_LightCommand* NSPanelMQTTManagerCommand::release_light_command() {
  // @@protoc_insertion_point(field_release:NSPanelMQTTManagerCommand.light_command)
  if (CommandData_case() == kLightCommand) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.light_command_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.CommandData_.light_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NSPanelMQTTManagerCommand_LightCommand& NSPanelMQTTManagerCommand::_internal_light_command() const {
  return CommandData_case() == kLightCommand ? *_impl_.CommandData_.light_command_ : reinterpret_cast<::NSPanelMQTTManagerCommand_LightCommand&>(::_NSPanelMQTTManagerCommand_LightCommand_default_instance_);
}
inline const ::NSPanelMQTTManagerCommand_LightCommand& NSPanelMQTTManagerCommand::light_command() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.light_command)
  return _internal_light_command();
}
inline ::NSPanelMQTTManagerCommand_LightCommand* NSPanelMQTTManagerCommand::unsafe_arena_release_light_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NSPanelMQTTManagerCommand.light_command)
  if (CommandData_case() == kLightCommand) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.light_command_;
    _impl_.CommandData_.light_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NSPanelMQTTManagerCommand::unsafe_arena_set_allocated_light_command(::NSPanelMQTTManagerCommand_LightCommand* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_CommandData();
  if (value) {
    set_has_light_command();
    _impl_.CommandData_.light_command_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NSPanelMQTTManagerCommand.light_command)
}
inline ::NSPanelMQTTManagerCommand_LightCommand* NSPanelMQTTManagerCommand::_internal_mutable_light_command() {
  if (CommandData_case() != kLightCommand) {
    clear_CommandData();
    set_has_light_command();
    _impl_.CommandData_.light_command_ =
        ::google::protobuf::Message::DefaultConstruct<::NSPanelMQTTManagerCommand_LightCommand>(GetArena());
  }
  return _impl_.CommandData_.light_command_;
}
inline ::NSPanelMQTTManagerCommand_LightCommand* NSPanelMQTTManagerCommand::mutable_light_command() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NSPanelMQTTManagerCommand_LightCommand* _msg = _internal_mutable_light_command();
  // @@protoc_insertion_point(field_mutable:NSPanelMQTTManagerCommand.light_command)
  return _msg;
}

// .NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage toggle_entity_from_entities_page = 4;
inline bool NSPanelMQTTManagerCommand::has_toggle_entity_from_entities_page() const {
  return CommandData_case() == kToggleEntityFromEntitiesPage;
}
inline bool NSPanelMQTTManagerCommand::_internal_has_toggle_entity_from_entities_page() const {
  return CommandData_case() == kToggleEntityFromEntitiesPage;
}
inline void NSPanelMQTTManagerCommand::set_has_toggle_entity_from_entities_page() {
  _impl_._oneof_case_[0] = kToggleEntityFromEntitiesPage;
}
inline void NSPanelMQTTManagerCommand::clear_toggle_entity_from_entities_page() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (CommandData_case() == kToggleEntityFromEntitiesPage) {
    if (GetArena() == nullptr) {
      delete _impl_.CommandData_.toggle_entity_from_entities_page_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.toggle_entity_from_entities_page_);
    }
    clear_has_CommandData();
  }
}
inline ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* NSPanelMQTTManagerCommand::release_toggle_entity_from_entities_page() {
  // @@protoc_insertion_point(field_release:NSPanelMQTTManagerCommand.toggle_entity_from_entities_page)
  if (CommandData_case() == kToggleEntityFromEntitiesPage) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.toggle_entity_from_entities_page_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.CommandData_.toggle_entity_from_entities_page_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& NSPanelMQTTManagerCommand::_internal_toggle_entity_from_entities_page() const {
  return CommandData_case() == kToggleEntityFromEntitiesPage ? *_impl_.CommandData_.toggle_entity_from_entities_page_ : reinterpret_cast<::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage&>(::_NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage_default_instance_);
}
inline const ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& NSPanelMQTTManagerCommand::toggle_entity_from_entities_page() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.toggle_entity_from_entities_page)
  return _internal_toggle_entity_from_entities_page();
}
inline ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* NSPanelMQTTManagerCommand::unsafe_arena_release_toggle_entity_from_entities_page() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NSPanelMQTTManagerCommand.toggle_entity_from_entities_page)
  if (CommandData_case() == kToggleEntityFromEntitiesPage) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.toggle_entity_from_entities_page_;
    _impl_.CommandData_.toggle_entity_from_entities_page_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NSPanelMQTTManagerCommand::unsafe_arena_set_allocated_toggle_entity_from_entities_page(::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_CommandData();
  if (value) {
    set_has_toggle_entity_from_entities_page();
    _impl_.CommandData_.toggle_entity_from_entities_page_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NSPanelMQTTManagerCommand.toggle_entity_from_entities_page)
}
inline ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* NSPanelMQTTManagerCommand::_internal_mutable_toggle_entity_from_entities_page() {
  if (CommandData_case() != kToggleEntityFromEntitiesPage) {
    clear_CommandData();
    set_has_toggle_entity_from_entities_page();
    _impl_.CommandData_.toggle_entity_from_entities_page_ =
        ::google::protobuf::Message::DefaultConstruct<::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage>(GetArena());
  }
  return _impl_.CommandData_.toggle_entity_from_entities_page_;
}
inline ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* NSPanelMQTTManagerCommand::mutable_toggle_entity_from_entities_page() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* _msg = _internal_mutable_toggle_entity_from_entities_page();
  // @@protoc_insertion_point(field_mutable:NSPanelMQTTManagerCommand.toggle_entity_from_entities_page)
  return _msg;
}

// .NSPanelMQTTManagerCommand.SaveSceneCommand save_scene_command = 5;
inline bool NSPanelMQTTManagerCommand::has_save_scene_command() const {
  return CommandData_case() == kSaveSceneCommand;
}
inline bool NSPanelMQTTManagerCommand::_internal_has_save_scene_command() const {
  return CommandData_case() == kSaveSceneCommand;
}
inline void NSPanelMQTTManagerCommand::set_has_save_scene_command() {
  _impl_._oneof_case_[0] = kSaveSceneCommand;
}
inline void NSPanelMQTTManagerCommand::clear_save_scene_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (CommandData_case() == kSaveSceneCommand) {
    if (GetArena() == nullptr) {
      delete _impl_.CommandData_.save_scene_command_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.save_scene_command_);
    }
    clear_has_CommandData();
  }
}
inline ::NSPanelMQTTManagerCommand_SaveSceneCommand* NSPanelMQTTManagerCommand::release_save_scene_command() {
  // @@protoc_insertion_point(field_release:NSPanelMQTTManagerCommand.save_scene_command)
  if (CommandData_case() == kSaveSceneCommand) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.save_scene_command_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.CommandData_.save_scene_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NSPanelMQTTManagerCommand_SaveSceneCommand& NSPanelMQTTManagerCommand::_internal_save_scene_command() const {
  return CommandData_case() == kSaveSceneCommand ? *_impl_.CommandData_.save_scene_command_ : reinterpret_cast<::NSPanelMQTTManagerCommand_SaveSceneCommand&>(::_NSPanelMQTTManagerCommand_SaveSceneCommand_default_instance_);
}
inline const ::NSPanelMQTTManagerCommand_SaveSceneCommand& NSPanelMQTTManagerCommand::save_scene_command() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.save_scene_command)
  return _internal_save_scene_command();
}
inline ::NSPanelMQTTManagerCommand_SaveSceneCommand* NSPanelMQTTManagerCommand::unsafe_arena_release_save_scene_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NSPanelMQTTManagerCommand.save_scene_command)
  if (CommandData_case() == kSaveSceneCommand) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.save_scene_command_;
    _impl_.CommandData_.save_scene_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NSPanelMQTTManagerCommand::unsafe_arena_set_allocated_save_scene_command(::NSPanelMQTTManagerCommand_SaveSceneCommand* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_CommandData();
  if (value) {
    set_has_save_scene_command();
    _impl_.CommandData_.save_scene_command_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NSPanelMQTTManagerCommand.save_scene_command)
}
inline ::NSPanelMQTTManagerCommand_SaveSceneCommand* NSPanelMQTTManagerCommand::_internal_mutable_save_scene_command() {
  if (CommandData_case() != kSaveSceneCommand) {
    clear_CommandData();
    set_has_save_scene_command();
    _impl_.CommandData_.save_scene_command_ =
        ::google::protobuf::Message::DefaultConstruct<::NSPanelMQTTManagerCommand_SaveSceneCommand>(GetArena());
  }
  return _impl_.CommandData_.save_scene_command_;
}
inline ::NSPanelMQTTManagerCommand_SaveSceneCommand* NSPanelMQTTManagerCommand::mutable_save_scene_command() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NSPanelMQTTManagerCommand_SaveSceneCommand* _msg = _internal_mutable_save_scene_command();
  // @@protoc_insertion_point(field_mutable:NSPanelMQTTManagerCommand.save_scene_command)
  return _msg;
}

// .NSPanelMQTTManagerCommand.ButtonPressed button_pressed = 6;
inline bool NSPanelMQTTManagerCommand::has_button_pressed() const {
  return CommandData_case() == kButtonPressed;
}
inline bool NSPanelMQTTManagerCommand::_internal_has_button_pressed() const {
  return CommandData_case() == kButtonPressed;
}
inline void NSPanelMQTTManagerCommand::set_has_button_pressed() {
  _impl_._oneof_case_[0] = kButtonPressed;
}
inline void NSPanelMQTTManagerCommand::clear_button_pressed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (CommandData_case() == kButtonPressed) {
    if (GetArena() == nullptr) {
      delete _impl_.CommandData_.button_pressed_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.button_pressed_);
    }
    clear_has_CommandData();
  }
}
inline ::NSPanelMQTTManagerCommand_ButtonPressed* NSPanelMQTTManagerCommand::release_button_pressed() {
  // @@protoc_insertion_point(field_release:NSPanelMQTTManagerCommand.button_pressed)
  if (CommandData_case() == kButtonPressed) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.button_pressed_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.CommandData_.button_pressed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NSPanelMQTTManagerCommand_ButtonPressed& NSPanelMQTTManagerCommand::_internal_button_pressed() const {
  return CommandData_case() == kButtonPressed ? *_impl_.CommandData_.button_pressed_ : reinterpret_cast<::NSPanelMQTTManagerCommand_ButtonPressed&>(::_NSPanelMQTTManagerCommand_ButtonPressed_default_instance_);
}
inline const ::NSPanelMQTTManagerCommand_ButtonPressed& NSPanelMQTTManagerCommand::button_pressed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelMQTTManagerCommand.button_pressed)
  return _internal_button_pressed();
}
inline ::NSPanelMQTTManagerCommand_ButtonPressed* NSPanelMQTTManagerCommand::unsafe_arena_release_button_pressed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NSPanelMQTTManagerCommand.button_pressed)
  if (CommandData_case() == kButtonPressed) {
    clear_has_CommandData();
    auto* temp = _impl_.CommandData_.button_pressed_;
    _impl_.CommandData_.button_pressed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NSPanelMQTTManagerCommand::unsafe_arena_set_allocated_button_pressed(::NSPanelMQTTManagerCommand_ButtonPressed* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_CommandData();
  if (value) {
    set_has_button_pressed();
    _impl_.CommandData_.button_pressed_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NSPanelMQTTManagerCommand.button_pressed)
}
inline ::NSPanelMQTTManagerCommand_ButtonPressed* NSPanelMQTTManagerCommand::_internal_mutable_button_pressed() {
  if (CommandData_case() != kButtonPressed) {
    clear_CommandData();
    set_has_button_pressed();
    _impl_.CommandData_.button_pressed_ =
        ::google::protobuf::Message::DefaultConstruct<::NSPanelMQTTManagerCommand_ButtonPressed>(GetArena());
  }
  return _impl_.CommandData_.button_pressed_;
}
inline ::NSPanelMQTTManagerCommand_ButtonPressed* NSPanelMQTTManagerCommand::mutable_button_pressed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NSPanelMQTTManagerCommand_ButtonPressed* _msg = _internal_mutable_button_pressed();
  // @@protoc_insertion_point(field_mutable:NSPanelMQTTManagerCommand.button_pressed)
  return _msg;
}

inline bool NSPanelMQTTManagerCommand::has_CommandData() const {
  return CommandData_case() != COMMANDDATA_NOT_SET;
}
inline void NSPanelMQTTManagerCommand::clear_has_CommandData() {
  _impl_._oneof_case_[0] = COMMANDDATA_NOT_SET;
}
inline NSPanelMQTTManagerCommand::CommandDataCase NSPanelMQTTManagerCommand::CommandData_case() const {
  return NSPanelMQTTManagerCommand::CommandDataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::NSPanelConfig_NSPanelDefaultPage> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelConfig_NSPanelDefaultPage>() {
  return ::NSPanelConfig_NSPanelDefaultPage_descriptor();
}
template <>
struct is_proto_enum<::NSPanelConfig_NSPanelScreensaverMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelConfig_NSPanelScreensaverMode>() {
  return ::NSPanelConfig_NSPanelScreensaverMode_descriptor();
}
template <>
struct is_proto_enum<::NSPanelConfig_NSPanelButtonMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelConfig_NSPanelButtonMode>() {
  return ::NSPanelConfig_NSPanelButtonMode_descriptor();
}
template <>
struct is_proto_enum<::NSPanelStatusReport_state> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelStatusReport_state>() {
  return ::NSPanelStatusReport_state_descriptor();
}
template <>
struct is_proto_enum<::NSPanelMQTTManagerCommand_AffectLightsOptions> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelMQTTManagerCommand_AffectLightsOptions>() {
  return ::NSPanelMQTTManagerCommand_AffectLightsOptions_descriptor();
}
template <>
struct is_proto_enum<::NSPanelWarningLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelWarningLevel>() {
  return ::NSPanelWarningLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protobuf_5fnspanel_2eproto_2epb_2eh
