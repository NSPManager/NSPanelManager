// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuf_nspanel.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_5fnspanel_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_5fnspanel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protobuf_5fnspanel_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_5fnspanel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protobuf_5fnspanel_2eproto;
class NSPanelLightStatus;
struct NSPanelLightStatusDefaultTypeInternal;
extern NSPanelLightStatusDefaultTypeInternal _NSPanelLightStatus_default_instance_;
class NSPanelRoomStatus;
struct NSPanelRoomStatusDefaultTypeInternal;
extern NSPanelRoomStatusDefaultTypeInternal _NSPanelRoomStatus_default_instance_;
class NSPanelStatusReport;
struct NSPanelStatusReportDefaultTypeInternal;
extern NSPanelStatusReportDefaultTypeInternal _NSPanelStatusReport_default_instance_;
class NSPanelStatusReport_NSPanelWarning;
struct NSPanelStatusReport_NSPanelWarningDefaultTypeInternal;
extern NSPanelStatusReport_NSPanelWarningDefaultTypeInternal _NSPanelStatusReport_NSPanelWarning_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel : int {
  NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_CRITICAL = 0,
  NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_ERROR = 1,
  NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_WARNING = 2,
  NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_INFO = 3,
  NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_DEBUG = 4,
  NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_TRACE = 5,
  NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_IsValid(int value);
extern const uint32_t NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_internal_data_[];
constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_NSPanelWarningLevel_MIN = static_cast<NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel>(0);
constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_NSPanelWarningLevel_MAX = static_cast<NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel>(5);
constexpr int NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_NSPanelWarningLevel_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_descriptor();
template <typename T>
const std::string& NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_Name(T value) {
  static_assert(std::is_same<T, NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NSPanelWarningLevel_Name().");
  return NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_Name(static_cast<NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel>(value));
}
template <>
inline const std::string& NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_Name(NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_Parse(absl::string_view name, NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel>(
      NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_descriptor(), name, value);
}
enum NSPanelStatusReport_state : int {
  NSPanelStatusReport_state_ONLINE = 0,
  NSPanelStatusReport_state_OFFLINE = 1,
  NSPanelStatusReport_state_UPDATING_TFT = 2,
  NSPanelStatusReport_state_UPDATING_FIRMWARE = 3,
  NSPanelStatusReport_state_UPDATING_LITTLEFS = 4,
  NSPanelStatusReport_state_NSPanelStatusReport_state_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelStatusReport_state_NSPanelStatusReport_state_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelStatusReport_state_IsValid(int value);
extern const uint32_t NSPanelStatusReport_state_internal_data_[];
constexpr NSPanelStatusReport_state NSPanelStatusReport_state_state_MIN = static_cast<NSPanelStatusReport_state>(0);
constexpr NSPanelStatusReport_state NSPanelStatusReport_state_state_MAX = static_cast<NSPanelStatusReport_state>(4);
constexpr int NSPanelStatusReport_state_state_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelStatusReport_state_descriptor();
template <typename T>
const std::string& NSPanelStatusReport_state_Name(T value) {
  static_assert(std::is_same<T, NSPanelStatusReport_state>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to state_Name().");
  return NSPanelStatusReport_state_Name(static_cast<NSPanelStatusReport_state>(value));
}
template <>
inline const std::string& NSPanelStatusReport_state_Name(NSPanelStatusReport_state value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelStatusReport_state_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool NSPanelStatusReport_state_Parse(absl::string_view name, NSPanelStatusReport_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelStatusReport_state>(
      NSPanelStatusReport_state_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class NSPanelStatusReport_NSPanelWarning final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelStatusReport.NSPanelWarning) */ {
 public:
  inline NSPanelStatusReport_NSPanelWarning() : NSPanelStatusReport_NSPanelWarning(nullptr) {}
  ~NSPanelStatusReport_NSPanelWarning() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelStatusReport_NSPanelWarning(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelStatusReport_NSPanelWarning(const NSPanelStatusReport_NSPanelWarning& from) : NSPanelStatusReport_NSPanelWarning(nullptr, from) {}
  inline NSPanelStatusReport_NSPanelWarning(NSPanelStatusReport_NSPanelWarning&& from) noexcept
      : NSPanelStatusReport_NSPanelWarning(nullptr, std::move(from)) {}
  inline NSPanelStatusReport_NSPanelWarning& operator=(const NSPanelStatusReport_NSPanelWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelStatusReport_NSPanelWarning& operator=(NSPanelStatusReport_NSPanelWarning&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelStatusReport_NSPanelWarning& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelStatusReport_NSPanelWarning* internal_default_instance() {
    return reinterpret_cast<const NSPanelStatusReport_NSPanelWarning*>(
        &_NSPanelStatusReport_NSPanelWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NSPanelStatusReport_NSPanelWarning& a, NSPanelStatusReport_NSPanelWarning& b) { a.Swap(&b); }
  inline void Swap(NSPanelStatusReport_NSPanelWarning* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelStatusReport_NSPanelWarning* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelStatusReport_NSPanelWarning* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelStatusReport_NSPanelWarning>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelStatusReport_NSPanelWarning& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelStatusReport_NSPanelWarning& from) { NSPanelStatusReport_NSPanelWarning::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelStatusReport_NSPanelWarning* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelStatusReport.NSPanelWarning"; }

 protected:
  explicit NSPanelStatusReport_NSPanelWarning(::google::protobuf::Arena* arena);
  NSPanelStatusReport_NSPanelWarning(::google::protobuf::Arena* arena, const NSPanelStatusReport_NSPanelWarning& from);
  NSPanelStatusReport_NSPanelWarning(::google::protobuf::Arena* arena, NSPanelStatusReport_NSPanelWarning&& from) noexcept
      : NSPanelStatusReport_NSPanelWarning(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using NSPanelWarningLevel = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel;
  static constexpr NSPanelWarningLevel CRITICAL = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_CRITICAL;
  static constexpr NSPanelWarningLevel ERROR = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_ERROR;
  static constexpr NSPanelWarningLevel WARNING = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_WARNING;
  static constexpr NSPanelWarningLevel INFO = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_INFO;
  static constexpr NSPanelWarningLevel DEBUG = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_DEBUG;
  static constexpr NSPanelWarningLevel TRACE = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_TRACE;
  static inline bool NSPanelWarningLevel_IsValid(int value) {
    return NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_IsValid(value);
  }
  static constexpr NSPanelWarningLevel NSPanelWarningLevel_MIN = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_NSPanelWarningLevel_MIN;
  static constexpr NSPanelWarningLevel NSPanelWarningLevel_MAX = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_NSPanelWarningLevel_MAX;
  static constexpr int NSPanelWarningLevel_ARRAYSIZE = NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_NSPanelWarningLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NSPanelWarningLevel_descriptor() {
    return NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_descriptor();
  }
  template <typename T>
  static inline const std::string& NSPanelWarningLevel_Name(T value) {
    return NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_Name(value);
  }
  static inline bool NSPanelWarningLevel_Parse(absl::string_view name, NSPanelWarningLevel* value) {
    return NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTextFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // .NSPanelStatusReport.NSPanelWarning.NSPanelWarningLevel level = 1;
  void clear_level() ;
  ::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel level() const;
  void set_level(::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel value);

  private:
  ::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel _internal_level() const;
  void _internal_set_level(::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelStatusReport.NSPanelWarning)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelStatusReport_NSPanelWarning_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelStatusReport_NSPanelWarning& from_msg);
    ::google::protobuf::internal::ArenaStringPtr text_;
    int level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelLightStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelLightStatus) */ {
 public:
  inline NSPanelLightStatus() : NSPanelLightStatus(nullptr) {}
  ~NSPanelLightStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelLightStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelLightStatus(const NSPanelLightStatus& from) : NSPanelLightStatus(nullptr, from) {}
  inline NSPanelLightStatus(NSPanelLightStatus&& from) noexcept
      : NSPanelLightStatus(nullptr, std::move(from)) {}
  inline NSPanelLightStatus& operator=(const NSPanelLightStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelLightStatus& operator=(NSPanelLightStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelLightStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelLightStatus* internal_default_instance() {
    return reinterpret_cast<const NSPanelLightStatus*>(
        &_NSPanelLightStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NSPanelLightStatus& a, NSPanelLightStatus& b) { a.Swap(&b); }
  inline void Swap(NSPanelLightStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelLightStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelLightStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelLightStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelLightStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelLightStatus& from) { NSPanelLightStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelLightStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelLightStatus"; }

 protected:
  explicit NSPanelLightStatus(::google::protobuf::Arena* arena);
  NSPanelLightStatus(::google::protobuf::Arena* arena, const NSPanelLightStatus& from);
  NSPanelLightStatus(::google::protobuf::Arena* arena, NSPanelLightStatus&& from) noexcept
      : NSPanelLightStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kCanDimFieldNumber = 3,
    kCanColorTemperatureFieldNumber = 4,
    kCanRgbFieldNumber = 5,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool can_dim = 3;
  void clear_can_dim() ;
  bool can_dim() const;
  void set_can_dim(bool value);

  private:
  bool _internal_can_dim() const;
  void _internal_set_can_dim(bool value);

  public:
  // bool can_color_temperature = 4;
  void clear_can_color_temperature() ;
  bool can_color_temperature() const;
  void set_can_color_temperature(bool value);

  private:
  bool _internal_can_color_temperature() const;
  void _internal_set_can_color_temperature(bool value);

  public:
  // bool can_rgb = 5;
  void clear_can_rgb() ;
  bool can_rgb() const;
  void set_can_rgb(bool value);

  private:
  bool _internal_can_rgb() const;
  void _internal_set_can_rgb(bool value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelLightStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      31, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelLightStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelLightStatus& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    bool can_dim_;
    bool can_color_temperature_;
    bool can_rgb_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelStatusReport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelStatusReport) */ {
 public:
  inline NSPanelStatusReport() : NSPanelStatusReport(nullptr) {}
  ~NSPanelStatusReport() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelStatusReport(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelStatusReport(const NSPanelStatusReport& from) : NSPanelStatusReport(nullptr, from) {}
  inline NSPanelStatusReport(NSPanelStatusReport&& from) noexcept
      : NSPanelStatusReport(nullptr, std::move(from)) {}
  inline NSPanelStatusReport& operator=(const NSPanelStatusReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelStatusReport& operator=(NSPanelStatusReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelStatusReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelStatusReport* internal_default_instance() {
    return reinterpret_cast<const NSPanelStatusReport*>(
        &_NSPanelStatusReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NSPanelStatusReport& a, NSPanelStatusReport& b) { a.Swap(&b); }
  inline void Swap(NSPanelStatusReport* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelStatusReport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelStatusReport* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelStatusReport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelStatusReport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelStatusReport& from) { NSPanelStatusReport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelStatusReport* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelStatusReport"; }

 protected:
  explicit NSPanelStatusReport(::google::protobuf::Arena* arena);
  NSPanelStatusReport(::google::protobuf::Arena* arena, const NSPanelStatusReport& from);
  NSPanelStatusReport(::google::protobuf::Arena* arena, NSPanelStatusReport&& from) noexcept
      : NSPanelStatusReport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using NSPanelWarning = NSPanelStatusReport_NSPanelWarning;
  using state = NSPanelStatusReport_state;
  static constexpr state ONLINE = NSPanelStatusReport_state_ONLINE;
  static constexpr state OFFLINE = NSPanelStatusReport_state_OFFLINE;
  static constexpr state UPDATING_TFT = NSPanelStatusReport_state_UPDATING_TFT;
  static constexpr state UPDATING_FIRMWARE = NSPanelStatusReport_state_UPDATING_FIRMWARE;
  static constexpr state UPDATING_LITTLEFS = NSPanelStatusReport_state_UPDATING_LITTLEFS;
  static inline bool state_IsValid(int value) {
    return NSPanelStatusReport_state_IsValid(value);
  }
  static constexpr state state_MIN = NSPanelStatusReport_state_state_MIN;
  static constexpr state state_MAX = NSPanelStatusReport_state_state_MAX;
  static constexpr int state_ARRAYSIZE = NSPanelStatusReport_state_state_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* state_descriptor() {
    return NSPanelStatusReport_state_descriptor();
  }
  template <typename T>
  static inline const std::string& state_Name(T value) {
    return NSPanelStatusReport_state_Name(value);
  }
  static inline bool state_Parse(absl::string_view name, state* value) {
    return NSPanelStatusReport_state_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kWarningsFieldNumber = 8,
    kMacAddressFieldNumber = 5,
    kTemperatureFieldNumber = 6,
    kIpAddressFieldNumber = 7,
    kNspanelStateFieldNumber = 1,
    kUpdateProgressFieldNumber = 2,
    kRssiFieldNumber = 3,
    kHeapUsedPctFieldNumber = 4,
  };
  // repeated .NSPanelStatusReport.NSPanelWarning warnings = 8;
  int warnings_size() const;
  private:
  int _internal_warnings_size() const;

  public:
  void clear_warnings() ;
  ::NSPanelStatusReport_NSPanelWarning* mutable_warnings(int index);
  ::google::protobuf::RepeatedPtrField<::NSPanelStatusReport_NSPanelWarning>* mutable_warnings();

  private:
  const ::google::protobuf::RepeatedPtrField<::NSPanelStatusReport_NSPanelWarning>& _internal_warnings() const;
  ::google::protobuf::RepeatedPtrField<::NSPanelStatusReport_NSPanelWarning>* _internal_mutable_warnings();
  public:
  const ::NSPanelStatusReport_NSPanelWarning& warnings(int index) const;
  ::NSPanelStatusReport_NSPanelWarning* add_warnings();
  const ::google::protobuf::RepeatedPtrField<::NSPanelStatusReport_NSPanelWarning>& warnings() const;
  // string mac_address = 5;
  void clear_mac_address() ;
  const std::string& mac_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mac_address(Arg_&& arg, Args_... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* value);

  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(
      const std::string& value);
  std::string* _internal_mutable_mac_address();

  public:
  // string temperature = 6;
  void clear_temperature() ;
  const std::string& temperature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_temperature(Arg_&& arg, Args_... args);
  std::string* mutable_temperature();
  PROTOBUF_NODISCARD std::string* release_temperature();
  void set_allocated_temperature(std::string* value);

  private:
  const std::string& _internal_temperature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_temperature(
      const std::string& value);
  std::string* _internal_mutable_temperature();

  public:
  // string ip_address = 7;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* value);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // .NSPanelStatusReport.state nspanel_state = 1;
  void clear_nspanel_state() ;
  ::NSPanelStatusReport_state nspanel_state() const;
  void set_nspanel_state(::NSPanelStatusReport_state value);

  private:
  ::NSPanelStatusReport_state _internal_nspanel_state() const;
  void _internal_set_nspanel_state(::NSPanelStatusReport_state value);

  public:
  // optional int32 update_progress = 2;
  bool has_update_progress() const;
  void clear_update_progress() ;
  ::int32_t update_progress() const;
  void set_update_progress(::int32_t value);

  private:
  ::int32_t _internal_update_progress() const;
  void _internal_set_update_progress(::int32_t value);

  public:
  // int32 rssi = 3;
  void clear_rssi() ;
  ::int32_t rssi() const;
  void set_rssi(::int32_t value);

  private:
  ::int32_t _internal_rssi() const;
  void _internal_set_rssi(::int32_t value);

  public:
  // int32 heap_used_pct = 4;
  void clear_heap_used_pct() ;
  ::int32_t heap_used_pct() const;
  void set_heap_used_pct(::int32_t value);

  private:
  ::int32_t _internal_heap_used_pct() const;
  void _internal_set_heap_used_pct(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelStatusReport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      68, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelStatusReport_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelStatusReport& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::NSPanelStatusReport_NSPanelWarning > warnings_;
    ::google::protobuf::internal::ArenaStringPtr mac_address_;
    ::google::protobuf::internal::ArenaStringPtr temperature_;
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    int nspanel_state_;
    ::int32_t update_progress_;
    ::int32_t rssi_;
    ::int32_t heap_used_pct_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};
// -------------------------------------------------------------------

class NSPanelRoomStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelRoomStatus) */ {
 public:
  inline NSPanelRoomStatus() : NSPanelRoomStatus(nullptr) {}
  ~NSPanelRoomStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelRoomStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelRoomStatus(const NSPanelRoomStatus& from) : NSPanelRoomStatus(nullptr, from) {}
  inline NSPanelRoomStatus(NSPanelRoomStatus&& from) noexcept
      : NSPanelRoomStatus(nullptr, std::move(from)) {}
  inline NSPanelRoomStatus& operator=(const NSPanelRoomStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelRoomStatus& operator=(NSPanelRoomStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelRoomStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelRoomStatus* internal_default_instance() {
    return reinterpret_cast<const NSPanelRoomStatus*>(
        &_NSPanelRoomStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(NSPanelRoomStatus& a, NSPanelRoomStatus& b) { a.Swap(&b); }
  inline void Swap(NSPanelRoomStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelRoomStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelRoomStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelRoomStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelRoomStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelRoomStatus& from) { NSPanelRoomStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelRoomStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelRoomStatus"; }

 protected:
  explicit NSPanelRoomStatus(::google::protobuf::Arena* arena);
  NSPanelRoomStatus(::google::protobuf::Arena* arena, const NSPanelRoomStatus& from);
  NSPanelRoomStatus(::google::protobuf::Arena* arena, NSPanelRoomStatus&& from) noexcept
      : NSPanelRoomStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLightsFieldNumber = 6,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kAverageDimLevelFieldNumber = 3,
    kCeilingLightsDimLevelFieldNumber = 4,
    kTableLightsDimLevelFieldNumber = 5,
  };
  // repeated .NSPanelLightStatus lights = 6;
  int lights_size() const;
  private:
  int _internal_lights_size() const;

  public:
  void clear_lights() ;
  ::NSPanelLightStatus* mutable_lights(int index);
  ::google::protobuf::RepeatedPtrField<::NSPanelLightStatus>* mutable_lights();

  private:
  const ::google::protobuf::RepeatedPtrField<::NSPanelLightStatus>& _internal_lights() const;
  ::google::protobuf::RepeatedPtrField<::NSPanelLightStatus>* _internal_mutable_lights();
  public:
  const ::NSPanelLightStatus& lights(int index) const;
  ::NSPanelLightStatus* add_lights();
  const ::google::protobuf::RepeatedPtrField<::NSPanelLightStatus>& lights() const;
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 average_dim_level = 3;
  void clear_average_dim_level() ;
  ::int32_t average_dim_level() const;
  void set_average_dim_level(::int32_t value);

  private:
  ::int32_t _internal_average_dim_level() const;
  void _internal_set_average_dim_level(::int32_t value);

  public:
  // int32 ceiling_lights_dim_level = 4;
  void clear_ceiling_lights_dim_level() ;
  ::int32_t ceiling_lights_dim_level() const;
  void set_ceiling_lights_dim_level(::int32_t value);

  private:
  ::int32_t _internal_ceiling_lights_dim_level() const;
  void _internal_set_ceiling_lights_dim_level(::int32_t value);

  public:
  // int32 table_lights_dim_level = 5;
  void clear_table_lights_dim_level() ;
  ::int32_t table_lights_dim_level() const;
  void set_table_lights_dim_level(::int32_t value);

  private:
  ::int32_t _internal_table_lights_dim_level() const;
  void _internal_set_table_lights_dim_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelRoomStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      30, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelRoomStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelRoomStatus& from_msg);
    ::google::protobuf::RepeatedPtrField< ::NSPanelLightStatus > lights_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    ::int32_t average_dim_level_;
    ::int32_t ceiling_lights_dim_level_;
    ::int32_t table_lights_dim_level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fnspanel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NSPanelStatusReport_NSPanelWarning

// .NSPanelStatusReport.NSPanelWarning.NSPanelWarningLevel level = 1;
inline void NSPanelStatusReport_NSPanelWarning::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0;
}
inline ::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::level() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.NSPanelWarning.level)
  return _internal_level();
}
inline void NSPanelStatusReport_NSPanelWarning::set_level(::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.NSPanelWarning.level)
}
inline ::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel>(_impl_.level_);
}
inline void NSPanelStatusReport_NSPanelWarning::_internal_set_level(::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// string text = 2;
inline void NSPanelStatusReport_NSPanelWarning::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& NSPanelStatusReport_NSPanelWarning::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.NSPanelWarning.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelStatusReport_NSPanelWarning::set_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.NSPanelWarning.text)
}
inline std::string* NSPanelStatusReport_NSPanelWarning::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:NSPanelStatusReport.NSPanelWarning.text)
  return _s;
}
inline const std::string& NSPanelStatusReport_NSPanelWarning::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_.Get();
}
inline void NSPanelStatusReport_NSPanelWarning::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(value, GetArena());
}
inline std::string* NSPanelStatusReport_NSPanelWarning::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* NSPanelStatusReport_NSPanelWarning::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelStatusReport.NSPanelWarning.text)
  return _impl_.text_.Release();
}
inline void NSPanelStatusReport_NSPanelWarning::set_allocated_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelStatusReport.NSPanelWarning.text)
}

// -------------------------------------------------------------------

// NSPanelStatusReport

// .NSPanelStatusReport.state nspanel_state = 1;
inline void NSPanelStatusReport::clear_nspanel_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nspanel_state_ = 0;
}
inline ::NSPanelStatusReport_state NSPanelStatusReport::nspanel_state() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.nspanel_state)
  return _internal_nspanel_state();
}
inline void NSPanelStatusReport::set_nspanel_state(::NSPanelStatusReport_state value) {
  _internal_set_nspanel_state(value);
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.nspanel_state)
}
inline ::NSPanelStatusReport_state NSPanelStatusReport::_internal_nspanel_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelStatusReport_state>(_impl_.nspanel_state_);
}
inline void NSPanelStatusReport::_internal_set_nspanel_state(::NSPanelStatusReport_state value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nspanel_state_ = value;
}

// optional int32 update_progress = 2;
inline bool NSPanelStatusReport::has_update_progress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NSPanelStatusReport::clear_update_progress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_progress_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t NSPanelStatusReport::update_progress() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.update_progress)
  return _internal_update_progress();
}
inline void NSPanelStatusReport::set_update_progress(::int32_t value) {
  _internal_set_update_progress(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.update_progress)
}
inline ::int32_t NSPanelStatusReport::_internal_update_progress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.update_progress_;
}
inline void NSPanelStatusReport::_internal_set_update_progress(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_progress_ = value;
}

// int32 rssi = 3;
inline void NSPanelStatusReport::clear_rssi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rssi_ = 0;
}
inline ::int32_t NSPanelStatusReport::rssi() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.rssi)
  return _internal_rssi();
}
inline void NSPanelStatusReport::set_rssi(::int32_t value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.rssi)
}
inline ::int32_t NSPanelStatusReport::_internal_rssi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rssi_;
}
inline void NSPanelStatusReport::_internal_set_rssi(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rssi_ = value;
}

// int32 heap_used_pct = 4;
inline void NSPanelStatusReport::clear_heap_used_pct() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heap_used_pct_ = 0;
}
inline ::int32_t NSPanelStatusReport::heap_used_pct() const {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.heap_used_pct)
  return _internal_heap_used_pct();
}
inline void NSPanelStatusReport::set_heap_used_pct(::int32_t value) {
  _internal_set_heap_used_pct(value);
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.heap_used_pct)
}
inline ::int32_t NSPanelStatusReport::_internal_heap_used_pct() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heap_used_pct_;
}
inline void NSPanelStatusReport::_internal_set_heap_used_pct(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heap_used_pct_ = value;
}

// string mac_address = 5;
inline void NSPanelStatusReport::clear_mac_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.ClearToEmpty();
}
inline const std::string& NSPanelStatusReport::mac_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.mac_address)
  return _internal_mac_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelStatusReport::set_mac_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.mac_address)
}
inline std::string* NSPanelStatusReport::mutable_mac_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:NSPanelStatusReport.mac_address)
  return _s;
}
inline const std::string& NSPanelStatusReport::_internal_mac_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mac_address_.Get();
}
inline void NSPanelStatusReport::_internal_set_mac_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.Set(value, GetArena());
}
inline std::string* NSPanelStatusReport::_internal_mutable_mac_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mac_address_.Mutable( GetArena());
}
inline std::string* NSPanelStatusReport::release_mac_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelStatusReport.mac_address)
  return _impl_.mac_address_.Release();
}
inline void NSPanelStatusReport::set_allocated_mac_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mac_address_.IsDefault()) {
          _impl_.mac_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelStatusReport.mac_address)
}

// string temperature = 6;
inline void NSPanelStatusReport::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_.ClearToEmpty();
}
inline const std::string& NSPanelStatusReport::temperature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.temperature)
  return _internal_temperature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelStatusReport::set_temperature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.temperature)
}
inline std::string* NSPanelStatusReport::mutable_temperature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_temperature();
  // @@protoc_insertion_point(field_mutable:NSPanelStatusReport.temperature)
  return _s;
}
inline const std::string& NSPanelStatusReport::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_.Get();
}
inline void NSPanelStatusReport::_internal_set_temperature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_.Set(value, GetArena());
}
inline std::string* NSPanelStatusReport::_internal_mutable_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.temperature_.Mutable( GetArena());
}
inline std::string* NSPanelStatusReport::release_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelStatusReport.temperature)
  return _impl_.temperature_.Release();
}
inline void NSPanelStatusReport::set_allocated_temperature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.temperature_.IsDefault()) {
          _impl_.temperature_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelStatusReport.temperature)
}

// string ip_address = 7;
inline void NSPanelStatusReport::clear_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& NSPanelStatusReport::ip_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelStatusReport::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelStatusReport.ip_address)
}
inline std::string* NSPanelStatusReport::mutable_ip_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:NSPanelStatusReport.ip_address)
  return _s;
}
inline const std::string& NSPanelStatusReport::_internal_ip_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_address_.Get();
}
inline void NSPanelStatusReport::_internal_set_ip_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(value, GetArena());
}
inline std::string* NSPanelStatusReport::_internal_mutable_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ip_address_.Mutable( GetArena());
}
inline std::string* NSPanelStatusReport::release_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelStatusReport.ip_address)
  return _impl_.ip_address_.Release();
}
inline void NSPanelStatusReport::set_allocated_ip_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_address_.IsDefault()) {
          _impl_.ip_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelStatusReport.ip_address)
}

// repeated .NSPanelStatusReport.NSPanelWarning warnings = 8;
inline int NSPanelStatusReport::_internal_warnings_size() const {
  return _internal_warnings().size();
}
inline int NSPanelStatusReport::warnings_size() const {
  return _internal_warnings_size();
}
inline void NSPanelStatusReport::clear_warnings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warnings_.Clear();
}
inline ::NSPanelStatusReport_NSPanelWarning* NSPanelStatusReport::mutable_warnings(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NSPanelStatusReport.warnings)
  return _internal_mutable_warnings()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelStatusReport_NSPanelWarning>* NSPanelStatusReport::mutable_warnings()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelStatusReport.warnings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_warnings();
}
inline const ::NSPanelStatusReport_NSPanelWarning& NSPanelStatusReport::warnings(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelStatusReport.warnings)
  return _internal_warnings().Get(index);
}
inline ::NSPanelStatusReport_NSPanelWarning* NSPanelStatusReport::add_warnings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::NSPanelStatusReport_NSPanelWarning* _add = _internal_mutable_warnings()->Add();
  // @@protoc_insertion_point(field_add:NSPanelStatusReport.warnings)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelStatusReport_NSPanelWarning>& NSPanelStatusReport::warnings() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelStatusReport.warnings)
  return _internal_warnings();
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelStatusReport_NSPanelWarning>&
NSPanelStatusReport::_internal_warnings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.warnings_;
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelStatusReport_NSPanelWarning>*
NSPanelStatusReport::_internal_mutable_warnings() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.warnings_;
}

// -------------------------------------------------------------------

// NSPanelLightStatus

// int32 id = 1;
inline void NSPanelLightStatus::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t NSPanelLightStatus::id() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.id)
  return _internal_id();
}
inline void NSPanelLightStatus::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.id)
}
inline ::int32_t NSPanelLightStatus::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void NSPanelLightStatus::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string name = 2;
inline void NSPanelLightStatus::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NSPanelLightStatus::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelLightStatus::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.name)
}
inline std::string* NSPanelLightStatus::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:NSPanelLightStatus.name)
  return _s;
}
inline const std::string& NSPanelLightStatus::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NSPanelLightStatus::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NSPanelLightStatus::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NSPanelLightStatus::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelLightStatus.name)
  return _impl_.name_.Release();
}
inline void NSPanelLightStatus::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelLightStatus.name)
}

// bool can_dim = 3;
inline void NSPanelLightStatus::clear_can_dim() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_dim_ = false;
}
inline bool NSPanelLightStatus::can_dim() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.can_dim)
  return _internal_can_dim();
}
inline void NSPanelLightStatus::set_can_dim(bool value) {
  _internal_set_can_dim(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.can_dim)
}
inline bool NSPanelLightStatus::_internal_can_dim() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_dim_;
}
inline void NSPanelLightStatus::_internal_set_can_dim(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_dim_ = value;
}

// bool can_color_temperature = 4;
inline void NSPanelLightStatus::clear_can_color_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_color_temperature_ = false;
}
inline bool NSPanelLightStatus::can_color_temperature() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.can_color_temperature)
  return _internal_can_color_temperature();
}
inline void NSPanelLightStatus::set_can_color_temperature(bool value) {
  _internal_set_can_color_temperature(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.can_color_temperature)
}
inline bool NSPanelLightStatus::_internal_can_color_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_color_temperature_;
}
inline void NSPanelLightStatus::_internal_set_can_color_temperature(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_color_temperature_ = value;
}

// bool can_rgb = 5;
inline void NSPanelLightStatus::clear_can_rgb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_rgb_ = false;
}
inline bool NSPanelLightStatus::can_rgb() const {
  // @@protoc_insertion_point(field_get:NSPanelLightStatus.can_rgb)
  return _internal_can_rgb();
}
inline void NSPanelLightStatus::set_can_rgb(bool value) {
  _internal_set_can_rgb(value);
  // @@protoc_insertion_point(field_set:NSPanelLightStatus.can_rgb)
}
inline bool NSPanelLightStatus::_internal_can_rgb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_rgb_;
}
inline void NSPanelLightStatus::_internal_set_can_rgb(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_rgb_ = value;
}

// -------------------------------------------------------------------

// NSPanelRoomStatus

// int32 id = 1;
inline void NSPanelRoomStatus::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t NSPanelRoomStatus::id() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.id)
  return _internal_id();
}
inline void NSPanelRoomStatus::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.id)
}
inline ::int32_t NSPanelRoomStatus::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void NSPanelRoomStatus::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string name = 2;
inline void NSPanelRoomStatus::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NSPanelRoomStatus::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelRoomStatus::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.name)
}
inline std::string* NSPanelRoomStatus::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:NSPanelRoomStatus.name)
  return _s;
}
inline const std::string& NSPanelRoomStatus::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NSPanelRoomStatus::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NSPanelRoomStatus::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NSPanelRoomStatus::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelRoomStatus.name)
  return _impl_.name_.Release();
}
inline void NSPanelRoomStatus::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelRoomStatus.name)
}

// int32 average_dim_level = 3;
inline void NSPanelRoomStatus::clear_average_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_dim_level_ = 0;
}
inline ::int32_t NSPanelRoomStatus::average_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.average_dim_level)
  return _internal_average_dim_level();
}
inline void NSPanelRoomStatus::set_average_dim_level(::int32_t value) {
  _internal_set_average_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.average_dim_level)
}
inline ::int32_t NSPanelRoomStatus::_internal_average_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_dim_level_;
}
inline void NSPanelRoomStatus::_internal_set_average_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_dim_level_ = value;
}

// int32 ceiling_lights_dim_level = 4;
inline void NSPanelRoomStatus::clear_ceiling_lights_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ceiling_lights_dim_level_ = 0;
}
inline ::int32_t NSPanelRoomStatus::ceiling_lights_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.ceiling_lights_dim_level)
  return _internal_ceiling_lights_dim_level();
}
inline void NSPanelRoomStatus::set_ceiling_lights_dim_level(::int32_t value) {
  _internal_set_ceiling_lights_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.ceiling_lights_dim_level)
}
inline ::int32_t NSPanelRoomStatus::_internal_ceiling_lights_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ceiling_lights_dim_level_;
}
inline void NSPanelRoomStatus::_internal_set_ceiling_lights_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ceiling_lights_dim_level_ = value;
}

// int32 table_lights_dim_level = 5;
inline void NSPanelRoomStatus::clear_table_lights_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_lights_dim_level_ = 0;
}
inline ::int32_t NSPanelRoomStatus::table_lights_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.table_lights_dim_level)
  return _internal_table_lights_dim_level();
}
inline void NSPanelRoomStatus::set_table_lights_dim_level(::int32_t value) {
  _internal_set_table_lights_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelRoomStatus.table_lights_dim_level)
}
inline ::int32_t NSPanelRoomStatus::_internal_table_lights_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.table_lights_dim_level_;
}
inline void NSPanelRoomStatus::_internal_set_table_lights_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_lights_dim_level_ = value;
}

// repeated .NSPanelLightStatus lights = 6;
inline int NSPanelRoomStatus::_internal_lights_size() const {
  return _internal_lights().size();
}
inline int NSPanelRoomStatus::lights_size() const {
  return _internal_lights_size();
}
inline void NSPanelRoomStatus::clear_lights() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lights_.Clear();
}
inline ::NSPanelLightStatus* NSPanelRoomStatus::mutable_lights(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NSPanelRoomStatus.lights)
  return _internal_mutable_lights()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelLightStatus>* NSPanelRoomStatus::mutable_lights()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelRoomStatus.lights)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_lights();
}
inline const ::NSPanelLightStatus& NSPanelRoomStatus::lights(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelRoomStatus.lights)
  return _internal_lights().Get(index);
}
inline ::NSPanelLightStatus* NSPanelRoomStatus::add_lights() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::NSPanelLightStatus* _add = _internal_mutable_lights()->Add();
  // @@protoc_insertion_point(field_add:NSPanelRoomStatus.lights)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelLightStatus>& NSPanelRoomStatus::lights() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelRoomStatus.lights)
  return _internal_lights();
}
inline const ::google::protobuf::RepeatedPtrField<::NSPanelLightStatus>&
NSPanelRoomStatus::_internal_lights() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lights_;
}
inline ::google::protobuf::RepeatedPtrField<::NSPanelLightStatus>*
NSPanelRoomStatus::_internal_mutable_lights() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.lights_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel>() {
  return ::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_descriptor();
}
template <>
struct is_proto_enum<::NSPanelStatusReport_state> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelStatusReport_state>() {
  return ::NSPanelStatusReport_state_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protobuf_5fnspanel_2eproto_2epb_2eh
