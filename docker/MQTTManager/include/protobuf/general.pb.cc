// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: general.proto
// Protobuf C++ Version: 5.27.0

#include "general.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr OpenhabLight::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : openhab_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_dim_channel_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_color_temperature_channel_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_rgb_channel_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        can_dim_{false},
        can_color_temperature_{false},
        can_rgb_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OpenhabLight::OpenhabLight(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OpenhabLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpenhabLightDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpenhabLightDefaultTypeInternal() {}
  union {
    OpenhabLight _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpenhabLightDefaultTypeInternal _OpenhabLight_default_instance_;

inline constexpr HomeAssistantEntity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : home_assistant_entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        can_dim_{false},
        can_color_temperature_{false},
        can_rgb_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HomeAssistantEntity::HomeAssistantEntity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HomeAssistantEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HomeAssistantEntityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HomeAssistantEntityDefaultTypeInternal() {}
  union {
    HomeAssistantEntity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HomeAssistantEntityDefaultTypeInternal _HomeAssistantEntity_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_general_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_general_2eproto = nullptr;
const ::uint32_t
    TableStruct_general_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::HomeAssistantEntity, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::HomeAssistantEntity, _impl_.home_assistant_entity_id_),
        PROTOBUF_FIELD_OFFSET(::HomeAssistantEntity, _impl_.can_dim_),
        PROTOBUF_FIELD_OFFSET(::HomeAssistantEntity, _impl_.can_color_temperature_),
        PROTOBUF_FIELD_OFFSET(::HomeAssistantEntity, _impl_.can_rgb_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::OpenhabLight, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::OpenhabLight, _impl_.openhab_id_),
        PROTOBUF_FIELD_OFFSET(::OpenhabLight, _impl_.openhab_dim_channel_),
        PROTOBUF_FIELD_OFFSET(::OpenhabLight, _impl_.openhab_color_temperature_channel_),
        PROTOBUF_FIELD_OFFSET(::OpenhabLight, _impl_.openhab_rgb_channel_),
        PROTOBUF_FIELD_OFFSET(::OpenhabLight, _impl_.can_dim_),
        PROTOBUF_FIELD_OFFSET(::OpenhabLight, _impl_.can_color_temperature_),
        PROTOBUF_FIELD_OFFSET(::OpenhabLight, _impl_.can_rgb_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::HomeAssistantEntity)},
        {12, -1, -1, sizeof(::OpenhabLight)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_HomeAssistantEntity_default_instance_._instance,
    &::_OpenhabLight_default_instance_._instance,
};
const char descriptor_table_protodef_general_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rgeneral.proto\"x\n\023HomeAssistantEntity\022 "
    "\n\030home_assistant_entity_id\030\002 \001(\t\022\017\n\007can_"
    "dim\030\003 \001(\010\022\035\n\025can_color_temperature\030\004 \001(\010"
    "\022\017\n\007can_rgb\030\005 \001(\010\"\310\001\n\014OpenhabLight\022\022\n\nop"
    "enhab_id\030\001 \001(\t\022\033\n\023openhab_dim_channel\030\002 "
    "\001(\t\022)\n!openhab_color_temperature_channel"
    "\030\003 \001(\t\022\033\n\023openhab_rgb_channel\030\004 \001(\t\022\017\n\007c"
    "an_dim\030\005 \001(\010\022\035\n\025can_color_temperature\030\006 "
    "\001(\010\022\017\n\007can_rgb\030\007 \001(\010b\006proto3"
};
static ::absl::once_flag descriptor_table_general_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_general_2eproto = {
    false,
    false,
    348,
    descriptor_table_protodef_general_2eproto,
    "general.proto",
    &descriptor_table_general_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_general_2eproto::offsets,
    file_level_enum_descriptors_general_2eproto,
    file_level_service_descriptors_general_2eproto,
};
// ===================================================================

class HomeAssistantEntity::_Internal {
 public:
};

HomeAssistantEntity::HomeAssistantEntity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:HomeAssistantEntity)
}
inline PROTOBUF_NDEBUG_INLINE HomeAssistantEntity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::HomeAssistantEntity& from_msg)
      : home_assistant_entity_id_(arena, from.home_assistant_entity_id_),
        _cached_size_{0} {}

HomeAssistantEntity::HomeAssistantEntity(
    ::google::protobuf::Arena* arena,
    const HomeAssistantEntity& from)
    : ::google::protobuf::Message(arena) {
  HomeAssistantEntity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, can_dim_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, can_dim_),
           offsetof(Impl_, can_rgb_) -
               offsetof(Impl_, can_dim_) +
               sizeof(Impl_::can_rgb_));

  // @@protoc_insertion_point(copy_constructor:HomeAssistantEntity)
}
inline PROTOBUF_NDEBUG_INLINE HomeAssistantEntity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : home_assistant_entity_id_(arena),
        _cached_size_{0} {}

inline void HomeAssistantEntity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, can_dim_),
           0,
           offsetof(Impl_, can_rgb_) -
               offsetof(Impl_, can_dim_) +
               sizeof(Impl_::can_rgb_));
}
HomeAssistantEntity::~HomeAssistantEntity() {
  // @@protoc_insertion_point(destructor:HomeAssistantEntity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HomeAssistantEntity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.home_assistant_entity_id_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
HomeAssistantEntity::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_._cached_size_),
              false,
          },
          &HomeAssistantEntity::MergeImpl,
          &HomeAssistantEntity::kDescriptorMethods,
          &descriptor_table_general_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 52, 2> HomeAssistantEntity::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967265,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HomeAssistantEntity_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::HomeAssistantEntity>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool can_color_temperature = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HomeAssistantEntity, _impl_.can_color_temperature_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.can_color_temperature_)}},
    // bool can_rgb = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HomeAssistantEntity, _impl_.can_rgb_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.can_rgb_)}},
    // string home_assistant_entity_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.home_assistant_entity_id_)}},
    // bool can_dim = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HomeAssistantEntity, _impl_.can_dim_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.can_dim_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string home_assistant_entity_id = 2;
    {PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.home_assistant_entity_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool can_dim = 3;
    {PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.can_dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_color_temperature = 4;
    {PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.can_color_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_rgb = 5;
    {PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.can_rgb_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\23\30\0\0\0\0\0\0"
    "HomeAssistantEntity"
    "home_assistant_entity_id"
  }},
};

PROTOBUF_NOINLINE void HomeAssistantEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:HomeAssistantEntity)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.home_assistant_entity_id_.ClearToEmpty();
  ::memset(&_impl_.can_dim_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.can_rgb_) -
      reinterpret_cast<char*>(&_impl_.can_dim_)) + sizeof(_impl_.can_rgb_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* HomeAssistantEntity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HomeAssistantEntity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string home_assistant_entity_id = 2;
  if (!this->_internal_home_assistant_entity_id().empty()) {
    const std::string& _s = this->_internal_home_assistant_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "HomeAssistantEntity.home_assistant_entity_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool can_dim = 3;
  if (this->_internal_can_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_can_dim(), target);
  }

  // bool can_color_temperature = 4;
  if (this->_internal_can_color_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_can_color_temperature(), target);
  }

  // bool can_rgb = 5;
  if (this->_internal_can_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_can_rgb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HomeAssistantEntity)
  return target;
}

::size_t HomeAssistantEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HomeAssistantEntity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string home_assistant_entity_id = 2;
  if (!this->_internal_home_assistant_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_home_assistant_entity_id());
  }

  // bool can_dim = 3;
  if (this->_internal_can_dim() != 0) {
    total_size += 2;
  }

  // bool can_color_temperature = 4;
  if (this->_internal_can_color_temperature() != 0) {
    total_size += 2;
  }

  // bool can_rgb = 5;
  if (this->_internal_can_rgb() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void HomeAssistantEntity::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HomeAssistantEntity*>(&to_msg);
  auto& from = static_cast<const HomeAssistantEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HomeAssistantEntity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_home_assistant_entity_id().empty()) {
    _this->_internal_set_home_assistant_entity_id(from._internal_home_assistant_entity_id());
  }
  if (from._internal_can_dim() != 0) {
    _this->_impl_.can_dim_ = from._impl_.can_dim_;
  }
  if (from._internal_can_color_temperature() != 0) {
    _this->_impl_.can_color_temperature_ = from._impl_.can_color_temperature_;
  }
  if (from._internal_can_rgb() != 0) {
    _this->_impl_.can_rgb_ = from._impl_.can_rgb_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HomeAssistantEntity::CopyFrom(const HomeAssistantEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HomeAssistantEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HomeAssistantEntity::InternalSwap(HomeAssistantEntity* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.home_assistant_entity_id_, &other->_impl_.home_assistant_entity_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.can_rgb_)
      + sizeof(HomeAssistantEntity::_impl_.can_rgb_)
      - PROTOBUF_FIELD_OFFSET(HomeAssistantEntity, _impl_.can_dim_)>(
          reinterpret_cast<char*>(&_impl_.can_dim_),
          reinterpret_cast<char*>(&other->_impl_.can_dim_));
}

::google::protobuf::Metadata HomeAssistantEntity::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OpenhabLight::_Internal {
 public:
};

OpenhabLight::OpenhabLight(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OpenhabLight)
}
inline PROTOBUF_NDEBUG_INLINE OpenhabLight::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::OpenhabLight& from_msg)
      : openhab_id_(arena, from.openhab_id_),
        openhab_dim_channel_(arena, from.openhab_dim_channel_),
        openhab_color_temperature_channel_(arena, from.openhab_color_temperature_channel_),
        openhab_rgb_channel_(arena, from.openhab_rgb_channel_),
        _cached_size_{0} {}

OpenhabLight::OpenhabLight(
    ::google::protobuf::Arena* arena,
    const OpenhabLight& from)
    : ::google::protobuf::Message(arena) {
  OpenhabLight* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, can_dim_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, can_dim_),
           offsetof(Impl_, can_rgb_) -
               offsetof(Impl_, can_dim_) +
               sizeof(Impl_::can_rgb_));

  // @@protoc_insertion_point(copy_constructor:OpenhabLight)
}
inline PROTOBUF_NDEBUG_INLINE OpenhabLight::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : openhab_id_(arena),
        openhab_dim_channel_(arena),
        openhab_color_temperature_channel_(arena),
        openhab_rgb_channel_(arena),
        _cached_size_{0} {}

inline void OpenhabLight::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, can_dim_),
           0,
           offsetof(Impl_, can_rgb_) -
               offsetof(Impl_, can_dim_) +
               sizeof(Impl_::can_rgb_));
}
OpenhabLight::~OpenhabLight() {
  // @@protoc_insertion_point(destructor:OpenhabLight)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OpenhabLight::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.openhab_id_.Destroy();
  _impl_.openhab_dim_channel_.Destroy();
  _impl_.openhab_color_temperature_channel_.Destroy();
  _impl_.openhab_rgb_channel_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
OpenhabLight::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_._cached_size_),
              false,
          },
          &OpenhabLight::MergeImpl,
          &OpenhabLight::kDescriptorMethods,
          &descriptor_table_general_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 102, 2> OpenhabLight::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OpenhabLight_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::OpenhabLight>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string openhab_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.openhab_id_)}},
    // string openhab_dim_channel = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.openhab_dim_channel_)}},
    // string openhab_color_temperature_channel = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.openhab_color_temperature_channel_)}},
    // string openhab_rgb_channel = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.openhab_rgb_channel_)}},
    // bool can_dim = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OpenhabLight, _impl_.can_dim_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.can_dim_)}},
    // bool can_color_temperature = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OpenhabLight, _impl_.can_color_temperature_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.can_color_temperature_)}},
    // bool can_rgb = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OpenhabLight, _impl_.can_rgb_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.can_rgb_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string openhab_id = 1;
    {PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.openhab_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string openhab_dim_channel = 2;
    {PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.openhab_dim_channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string openhab_color_temperature_channel = 3;
    {PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.openhab_color_temperature_channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string openhab_rgb_channel = 4;
    {PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.openhab_rgb_channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool can_dim = 5;
    {PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.can_dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_color_temperature = 6;
    {PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.can_color_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_rgb = 7;
    {PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.can_rgb_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\14\12\23\41\23\0\0\0"
    "OpenhabLight"
    "openhab_id"
    "openhab_dim_channel"
    "openhab_color_temperature_channel"
    "openhab_rgb_channel"
  }},
};

PROTOBUF_NOINLINE void OpenhabLight::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenhabLight)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.openhab_id_.ClearToEmpty();
  _impl_.openhab_dim_channel_.ClearToEmpty();
  _impl_.openhab_color_temperature_channel_.ClearToEmpty();
  _impl_.openhab_rgb_channel_.ClearToEmpty();
  ::memset(&_impl_.can_dim_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.can_rgb_) -
      reinterpret_cast<char*>(&_impl_.can_dim_)) + sizeof(_impl_.can_rgb_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* OpenhabLight::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenhabLight)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string openhab_id = 1;
  if (!this->_internal_openhab_id().empty()) {
    const std::string& _s = this->_internal_openhab_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "OpenhabLight.openhab_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string openhab_dim_channel = 2;
  if (!this->_internal_openhab_dim_channel().empty()) {
    const std::string& _s = this->_internal_openhab_dim_channel();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "OpenhabLight.openhab_dim_channel");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string openhab_color_temperature_channel = 3;
  if (!this->_internal_openhab_color_temperature_channel().empty()) {
    const std::string& _s = this->_internal_openhab_color_temperature_channel();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "OpenhabLight.openhab_color_temperature_channel");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string openhab_rgb_channel = 4;
  if (!this->_internal_openhab_rgb_channel().empty()) {
    const std::string& _s = this->_internal_openhab_rgb_channel();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "OpenhabLight.openhab_rgb_channel");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool can_dim = 5;
  if (this->_internal_can_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_can_dim(), target);
  }

  // bool can_color_temperature = 6;
  if (this->_internal_can_color_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_can_color_temperature(), target);
  }

  // bool can_rgb = 7;
  if (this->_internal_can_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_can_rgb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenhabLight)
  return target;
}

::size_t OpenhabLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenhabLight)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string openhab_id = 1;
  if (!this->_internal_openhab_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_openhab_id());
  }

  // string openhab_dim_channel = 2;
  if (!this->_internal_openhab_dim_channel().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_openhab_dim_channel());
  }

  // string openhab_color_temperature_channel = 3;
  if (!this->_internal_openhab_color_temperature_channel().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_openhab_color_temperature_channel());
  }

  // string openhab_rgb_channel = 4;
  if (!this->_internal_openhab_rgb_channel().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_openhab_rgb_channel());
  }

  // bool can_dim = 5;
  if (this->_internal_can_dim() != 0) {
    total_size += 2;
  }

  // bool can_color_temperature = 6;
  if (this->_internal_can_color_temperature() != 0) {
    total_size += 2;
  }

  // bool can_rgb = 7;
  if (this->_internal_can_rgb() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void OpenhabLight::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OpenhabLight*>(&to_msg);
  auto& from = static_cast<const OpenhabLight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenhabLight)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_openhab_id().empty()) {
    _this->_internal_set_openhab_id(from._internal_openhab_id());
  }
  if (!from._internal_openhab_dim_channel().empty()) {
    _this->_internal_set_openhab_dim_channel(from._internal_openhab_dim_channel());
  }
  if (!from._internal_openhab_color_temperature_channel().empty()) {
    _this->_internal_set_openhab_color_temperature_channel(from._internal_openhab_color_temperature_channel());
  }
  if (!from._internal_openhab_rgb_channel().empty()) {
    _this->_internal_set_openhab_rgb_channel(from._internal_openhab_rgb_channel());
  }
  if (from._internal_can_dim() != 0) {
    _this->_impl_.can_dim_ = from._impl_.can_dim_;
  }
  if (from._internal_can_color_temperature() != 0) {
    _this->_impl_.can_color_temperature_ = from._impl_.can_color_temperature_;
  }
  if (from._internal_can_rgb() != 0) {
    _this->_impl_.can_rgb_ = from._impl_.can_rgb_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OpenhabLight::CopyFrom(const OpenhabLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenhabLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OpenhabLight::InternalSwap(OpenhabLight* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_id_, &other->_impl_.openhab_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_dim_channel_, &other->_impl_.openhab_dim_channel_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_color_temperature_channel_, &other->_impl_.openhab_color_temperature_channel_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_rgb_channel_, &other->_impl_.openhab_rgb_channel_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.can_rgb_)
      + sizeof(OpenhabLight::_impl_.can_rgb_)
      - PROTOBUF_FIELD_OFFSET(OpenhabLight, _impl_.can_dim_)>(
          reinterpret_cast<char*>(&_impl_.can_dim_),
          reinterpret_cast<char*>(&other->_impl_.can_dim_));
}

::google::protobuf::Metadata OpenhabLight::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_general_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
