// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuf_nspanel.proto
// Protobuf C++ Version: 5.27.0

#include "protobuf_nspanel.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr NSPanelWeatherUpdate_ForecastItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : weather_icon_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        precipitation_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        temperature_maxmin_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        wind_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        display_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelWeatherUpdate_ForecastItem::NSPanelWeatherUpdate_ForecastItem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelWeatherUpdate_ForecastItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelWeatherUpdate_ForecastItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelWeatherUpdate_ForecastItemDefaultTypeInternal() {}
  union {
    NSPanelWeatherUpdate_ForecastItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelWeatherUpdate_ForecastItemDefaultTypeInternal _NSPanelWeatherUpdate_ForecastItem_default_instance_;

inline constexpr NSPanelWarning::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        level_{static_cast< ::NSPanelWarningLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelWarning::NSPanelWarning(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelWarningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelWarningDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelWarningDefaultTypeInternal() {}
  union {
    NSPanelWarning _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelWarningDefaultTypeInternal _NSPanelWarning_default_instance_;

inline constexpr NSPanelRoomStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entity_page_ids_{},
        _entity_page_ids_cached_byte_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        average_dim_level_{0},
        ceiling_lights_dim_level_{0},
        table_lights_dim_level_{0},
        average_color_temperature_{0},
        ceiling_lights_color_temperature_value_{0},
        table_lights_color_temperature_value_{0},
        num_ceiling_lights_{0},
        num_table_lights_{0},
        num_ceiling_lights_on_{0},
        num_table_lights_on_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelRoomStatus::NSPanelRoomStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelRoomStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelRoomStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelRoomStatusDefaultTypeInternal() {}
  union {
    NSPanelRoomStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelRoomStatusDefaultTypeInternal _NSPanelRoomStatus_default_instance_;

inline constexpr NSPanelRoomEntitiesPage_EntitySlot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        icon_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mqtt_state_topic_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_view_position_{0},
        pco_{0},
        pco2_{0},
        can_save_scene_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelRoomEntitiesPage_EntitySlot::NSPanelRoomEntitiesPage_EntitySlot(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelRoomEntitiesPage_EntitySlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelRoomEntitiesPage_EntitySlotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelRoomEntitiesPage_EntitySlotDefaultTypeInternal() {}
  union {
    NSPanelRoomEntitiesPage_EntitySlot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelRoomEntitiesPage_EntitySlotDefaultTypeInternal _NSPanelRoomEntitiesPage_EntitySlot_default_instance_;

inline constexpr NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entity_page_id_{0},
        entity_slot_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPageDefaultTypeInternal() {}
  union {
    NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPageDefaultTypeInternal _NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage_default_instance_;

inline constexpr NSPanelMQTTManagerCommand_SaveSceneCommand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entity_page_id_{0},
        entity_slot_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_SaveSceneCommand::NSPanelMQTTManagerCommand_SaveSceneCommand(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelMQTTManagerCommand_SaveSceneCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_SaveSceneCommandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelMQTTManagerCommand_SaveSceneCommandDefaultTypeInternal() {}
  union {
    NSPanelMQTTManagerCommand_SaveSceneCommand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelMQTTManagerCommand_SaveSceneCommandDefaultTypeInternal _NSPanelMQTTManagerCommand_SaveSceneCommand_default_instance_;

inline constexpr NSPanelMQTTManagerCommand_LightCommand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : light_ids_{},
        _light_ids_cached_byte_size_{0},
        brightness_{0},
        color_temperature_{0},
        has_brightness_{false},
        has_color_temperature_{false},
        has_hue_{false},
        has_saturation_{false},
        hue_{0},
        saturation_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_LightCommand::NSPanelMQTTManagerCommand_LightCommand(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelMQTTManagerCommand_LightCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_LightCommandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelMQTTManagerCommand_LightCommandDefaultTypeInternal() {}
  union {
    NSPanelMQTTManagerCommand_LightCommand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelMQTTManagerCommand_LightCommandDefaultTypeInternal _NSPanelMQTTManagerCommand_LightCommand_default_instance_;

inline constexpr NSPanelMQTTManagerCommand_FirstPageTurnLightOn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : affect_lights_{static_cast< ::NSPanelMQTTManagerCommand_AffectLightsOptions >(0)},
        brightness_slider_value_{0},
        kelvin_slider_value_{0},
        selected_room_{0},
        global_{false},
        has_brightness_value_{false},
        has_kelvin_value_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_FirstPageTurnLightOn::NSPanelMQTTManagerCommand_FirstPageTurnLightOn(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelMQTTManagerCommand_FirstPageTurnLightOnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_FirstPageTurnLightOnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelMQTTManagerCommand_FirstPageTurnLightOnDefaultTypeInternal() {}
  union {
    NSPanelMQTTManagerCommand_FirstPageTurnLightOn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelMQTTManagerCommand_FirstPageTurnLightOnDefaultTypeInternal _NSPanelMQTTManagerCommand_FirstPageTurnLightOn_default_instance_;

inline constexpr NSPanelMQTTManagerCommand_FirstPageTurnLightOff::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : affect_lights_{static_cast< ::NSPanelMQTTManagerCommand_AffectLightsOptions >(0)},
        global_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_FirstPageTurnLightOff::NSPanelMQTTManagerCommand_FirstPageTurnLightOff(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelMQTTManagerCommand_FirstPageTurnLightOffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_FirstPageTurnLightOffDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelMQTTManagerCommand_FirstPageTurnLightOffDefaultTypeInternal() {}
  union {
    NSPanelMQTTManagerCommand_FirstPageTurnLightOff _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelMQTTManagerCommand_FirstPageTurnLightOffDefaultTypeInternal _NSPanelMQTTManagerCommand_FirstPageTurnLightOff_default_instance_;

inline constexpr NSPanelMQTTManagerCommand_ButtonPressed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nspanel_id_{0},
        button_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_ButtonPressed::NSPanelMQTTManagerCommand_ButtonPressed(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelMQTTManagerCommand_ButtonPressedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand_ButtonPressedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelMQTTManagerCommand_ButtonPressedDefaultTypeInternal() {}
  union {
    NSPanelMQTTManagerCommand_ButtonPressed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelMQTTManagerCommand_ButtonPressedDefaultTypeInternal _NSPanelMQTTManagerCommand_ButtonPressed_default_instance_;

inline constexpr NSPanelLightStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        can_dim_{false},
        can_color_temperature_{false},
        can_rgb_{false},
        light_level_{0},
        color_temp_{0},
        hue_{0},
        saturation_{0},
        room_view_position_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelLightStatus::NSPanelLightStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelLightStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelLightStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelLightStatusDefaultTypeInternal() {}
  union {
    NSPanelLightStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelLightStatusDefaultTypeInternal _NSPanelLightStatus_default_instance_;

inline constexpr NSPanelConfig_RoomInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entity_page_ids_{},
        _entity_page_ids_cached_byte_size_{0},
        scene_page_ids_{},
        _scene_page_ids_cached_byte_size_{0},
        room_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelConfig_RoomInfo::NSPanelConfig_RoomInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelConfig_RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelConfig_RoomInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelConfig_RoomInfoDefaultTypeInternal() {}
  union {
    NSPanelConfig_RoomInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelConfig_RoomInfoDefaultTypeInternal _NSPanelConfig_RoomInfo_default_instance_;

inline constexpr NSPanelWeatherUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : forecast_items_{},
        current_weather_icon_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_temperature_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_maxmin_temperature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_wind_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sunrise_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sunset_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_precipitation_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelWeatherUpdate::NSPanelWeatherUpdate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelWeatherUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelWeatherUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelWeatherUpdateDefaultTypeInternal() {}
  union {
    NSPanelWeatherUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelWeatherUpdateDefaultTypeInternal _NSPanelWeatherUpdate_default_instance_;

inline constexpr NSPanelStatusReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : warnings_{},
        mac_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nspanel_state_{static_cast< ::NSPanelStatusReport_state >(0)},
        update_progress_{0},
        rssi_{0},
        heap_used_pct_{0},
        temperature_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelStatusReport::NSPanelStatusReport(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelStatusReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelStatusReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelStatusReportDefaultTypeInternal() {}
  union {
    NSPanelStatusReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelStatusReportDefaultTypeInternal _NSPanelStatusReport_default_instance_;

inline constexpr NSPanelRoomEntitiesPage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entities_{},
        header_text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        page_type_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelRoomEntitiesPage::NSPanelRoomEntitiesPage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelRoomEntitiesPageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelRoomEntitiesPageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelRoomEntitiesPageDefaultTypeInternal() {}
  union {
    NSPanelRoomEntitiesPage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelRoomEntitiesPageDefaultTypeInternal _NSPanelRoomEntitiesPage_default_instance_;

inline constexpr NSPanelMQTTManagerCommand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : CommandData_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommand::NSPanelMQTTManagerCommand(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelMQTTManagerCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelMQTTManagerCommandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelMQTTManagerCommandDefaultTypeInternal() {}
  union {
    NSPanelMQTTManagerCommand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelMQTTManagerCommandDefaultTypeInternal _NSPanelMQTTManagerCommand_default_instance_;

inline constexpr NSPanelConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : room_infos_{},
        global_scene_entity_page_ids_{},
        _global_scene_entity_page_ids_cached_byte_size_{0},
        relay1_relay_group_{},
        _relay1_relay_group_cached_byte_size_{0},
        relay2_relay_group_{},
        _relay2_relay_group_cached_byte_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        default_room_{0},
        default_page_{static_cast< ::NSPanelConfig_NSPanelDefaultPage >(0)},
        screensaver_activation_timeout_{0},
        min_button_push_time_{0},
        button_long_press_time_{0},
        special_mode_trigger_time_{0},
        special_mode_release_time_{0},
        screen_dim_level_{0},
        screensaver_dim_level_{0},
        screensaver_mode_{static_cast< ::NSPanelConfig_NSPanelScreensaverMode >(0)},
        show_screensaver_inside_temperature_{false},
        show_screensaver_outside_temperature_{false},
        clock_us_style_{false},
        use_fahrenheit_{false},
        is_us_panel_{false},
        reverse_relays_{false},
        relay1_default_mode_{false},
        relay2_default_mode_{false},
        temperature_calibration_{0},
        button1_mode_{static_cast< ::NSPanelConfig_NSPanelButtonMode >(0)},
        button2_mode_{static_cast< ::NSPanelConfig_NSPanelButtonMode >(0)},
        raise_light_level_to_100_above_{0},
        nspanel_id_{0},
        optimistic_mode_{false},
        locked_to_default_room_{false},
        default_light_brightess_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelConfig::NSPanelConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelConfigDefaultTypeInternal() {}
  union {
    NSPanelConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelConfigDefaultTypeInternal _NSPanelConfig_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protobuf_5fnspanel_2eproto[6];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protobuf_5fnspanel_2eproto = nullptr;
const ::uint32_t
    TableStruct_protobuf_5fnspanel_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig_RoomInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig_RoomInfo, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig_RoomInfo, _impl_.entity_page_ids_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig_RoomInfo, _impl_.scene_page_ids_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.default_room_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.default_page_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.screensaver_activation_timeout_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.min_button_push_time_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.button_long_press_time_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.special_mode_trigger_time_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.special_mode_release_time_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.screen_dim_level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.screensaver_dim_level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.screensaver_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.show_screensaver_inside_temperature_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.show_screensaver_outside_temperature_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.clock_us_style_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.use_fahrenheit_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.is_us_panel_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.room_infos_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.reverse_relays_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.relay1_default_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.relay2_default_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.temperature_calibration_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.button1_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.button2_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.global_scene_entity_page_ids_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.optimistic_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.raise_light_level_to_100_above_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.nspanel_id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.relay1_relay_group_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.relay2_relay_group_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.default_light_brightess_),
        PROTOBUF_FIELD_OFFSET(::NSPanelConfig, _impl_.locked_to_default_room_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelWarning, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelWarning, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWarning, _impl_.text_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.nspanel_state_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.update_progress_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.rssi_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.heap_used_pct_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.mac_address_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.temperature_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.ip_address_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.warnings_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.can_dim_),
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.can_color_temperature_),
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.can_rgb_),
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.light_level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.color_temp_),
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.hue_),
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.saturation_),
        PROTOBUF_FIELD_OFFSET(::NSPanelLightStatus, _impl_.room_view_position_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage_EntitySlot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage_EntitySlot, _impl_.room_view_position_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage_EntitySlot, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage_EntitySlot, _impl_.icon_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage_EntitySlot, _impl_.pco_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage_EntitySlot, _impl_.pco2_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage_EntitySlot, _impl_.can_save_scene_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage_EntitySlot, _impl_.mqtt_state_topic_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage, _impl_.page_type_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage, _impl_.header_text_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomEntitiesPage, _impl_.entities_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.average_dim_level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.ceiling_lights_dim_level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.table_lights_dim_level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.average_color_temperature_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.ceiling_lights_color_temperature_value_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.table_lights_color_temperature_value_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.num_ceiling_lights_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.num_table_lights_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.num_ceiling_lights_on_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.num_table_lights_on_),
        PROTOBUF_FIELD_OFFSET(::NSPanelRoomStatus, _impl_.entity_page_ids_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate_ForecastItem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate_ForecastItem, _impl_.weather_icon_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate_ForecastItem, _impl_.precipitation_string_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate_ForecastItem, _impl_.temperature_maxmin_string_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate_ForecastItem, _impl_.wind_string_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate_ForecastItem, _impl_.display_string_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate, _impl_.forecast_items_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate, _impl_.current_weather_icon_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate, _impl_.current_temperature_string_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate, _impl_.current_maxmin_temperature_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate, _impl_.current_wind_string_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate, _impl_.sunrise_string_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate, _impl_.sunset_string_),
        PROTOBUF_FIELD_OFFSET(::NSPanelWeatherUpdate, _impl_.current_precipitation_string_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.affect_lights_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.brightness_slider_value_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.kelvin_slider_value_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.selected_room_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.global_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.has_brightness_value_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.has_kelvin_value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.affect_lights_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.global_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _impl_.light_ids_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _impl_.has_brightness_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _impl_.brightness_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _impl_.has_color_temperature_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _impl_.color_temperature_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _impl_.has_hue_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _impl_.hue_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _impl_.has_saturation_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_LightCommand, _impl_.saturation_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_page_id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_slot_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_SaveSceneCommand, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_page_id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_slot_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_ButtonPressed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_ButtonPressed, _impl_.nspanel_id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand_ButtonPressed, _impl_.button_id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand, _impl_.CommandData_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::NSPanelConfig_RoomInfo)},
        {11, -1, -1, sizeof(::NSPanelConfig)},
        {50, -1, -1, sizeof(::NSPanelWarning)},
        {60, -1, -1, sizeof(::NSPanelStatusReport)},
        {76, -1, -1, sizeof(::NSPanelLightStatus)},
        {94, -1, -1, sizeof(::NSPanelRoomEntitiesPage_EntitySlot)},
        {109, -1, -1, sizeof(::NSPanelRoomEntitiesPage)},
        {121, -1, -1, sizeof(::NSPanelRoomStatus)},
        {142, -1, -1, sizeof(::NSPanelWeatherUpdate_ForecastItem)},
        {155, -1, -1, sizeof(::NSPanelWeatherUpdate)},
        {171, -1, -1, sizeof(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn)},
        {186, -1, -1, sizeof(::NSPanelMQTTManagerCommand_FirstPageTurnLightOff)},
        {196, -1, -1, sizeof(::NSPanelMQTTManagerCommand_LightCommand)},
        {213, -1, -1, sizeof(::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage)},
        {223, -1, -1, sizeof(::NSPanelMQTTManagerCommand_SaveSceneCommand)},
        {233, -1, -1, sizeof(::NSPanelMQTTManagerCommand_ButtonPressed)},
        {243, -1, -1, sizeof(::NSPanelMQTTManagerCommand)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_NSPanelConfig_RoomInfo_default_instance_._instance,
    &::_NSPanelConfig_default_instance_._instance,
    &::_NSPanelWarning_default_instance_._instance,
    &::_NSPanelStatusReport_default_instance_._instance,
    &::_NSPanelLightStatus_default_instance_._instance,
    &::_NSPanelRoomEntitiesPage_EntitySlot_default_instance_._instance,
    &::_NSPanelRoomEntitiesPage_default_instance_._instance,
    &::_NSPanelRoomStatus_default_instance_._instance,
    &::_NSPanelWeatherUpdate_ForecastItem_default_instance_._instance,
    &::_NSPanelWeatherUpdate_default_instance_._instance,
    &::_NSPanelMQTTManagerCommand_FirstPageTurnLightOn_default_instance_._instance,
    &::_NSPanelMQTTManagerCommand_FirstPageTurnLightOff_default_instance_._instance,
    &::_NSPanelMQTTManagerCommand_LightCommand_default_instance_._instance,
    &::_NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage_default_instance_._instance,
    &::_NSPanelMQTTManagerCommand_SaveSceneCommand_default_instance_._instance,
    &::_NSPanelMQTTManagerCommand_ButtonPressed_default_instance_._instance,
    &::_NSPanelMQTTManagerCommand_default_instance_._instance,
};
const char descriptor_table_protodef_protobuf_5fnspanel_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\026protobuf_nspanel.proto\"\252\013\n\rNSPanelConf"
    "ig\022\014\n\004name\030\001 \001(\t\022\024\n\014default_room\030\002 \001(\005\0227"
    "\n\014default_page\030\003 \001(\0162!.NSPanelConfig.NSP"
    "anelDefaultPage\022&\n\036screensaver_activatio"
    "n_timeout\030\004 \001(\005\022\034\n\024min_button_push_time\030"
    "\005 \001(\005\022\036\n\026button_long_press_time\030\006 \001(\005\022!\n"
    "\031special_mode_trigger_time\030\007 \001(\005\022!\n\031spec"
    "ial_mode_release_time\030\010 \001(\005\022\030\n\020screen_di"
    "m_level\030\t \001(\005\022\035\n\025screensaver_dim_level\030\n"
    " \001(\005\022\?\n\020screensaver_mode\030\013 \001(\0162%.NSPanel"
    "Config.NSPanelScreensaverMode\022+\n#show_sc"
    "reensaver_inside_temperature\030\014 \001(\010\022,\n$sh"
    "ow_screensaver_outside_temperature\030\r \001(\010"
    "\022\026\n\016clock_us_style\030\016 \001(\010\022\026\n\016use_fahrenhe"
    "it\030\017 \001(\010\022\023\n\013is_us_panel\030\020 \001(\010\022+\n\nroom_in"
    "fos\030\021 \003(\0132\027.NSPanelConfig.RoomInfo\022\026\n\016re"
    "verse_relays\030\022 \001(\010\022\033\n\023relay1_default_mod"
    "e\030\023 \001(\010\022\033\n\023relay2_default_mode\030\024 \001(\010\022\037\n\027"
    "temperature_calibration\030\025 \001(\005\0226\n\014button1"
    "_mode\030\026 \001(\0162 .NSPanelConfig.NSPanelButto"
    "nMode\0226\n\014button2_mode\030\031 \001(\0162 .NSPanelCon"
    "fig.NSPanelButtonMode\022$\n\034global_scene_en"
    "tity_page_ids\030\036 \003(\005\022\027\n\017optimistic_mode\030\037"
    " \001(\010\022&\n\036raise_light_level_to_100_above\030 "
    " \001(\005\022\022\n\nnspanel_id\030! \001(\005\022\032\n\022relay1_relay"
    "_group\030# \003(\005\022\032\n\022relay2_relay_group\030% \003(\005"
    "\022\037\n\027default_light_brightess\030& \001(\005\022\036\n\026loc"
    "ked_to_default_room\030\' \001(\010\032L\n\010RoomInfo\022\017\n"
    "\007room_id\030\001 \001(\005\022\027\n\017entity_page_ids\030\002 \003(\005\022"
    "\026\n\016scene_page_ids\030\003 \003(\005\"8\n\022NSPanelDefaul"
    "tPage\022\010\n\004HOME\020\000\022\n\n\006SCENES\020\001\022\014\n\010ENTITIES\020"
    "\002\"\250\001\n\026NSPanelScreensaverMode\022\033\n\027WEATHER_"
    "WITH_BACKGROUND\020\000\022\036\n\032WEATHER_WITHOUT_BAC"
    "KGROUND\020\001\022\034\n\030DATETIME_WITH_BACKGROUND\020\003\022"
    "\037\n\033DATETIME_WITHOUT_BACKGROUND\020\004\022\022\n\016NO_S"
    "CREENSAVER\020\005\"\?\n\021NSPanelButtonMode\022\n\n\006DIR"
    "ECT\020\000\022\n\n\006FOLLOW\020\001\022\022\n\016NOTIFY_MANAGER\020\002\"C\n"
    "\016NSPanelWarning\022#\n\005level\030\001 \001(\0162\024.NSPanel"
    "WarningLevel\022\014\n\004text\030\002 \001(\t\"\311\002\n\023NSPanelSt"
    "atusReport\0221\n\rnspanel_state\030\001 \001(\0162\032.NSPa"
    "nelStatusReport.state\022\027\n\017update_progress"
    "\030\002 \001(\005\022\014\n\004rssi\030\003 \001(\005\022\025\n\rheap_used_pct\030\004 "
    "\001(\005\022\023\n\013mac_address\030\005 \001(\t\022\023\n\013temperature\030"
    "\006 \001(\002\022\022\n\nip_address\030\007 \001(\t\022!\n\010warnings\030\010 "
    "\003(\0132\017.NSPanelWarning\"`\n\005state\022\n\n\006ONLINE\020"
    "\000\022\013\n\007OFFLINE\020\001\022\020\n\014UPDATING_TFT\020\002\022\025\n\021UPDA"
    "TING_FIRMWARE\020\003\022\025\n\021UPDATING_LITTLEFS\020\004\"\325"
    "\001\n\022NSPanelLightStatus\022\n\n\002id\030\001 \001(\005\022\014\n\004nam"
    "e\030\002 \001(\t\022\017\n\007can_dim\030\003 \001(\010\022\035\n\025can_color_te"
    "mperature\030\004 \001(\010\022\017\n\007can_rgb\030\005 \001(\010\022\023\n\013ligh"
    "t_level\030\006 \001(\005\022\022\n\ncolor_temp\030\007 \001(\005\022\013\n\003hue"
    "\030\010 \001(\005\022\022\n\nsaturation\030\t \001(\005\022\032\n\022room_view_"
    "position\030\n \001(\005\"\230\002\n\027NSPanelRoomEntitiesPa"
    "ge\022\n\n\002id\030\001 \001(\005\022\021\n\tpage_type\030\002 \001(\005\022\023\n\013hea"
    "der_text\030\003 \001(\t\0225\n\010entities\030\004 \003(\0132#.NSPan"
    "elRoomEntitiesPage.EntitySlot\032\221\001\n\nEntity"
    "Slot\022\032\n\022room_view_position\030\001 \001(\005\022\014\n\004name"
    "\030\002 \001(\t\022\014\n\004icon\030\003 \001(\t\022\013\n\003pco\030\004 \001(\005\022\014\n\004pco"
    "2\030\005 \001(\005\022\026\n\016can_save_scene\030\006 \001(\010\022\030\n\020mqtt_"
    "state_topic\030\007 \001(\t\"\226\003\n\021NSPanelRoomStatus\022"
    "\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\031\n\021average_dim"
    "_level\030\003 \001(\005\022 \n\030ceiling_lights_dim_level"
    "\030\004 \001(\005\022\036\n\026table_lights_dim_level\030\005 \001(\005\022!"
    "\n\031average_color_temperature\030\006 \001(\005\022.\n&cei"
    "ling_lights_color_temperature_value\030\007 \001("
    "\005\022,\n$table_lights_color_temperature_valu"
    "e\030\010 \001(\005\022\032\n\022num_ceiling_lights\030\t \001(\005\022\030\n\020n"
    "um_table_lights\030\n \001(\005\022\035\n\025num_ceiling_lig"
    "hts_on\030\013 \001(\005\022\033\n\023num_table_lights_on\030\014 \001("
    "\005\022\027\n\017entity_page_ids\030\r \003(\005\"\277\003\n\024NSPanelWe"
    "atherUpdate\022:\n\016forecast_items\030\001 \003(\0132\".NS"
    "PanelWeatherUpdate.ForecastItem\022\034\n\024curre"
    "nt_weather_icon\030\002 \001(\t\022\"\n\032current_tempera"
    "ture_string\030\003 \001(\t\022\"\n\032current_maxmin_temp"
    "erature\030\004 \001(\t\022\033\n\023current_wind_string\030\005 \001"
    "(\t\022\026\n\016sunrise_string\030\006 \001(\t\022\025\n\rsunset_str"
    "ing\030\007 \001(\t\022$\n\034current_precipitation_strin"
    "g\030\010 \001(\t\032\222\001\n\014ForecastItem\022\024\n\014weather_icon"
    "\030\001 \001(\t\022\034\n\024precipitation_string\030\002 \001(\t\022!\n\031"
    "temperature_maxmin_string\030\003 \001(\t\022\023\n\013wind_"
    "string\030\004 \001(\t\022\026\n\016display_string\030\005 \001(\t\"\315\n\n"
    "\031NSPanelMQTTManagerCommand\022M\n\022first_page"
    "_turn_on\030\001 \001(\0132/.NSPanelMQTTManagerComma"
    "nd.FirstPageTurnLightOnH\000\022O\n\023first_page_"
    "turn_off\030\002 \001(\01320.NSPanelMQTTManagerComma"
    "nd.FirstPageTurnLightOffH\000\022@\n\rlight_comm"
    "and\030\003 \001(\0132\'.NSPanelMQTTManagerCommand.Li"
    "ghtCommandH\000\022c\n toggle_entity_from_entit"
    "ies_page\030\004 \001(\01327.NSPanelMQTTManagerComma"
    "nd.ToggleEntityFromEntitiesPageH\000\022I\n\022sav"
    "e_scene_command\030\005 \001(\0132+.NSPanelMQTTManag"
    "erCommand.SaveSceneCommandH\000\022B\n\016button_p"
    "ressed\030\006 \001(\0132(.NSPanelMQTTManagerCommand"
    ".ButtonPressedH\000\032\372\001\n\024FirstPageTurnLightO"
    "n\022E\n\raffect_lights\030\001 \001(\0162..NSPanelMQTTMa"
    "nagerCommand.AffectLightsOptions\022\037\n\027brig"
    "htness_slider_value\030\002 \001(\005\022\033\n\023kelvin_slid"
    "er_value\030\003 \001(\005\022\025\n\rselected_room\030\004 \001(\005\022\016\n"
    "\006global\030\005 \001(\010\022\034\n\024has_brightness_value\030\006 "
    "\001(\010\022\030\n\020has_kelvin_value\030\007 \001(\010\032n\n\025FirstPa"
    "geTurnLightOff\022E\n\raffect_lights\030\001 \001(\0162.."
    "NSPanelMQTTManagerCommand.AffectLightsOp"
    "tions\022\016\n\006global\030\002 \001(\010\032\321\001\n\014LightCommand\022\021"
    "\n\tlight_ids\030\001 \003(\005\022\026\n\016has_brightness\030\002 \001("
    "\010\022\022\n\nbrightness\030\003 \001(\005\022\035\n\025has_color_tempe"
    "rature\030\004 \001(\010\022\031\n\021color_temperature\030\005 \001(\005\022"
    "\017\n\007has_hue\030\006 \001(\010\022\013\n\003hue\030\007 \001(\005\022\026\n\016has_sat"
    "uration\030\010 \001(\010\022\022\n\nsaturation\030\t \001(\005\032K\n\034Tog"
    "gleEntityFromEntitiesPage\022\026\n\016entity_page"
    "_id\030\001 \001(\005\022\023\n\013entity_slot\030\002 \001(\005\032\?\n\020SaveSc"
    "eneCommand\022\026\n\016entity_page_id\030\001 \001(\005\022\023\n\013en"
    "tity_slot\030\002 \001(\005\0326\n\rButtonPressed\022\022\n\nnspa"
    "nel_id\030\001 \001(\005\022\021\n\tbutton_id\030\002 \001(\005\"D\n\023Affec"
    "tLightsOptions\022\007\n\003ALL\020\000\022\020\n\014TABLE_LIGHTS\020"
    "\001\022\022\n\016CEILING_LIGHTS\020\002B\r\n\013CommandData*[\n\023"
    "NSPanelWarningLevel\022\014\n\010CRITICAL\020\000\022\t\n\005ERR"
    "OR\020\001\022\013\n\007WARNING\020\002\022\010\n\004INFO\020\003\022\t\n\005DEBUG\020\004\022\t"
    "\n\005TRACE\020\005b\006proto3"
};
static ::absl::once_flag descriptor_table_protobuf_5fnspanel_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_protobuf_5fnspanel_2eproto = {
    false,
    false,
    4697,
    descriptor_table_protodef_protobuf_5fnspanel_2eproto,
    "protobuf_nspanel.proto",
    &descriptor_table_protobuf_5fnspanel_2eproto_once,
    nullptr,
    0,
    17,
    schemas,
    file_default_instances,
    TableStruct_protobuf_5fnspanel_2eproto::offsets,
    file_level_enum_descriptors_protobuf_5fnspanel_2eproto,
    file_level_service_descriptors_protobuf_5fnspanel_2eproto,
};
const ::google::protobuf::EnumDescriptor* NSPanelConfig_NSPanelDefaultPage_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto);
  return file_level_enum_descriptors_protobuf_5fnspanel_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelConfig_NSPanelDefaultPage_internal_data_[] = {
    196608u, 0u, };
bool NSPanelConfig_NSPanelDefaultPage_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelConfig_NSPanelDefaultPage NSPanelConfig::HOME;
constexpr NSPanelConfig_NSPanelDefaultPage NSPanelConfig::SCENES;
constexpr NSPanelConfig_NSPanelDefaultPage NSPanelConfig::ENTITIES;
constexpr NSPanelConfig_NSPanelDefaultPage NSPanelConfig::NSPanelDefaultPage_MIN;
constexpr NSPanelConfig_NSPanelDefaultPage NSPanelConfig::NSPanelDefaultPage_MAX;
constexpr int NSPanelConfig::NSPanelDefaultPage_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NSPanelConfig_NSPanelScreensaverMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto);
  return file_level_enum_descriptors_protobuf_5fnspanel_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelConfig_NSPanelScreensaverMode_internal_data_[] = {
    131072u, 32u, 14u, };
bool NSPanelConfig_NSPanelScreensaverMode_IsValid(int value) {
  return 0 <= value && value <= 5 && ((59u >> value) & 1) != 0;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelConfig_NSPanelScreensaverMode NSPanelConfig::WEATHER_WITH_BACKGROUND;
constexpr NSPanelConfig_NSPanelScreensaverMode NSPanelConfig::WEATHER_WITHOUT_BACKGROUND;
constexpr NSPanelConfig_NSPanelScreensaverMode NSPanelConfig::DATETIME_WITH_BACKGROUND;
constexpr NSPanelConfig_NSPanelScreensaverMode NSPanelConfig::DATETIME_WITHOUT_BACKGROUND;
constexpr NSPanelConfig_NSPanelScreensaverMode NSPanelConfig::NO_SCREENSAVER;
constexpr NSPanelConfig_NSPanelScreensaverMode NSPanelConfig::NSPanelScreensaverMode_MIN;
constexpr NSPanelConfig_NSPanelScreensaverMode NSPanelConfig::NSPanelScreensaverMode_MAX;
constexpr int NSPanelConfig::NSPanelScreensaverMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NSPanelConfig_NSPanelButtonMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto);
  return file_level_enum_descriptors_protobuf_5fnspanel_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelConfig_NSPanelButtonMode_internal_data_[] = {
    196608u, 0u, };
bool NSPanelConfig_NSPanelButtonMode_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelConfig_NSPanelButtonMode NSPanelConfig::DIRECT;
constexpr NSPanelConfig_NSPanelButtonMode NSPanelConfig::FOLLOW;
constexpr NSPanelConfig_NSPanelButtonMode NSPanelConfig::NOTIFY_MANAGER;
constexpr NSPanelConfig_NSPanelButtonMode NSPanelConfig::NSPanelButtonMode_MIN;
constexpr NSPanelConfig_NSPanelButtonMode NSPanelConfig::NSPanelButtonMode_MAX;
constexpr int NSPanelConfig::NSPanelButtonMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NSPanelStatusReport_state_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto);
  return file_level_enum_descriptors_protobuf_5fnspanel_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelStatusReport_state_internal_data_[] = {
    327680u, 0u, };
bool NSPanelStatusReport_state_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelStatusReport_state NSPanelStatusReport::ONLINE;
constexpr NSPanelStatusReport_state NSPanelStatusReport::OFFLINE;
constexpr NSPanelStatusReport_state NSPanelStatusReport::UPDATING_TFT;
constexpr NSPanelStatusReport_state NSPanelStatusReport::UPDATING_FIRMWARE;
constexpr NSPanelStatusReport_state NSPanelStatusReport::UPDATING_LITTLEFS;
constexpr NSPanelStatusReport_state NSPanelStatusReport::state_MIN;
constexpr NSPanelStatusReport_state NSPanelStatusReport::state_MAX;
constexpr int NSPanelStatusReport::state_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NSPanelMQTTManagerCommand_AffectLightsOptions_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto);
  return file_level_enum_descriptors_protobuf_5fnspanel_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelMQTTManagerCommand_AffectLightsOptions_internal_data_[] = {
    196608u, 0u, };
bool NSPanelMQTTManagerCommand_AffectLightsOptions_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand::ALL;
constexpr NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand::TABLE_LIGHTS;
constexpr NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand::CEILING_LIGHTS;
constexpr NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand::AffectLightsOptions_MIN;
constexpr NSPanelMQTTManagerCommand_AffectLightsOptions NSPanelMQTTManagerCommand::AffectLightsOptions_MAX;
constexpr int NSPanelMQTTManagerCommand::AffectLightsOptions_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NSPanelWarningLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto);
  return file_level_enum_descriptors_protobuf_5fnspanel_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelWarningLevel_internal_data_[] = {
    393216u, 0u, };
bool NSPanelWarningLevel_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

class NSPanelConfig_RoomInfo::_Internal {
 public:
};

NSPanelConfig_RoomInfo::NSPanelConfig_RoomInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelConfig.RoomInfo)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelConfig_RoomInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelConfig_RoomInfo& from_msg)
      : entity_page_ids_{visibility, arena, from.entity_page_ids_},
        _entity_page_ids_cached_byte_size_{0},
        scene_page_ids_{visibility, arena, from.scene_page_ids_},
        _scene_page_ids_cached_byte_size_{0},
        _cached_size_{0} {}

NSPanelConfig_RoomInfo::NSPanelConfig_RoomInfo(
    ::google::protobuf::Arena* arena,
    const NSPanelConfig_RoomInfo& from)
    : ::google::protobuf::Message(arena) {
  NSPanelConfig_RoomInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.room_id_ = from._impl_.room_id_;

  // @@protoc_insertion_point(copy_constructor:NSPanelConfig.RoomInfo)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelConfig_RoomInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entity_page_ids_{visibility, arena},
        _entity_page_ids_cached_byte_size_{0},
        scene_page_ids_{visibility, arena},
        _scene_page_ids_cached_byte_size_{0},
        _cached_size_{0} {}

inline void NSPanelConfig_RoomInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.room_id_ = {};
}
NSPanelConfig_RoomInfo::~NSPanelConfig_RoomInfo() {
  // @@protoc_insertion_point(destructor:NSPanelConfig.RoomInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelConfig_RoomInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelConfig_RoomInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelConfig_RoomInfo, _impl_._cached_size_),
              false,
          },
          &NSPanelConfig_RoomInfo::MergeImpl,
          &NSPanelConfig_RoomInfo::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> NSPanelConfig_RoomInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelConfig_RoomInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelConfig_RoomInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig_RoomInfo, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig_RoomInfo, _impl_.room_id_)}},
    // repeated int32 entity_page_ids = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig_RoomInfo, _impl_.entity_page_ids_)}},
    // repeated int32 scene_page_ids = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig_RoomInfo, _impl_.scene_page_ids_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig_RoomInfo, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 entity_page_ids = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig_RoomInfo, _impl_.entity_page_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 scene_page_ids = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig_RoomInfo, _impl_.scene_page_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void NSPanelConfig_RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelConfig.RoomInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_page_ids_.Clear();
  _impl_.scene_page_ids_.Clear();
  _impl_.room_id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelConfig_RoomInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelConfig.RoomInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_room_id(), target);
  }

  // repeated int32 entity_page_ids = 2;
  {
    int byte_size = _impl_._entity_page_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_entity_page_ids(), byte_size, target);
    }
  }

  // repeated int32 scene_page_ids = 3;
  {
    int byte_size = _impl_._scene_page_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_scene_page_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelConfig.RoomInfo)
  return target;
}

::size_t NSPanelConfig_RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelConfig.RoomInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated int32 entity_page_ids = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_entity_page_ids())
    ;
    _impl_._entity_page_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 scene_page_ids = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_scene_page_ids())
    ;
    _impl_._scene_page_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_room_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelConfig_RoomInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelConfig_RoomInfo*>(&to_msg);
  auto& from = static_cast<const NSPanelConfig_RoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelConfig.RoomInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entity_page_ids()->MergeFrom(from._internal_entity_page_ids());
  _this->_internal_mutable_scene_page_ids()->MergeFrom(from._internal_scene_page_ids());
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelConfig_RoomInfo::CopyFrom(const NSPanelConfig_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelConfig.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelConfig_RoomInfo::InternalSwap(NSPanelConfig_RoomInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entity_page_ids_.InternalSwap(&other->_impl_.entity_page_ids_);
  _impl_.scene_page_ids_.InternalSwap(&other->_impl_.scene_page_ids_);
        swap(_impl_.room_id_, other->_impl_.room_id_);
}

::google::protobuf::Metadata NSPanelConfig_RoomInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelConfig::_Internal {
 public:
};

NSPanelConfig::NSPanelConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelConfig)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelConfig& from_msg)
      : room_infos_{visibility, arena, from.room_infos_},
        global_scene_entity_page_ids_{visibility, arena, from.global_scene_entity_page_ids_},
        _global_scene_entity_page_ids_cached_byte_size_{0},
        relay1_relay_group_{visibility, arena, from.relay1_relay_group_},
        _relay1_relay_group_cached_byte_size_{0},
        relay2_relay_group_{visibility, arena, from.relay2_relay_group_},
        _relay2_relay_group_cached_byte_size_{0},
        name_(arena, from.name_),
        _cached_size_{0} {}

NSPanelConfig::NSPanelConfig(
    ::google::protobuf::Arena* arena,
    const NSPanelConfig& from)
    : ::google::protobuf::Message(arena) {
  NSPanelConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, default_room_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, default_room_),
           offsetof(Impl_, default_light_brightess_) -
               offsetof(Impl_, default_room_) +
               sizeof(Impl_::default_light_brightess_));

  // @@protoc_insertion_point(copy_constructor:NSPanelConfig)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : room_infos_{visibility, arena},
        global_scene_entity_page_ids_{visibility, arena},
        _global_scene_entity_page_ids_cached_byte_size_{0},
        relay1_relay_group_{visibility, arena},
        _relay1_relay_group_cached_byte_size_{0},
        relay2_relay_group_{visibility, arena},
        _relay2_relay_group_cached_byte_size_{0},
        name_(arena),
        _cached_size_{0} {}

inline void NSPanelConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, default_room_),
           0,
           offsetof(Impl_, default_light_brightess_) -
               offsetof(Impl_, default_room_) +
               sizeof(Impl_::default_light_brightess_));
}
NSPanelConfig::~NSPanelConfig() {
  // @@protoc_insertion_point(destructor:NSPanelConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelConfig::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_._cached_size_),
              false,
          },
          &NSPanelConfig::MergeImpl,
          &NSPanelConfig::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 31, 1, 50, 7> NSPanelConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    39, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    515899392,  // skipmap
    offsetof(decltype(_table_), field_entries),
    31,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NSPanelConfig_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.name_)}},
    // int32 default_room = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.default_room_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.default_room_)}},
    // .NSPanelConfig.NSPanelDefaultPage default_page = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.default_page_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.default_page_)}},
    // int32 screensaver_activation_timeout = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.screensaver_activation_timeout_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.screensaver_activation_timeout_)}},
    // int32 min_button_push_time = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.min_button_push_time_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.min_button_push_time_)}},
    // int32 button_long_press_time = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.button_long_press_time_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.button_long_press_time_)}},
    // int32 special_mode_trigger_time = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.special_mode_trigger_time_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.special_mode_trigger_time_)}},
    // int32 special_mode_release_time = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.special_mode_release_time_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.special_mode_release_time_)}},
    // int32 screen_dim_level = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.screen_dim_level_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.screen_dim_level_)}},
    // int32 screensaver_dim_level = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.screensaver_dim_level_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.screensaver_dim_level_)}},
    // .NSPanelConfig.NSPanelScreensaverMode screensaver_mode = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelConfig, _impl_.screensaver_mode_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.screensaver_mode_)}},
    // bool show_screensaver_inside_temperature = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelConfig, _impl_.show_screensaver_inside_temperature_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.show_screensaver_inside_temperature_)}},
    // bool show_screensaver_outside_temperature = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelConfig, _impl_.show_screensaver_outside_temperature_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.show_screensaver_outside_temperature_)}},
    // bool clock_us_style = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelConfig, _impl_.clock_us_style_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.clock_us_style_)}},
    // bool use_fahrenheit = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelConfig, _impl_.use_fahrenheit_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.use_fahrenheit_)}},
    // bool is_us_panel = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.is_us_panel_)}},
    // repeated .NSPanelConfig.RoomInfo room_infos = 17;
    {::_pbi::TcParser::FastMtR2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.room_infos_)}},
    // bool reverse_relays = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.reverse_relays_)}},
    // bool relay1_default_mode = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.relay1_default_mode_)}},
    // bool relay2_default_mode = 20;
    {::_pbi::TcParser::FastV8S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.relay2_default_mode_)}},
    // int32 temperature_calibration = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.temperature_calibration_)}},
    // .NSPanelConfig.NSPanelButtonMode button1_mode = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.button1_mode_)}},
    // bool locked_to_default_room = 39;
    {::_pbi::TcParser::FastV8S2,
     {696, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.locked_to_default_room_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .NSPanelConfig.NSPanelButtonMode button2_mode = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.button2_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 global_scene_entity_page_ids = 30;
    {::_pbi::TcParser::FastV32P2,
     {498, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.global_scene_entity_page_ids_)}},
    // bool optimistic_mode = 31;
    {::_pbi::TcParser::FastV8S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.optimistic_mode_)}},
  }}, {{
    33, 0, 1,
    65418, 26,
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 default_room = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.default_room_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .NSPanelConfig.NSPanelDefaultPage default_page = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.default_page_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 screensaver_activation_timeout = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.screensaver_activation_timeout_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 min_button_push_time = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.min_button_push_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 button_long_press_time = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.button_long_press_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 special_mode_trigger_time = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.special_mode_trigger_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 special_mode_release_time = 8;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.special_mode_release_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 screen_dim_level = 9;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.screen_dim_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 screensaver_dim_level = 10;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.screensaver_dim_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .NSPanelConfig.NSPanelScreensaverMode screensaver_mode = 11;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.screensaver_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool show_screensaver_inside_temperature = 12;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.show_screensaver_inside_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool show_screensaver_outside_temperature = 13;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.show_screensaver_outside_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool clock_us_style = 14;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.clock_us_style_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool use_fahrenheit = 15;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.use_fahrenheit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_us_panel = 16;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.is_us_panel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .NSPanelConfig.RoomInfo room_infos = 17;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.room_infos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool reverse_relays = 18;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.reverse_relays_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool relay1_default_mode = 19;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.relay1_default_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool relay2_default_mode = 20;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.relay2_default_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 temperature_calibration = 21;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.temperature_calibration_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .NSPanelConfig.NSPanelButtonMode button1_mode = 22;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.button1_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .NSPanelConfig.NSPanelButtonMode button2_mode = 25;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.button2_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated int32 global_scene_entity_page_ids = 30;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.global_scene_entity_page_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // bool optimistic_mode = 31;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.optimistic_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 raise_light_level_to_100_above = 32;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.raise_light_level_to_100_above_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 nspanel_id = 33;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.nspanel_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 relay1_relay_group = 35;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.relay1_relay_group_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 relay2_relay_group = 37;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.relay2_relay_group_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // int32 default_light_brightess = 38;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.default_light_brightess_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool locked_to_default_room = 39;
    {PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.locked_to_default_room_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::NSPanelConfig_RoomInfo>()},
  }}, {{
    "\15\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "NSPanelConfig"
    "name"
  }},
};

PROTOBUF_NOINLINE void NSPanelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_infos_.Clear();
  _impl_.global_scene_entity_page_ids_.Clear();
  _impl_.relay1_relay_group_.Clear();
  _impl_.relay2_relay_group_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.default_room_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.default_light_brightess_) -
      reinterpret_cast<char*>(&_impl_.default_room_)) + sizeof(_impl_.default_light_brightess_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelConfig.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 default_room = 2;
  if (this->_internal_default_room() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_default_room(), target);
  }

  // .NSPanelConfig.NSPanelDefaultPage default_page = 3;
  if (this->_internal_default_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_default_page(), target);
  }

  // int32 screensaver_activation_timeout = 4;
  if (this->_internal_screensaver_activation_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_screensaver_activation_timeout(), target);
  }

  // int32 min_button_push_time = 5;
  if (this->_internal_min_button_push_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_min_button_push_time(), target);
  }

  // int32 button_long_press_time = 6;
  if (this->_internal_button_long_press_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_button_long_press_time(), target);
  }

  // int32 special_mode_trigger_time = 7;
  if (this->_internal_special_mode_trigger_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_special_mode_trigger_time(), target);
  }

  // int32 special_mode_release_time = 8;
  if (this->_internal_special_mode_release_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_special_mode_release_time(), target);
  }

  // int32 screen_dim_level = 9;
  if (this->_internal_screen_dim_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_screen_dim_level(), target);
  }

  // int32 screensaver_dim_level = 10;
  if (this->_internal_screensaver_dim_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_screensaver_dim_level(), target);
  }

  // .NSPanelConfig.NSPanelScreensaverMode screensaver_mode = 11;
  if (this->_internal_screensaver_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_screensaver_mode(), target);
  }

  // bool show_screensaver_inside_temperature = 12;
  if (this->_internal_show_screensaver_inside_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_show_screensaver_inside_temperature(), target);
  }

  // bool show_screensaver_outside_temperature = 13;
  if (this->_internal_show_screensaver_outside_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_show_screensaver_outside_temperature(), target);
  }

  // bool clock_us_style = 14;
  if (this->_internal_clock_us_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_clock_us_style(), target);
  }

  // bool use_fahrenheit = 15;
  if (this->_internal_use_fahrenheit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_use_fahrenheit(), target);
  }

  // bool is_us_panel = 16;
  if (this->_internal_is_us_panel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_is_us_panel(), target);
  }

  // repeated .NSPanelConfig.RoomInfo room_infos = 17;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_room_infos_size());
       i < n; i++) {
    const auto& repfield = this->_internal_room_infos().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            17, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // bool reverse_relays = 18;
  if (this->_internal_reverse_relays() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_reverse_relays(), target);
  }

  // bool relay1_default_mode = 19;
  if (this->_internal_relay1_default_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_relay1_default_mode(), target);
  }

  // bool relay2_default_mode = 20;
  if (this->_internal_relay2_default_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        20, this->_internal_relay2_default_mode(), target);
  }

  // int32 temperature_calibration = 21;
  if (this->_internal_temperature_calibration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        21, this->_internal_temperature_calibration(), target);
  }

  // .NSPanelConfig.NSPanelButtonMode button1_mode = 22;
  if (this->_internal_button1_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        22, this->_internal_button1_mode(), target);
  }

  // .NSPanelConfig.NSPanelButtonMode button2_mode = 25;
  if (this->_internal_button2_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        25, this->_internal_button2_mode(), target);
  }

  // repeated int32 global_scene_entity_page_ids = 30;
  {
    int byte_size = _impl_._global_scene_entity_page_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          30, _internal_global_scene_entity_page_ids(), byte_size, target);
    }
  }

  // bool optimistic_mode = 31;
  if (this->_internal_optimistic_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        31, this->_internal_optimistic_mode(), target);
  }

  // int32 raise_light_level_to_100_above = 32;
  if (this->_internal_raise_light_level_to_100_above() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        32, this->_internal_raise_light_level_to_100_above(), target);
  }

  // int32 nspanel_id = 33;
  if (this->_internal_nspanel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        33, this->_internal_nspanel_id(), target);
  }

  // repeated int32 relay1_relay_group = 35;
  {
    int byte_size = _impl_._relay1_relay_group_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          35, _internal_relay1_relay_group(), byte_size, target);
    }
  }

  // repeated int32 relay2_relay_group = 37;
  {
    int byte_size = _impl_._relay2_relay_group_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          37, _internal_relay2_relay_group(), byte_size, target);
    }
  }

  // int32 default_light_brightess = 38;
  if (this->_internal_default_light_brightess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        38, this->_internal_default_light_brightess(), target);
  }

  // bool locked_to_default_room = 39;
  if (this->_internal_locked_to_default_room() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        39, this->_internal_locked_to_default_room(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelConfig)
  return target;
}

::size_t NSPanelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .NSPanelConfig.RoomInfo room_infos = 17;
  total_size += 2UL * this->_internal_room_infos_size();
  for (const auto& msg : this->_internal_room_infos()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated int32 global_scene_entity_page_ids = 30;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_global_scene_entity_page_ids())
    ;
    _impl_._global_scene_entity_page_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 relay1_relay_group = 35;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_relay1_relay_group())
    ;
    _impl_._relay1_relay_group_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 relay2_relay_group = 37;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_relay2_relay_group())
    ;
    _impl_._relay2_relay_group_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 default_room = 2;
  if (this->_internal_default_room() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_default_room());
  }

  // .NSPanelConfig.NSPanelDefaultPage default_page = 3;
  if (this->_internal_default_page() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_default_page());
  }

  // int32 screensaver_activation_timeout = 4;
  if (this->_internal_screensaver_activation_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_screensaver_activation_timeout());
  }

  // int32 min_button_push_time = 5;
  if (this->_internal_min_button_push_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_min_button_push_time());
  }

  // int32 button_long_press_time = 6;
  if (this->_internal_button_long_press_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_button_long_press_time());
  }

  // int32 special_mode_trigger_time = 7;
  if (this->_internal_special_mode_trigger_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_special_mode_trigger_time());
  }

  // int32 special_mode_release_time = 8;
  if (this->_internal_special_mode_release_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_special_mode_release_time());
  }

  // int32 screen_dim_level = 9;
  if (this->_internal_screen_dim_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_screen_dim_level());
  }

  // int32 screensaver_dim_level = 10;
  if (this->_internal_screensaver_dim_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_screensaver_dim_level());
  }

  // .NSPanelConfig.NSPanelScreensaverMode screensaver_mode = 11;
  if (this->_internal_screensaver_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_screensaver_mode());
  }

  // bool show_screensaver_inside_temperature = 12;
  if (this->_internal_show_screensaver_inside_temperature() != 0) {
    total_size += 2;
  }

  // bool show_screensaver_outside_temperature = 13;
  if (this->_internal_show_screensaver_outside_temperature() != 0) {
    total_size += 2;
  }

  // bool clock_us_style = 14;
  if (this->_internal_clock_us_style() != 0) {
    total_size += 2;
  }

  // bool use_fahrenheit = 15;
  if (this->_internal_use_fahrenheit() != 0) {
    total_size += 2;
  }

  // bool is_us_panel = 16;
  if (this->_internal_is_us_panel() != 0) {
    total_size += 3;
  }

  // bool reverse_relays = 18;
  if (this->_internal_reverse_relays() != 0) {
    total_size += 3;
  }

  // bool relay1_default_mode = 19;
  if (this->_internal_relay1_default_mode() != 0) {
    total_size += 3;
  }

  // bool relay2_default_mode = 20;
  if (this->_internal_relay2_default_mode() != 0) {
    total_size += 3;
  }

  // int32 temperature_calibration = 21;
  if (this->_internal_temperature_calibration() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_temperature_calibration());
  }

  // .NSPanelConfig.NSPanelButtonMode button1_mode = 22;
  if (this->_internal_button1_mode() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_button1_mode());
  }

  // .NSPanelConfig.NSPanelButtonMode button2_mode = 25;
  if (this->_internal_button2_mode() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_button2_mode());
  }

  // int32 raise_light_level_to_100_above = 32;
  if (this->_internal_raise_light_level_to_100_above() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_raise_light_level_to_100_above());
  }

  // int32 nspanel_id = 33;
  if (this->_internal_nspanel_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_nspanel_id());
  }

  // bool optimistic_mode = 31;
  if (this->_internal_optimistic_mode() != 0) {
    total_size += 3;
  }

  // bool locked_to_default_room = 39;
  if (this->_internal_locked_to_default_room() != 0) {
    total_size += 3;
  }

  // int32 default_light_brightess = 38;
  if (this->_internal_default_light_brightess() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_default_light_brightess());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelConfig*>(&to_msg);
  auto& from = static_cast<const NSPanelConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_room_infos()->MergeFrom(
      from._internal_room_infos());
  _this->_internal_mutable_global_scene_entity_page_ids()->MergeFrom(from._internal_global_scene_entity_page_ids());
  _this->_internal_mutable_relay1_relay_group()->MergeFrom(from._internal_relay1_relay_group());
  _this->_internal_mutable_relay2_relay_group()->MergeFrom(from._internal_relay2_relay_group());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_default_room() != 0) {
    _this->_impl_.default_room_ = from._impl_.default_room_;
  }
  if (from._internal_default_page() != 0) {
    _this->_impl_.default_page_ = from._impl_.default_page_;
  }
  if (from._internal_screensaver_activation_timeout() != 0) {
    _this->_impl_.screensaver_activation_timeout_ = from._impl_.screensaver_activation_timeout_;
  }
  if (from._internal_min_button_push_time() != 0) {
    _this->_impl_.min_button_push_time_ = from._impl_.min_button_push_time_;
  }
  if (from._internal_button_long_press_time() != 0) {
    _this->_impl_.button_long_press_time_ = from._impl_.button_long_press_time_;
  }
  if (from._internal_special_mode_trigger_time() != 0) {
    _this->_impl_.special_mode_trigger_time_ = from._impl_.special_mode_trigger_time_;
  }
  if (from._internal_special_mode_release_time() != 0) {
    _this->_impl_.special_mode_release_time_ = from._impl_.special_mode_release_time_;
  }
  if (from._internal_screen_dim_level() != 0) {
    _this->_impl_.screen_dim_level_ = from._impl_.screen_dim_level_;
  }
  if (from._internal_screensaver_dim_level() != 0) {
    _this->_impl_.screensaver_dim_level_ = from._impl_.screensaver_dim_level_;
  }
  if (from._internal_screensaver_mode() != 0) {
    _this->_impl_.screensaver_mode_ = from._impl_.screensaver_mode_;
  }
  if (from._internal_show_screensaver_inside_temperature() != 0) {
    _this->_impl_.show_screensaver_inside_temperature_ = from._impl_.show_screensaver_inside_temperature_;
  }
  if (from._internal_show_screensaver_outside_temperature() != 0) {
    _this->_impl_.show_screensaver_outside_temperature_ = from._impl_.show_screensaver_outside_temperature_;
  }
  if (from._internal_clock_us_style() != 0) {
    _this->_impl_.clock_us_style_ = from._impl_.clock_us_style_;
  }
  if (from._internal_use_fahrenheit() != 0) {
    _this->_impl_.use_fahrenheit_ = from._impl_.use_fahrenheit_;
  }
  if (from._internal_is_us_panel() != 0) {
    _this->_impl_.is_us_panel_ = from._impl_.is_us_panel_;
  }
  if (from._internal_reverse_relays() != 0) {
    _this->_impl_.reverse_relays_ = from._impl_.reverse_relays_;
  }
  if (from._internal_relay1_default_mode() != 0) {
    _this->_impl_.relay1_default_mode_ = from._impl_.relay1_default_mode_;
  }
  if (from._internal_relay2_default_mode() != 0) {
    _this->_impl_.relay2_default_mode_ = from._impl_.relay2_default_mode_;
  }
  if (from._internal_temperature_calibration() != 0) {
    _this->_impl_.temperature_calibration_ = from._impl_.temperature_calibration_;
  }
  if (from._internal_button1_mode() != 0) {
    _this->_impl_.button1_mode_ = from._impl_.button1_mode_;
  }
  if (from._internal_button2_mode() != 0) {
    _this->_impl_.button2_mode_ = from._impl_.button2_mode_;
  }
  if (from._internal_raise_light_level_to_100_above() != 0) {
    _this->_impl_.raise_light_level_to_100_above_ = from._impl_.raise_light_level_to_100_above_;
  }
  if (from._internal_nspanel_id() != 0) {
    _this->_impl_.nspanel_id_ = from._impl_.nspanel_id_;
  }
  if (from._internal_optimistic_mode() != 0) {
    _this->_impl_.optimistic_mode_ = from._impl_.optimistic_mode_;
  }
  if (from._internal_locked_to_default_room() != 0) {
    _this->_impl_.locked_to_default_room_ = from._impl_.locked_to_default_room_;
  }
  if (from._internal_default_light_brightess() != 0) {
    _this->_impl_.default_light_brightess_ = from._impl_.default_light_brightess_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelConfig::CopyFrom(const NSPanelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelConfig::InternalSwap(NSPanelConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.room_infos_.InternalSwap(&other->_impl_.room_infos_);
  _impl_.global_scene_entity_page_ids_.InternalSwap(&other->_impl_.global_scene_entity_page_ids_);
  _impl_.relay1_relay_group_.InternalSwap(&other->_impl_.relay1_relay_group_);
  _impl_.relay2_relay_group_.InternalSwap(&other->_impl_.relay2_relay_group_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.default_light_brightess_)
      + sizeof(NSPanelConfig::_impl_.default_light_brightess_)
      - PROTOBUF_FIELD_OFFSET(NSPanelConfig, _impl_.default_room_)>(
          reinterpret_cast<char*>(&_impl_.default_room_),
          reinterpret_cast<char*>(&other->_impl_.default_room_));
}

::google::protobuf::Metadata NSPanelConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelWarning::_Internal {
 public:
};

NSPanelWarning::NSPanelWarning(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelWarning)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelWarning::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelWarning& from_msg)
      : text_(arena, from.text_),
        _cached_size_{0} {}

NSPanelWarning::NSPanelWarning(
    ::google::protobuf::Arena* arena,
    const NSPanelWarning& from)
    : ::google::protobuf::Message(arena) {
  NSPanelWarning* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:NSPanelWarning)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelWarning::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : text_(arena),
        _cached_size_{0} {}

inline void NSPanelWarning::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.level_ = {};
}
NSPanelWarning::~NSPanelWarning() {
  // @@protoc_insertion_point(destructor:NSPanelWarning)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelWarning::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelWarning::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelWarning, _impl_._cached_size_),
              false,
          },
          &NSPanelWarning::MergeImpl,
          &NSPanelWarning::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 27, 2> NSPanelWarning::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelWarning_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelWarning>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWarning, _impl_.text_)}},
    // .NSPanelWarningLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelWarning, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWarning, _impl_.level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .NSPanelWarningLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelWarning, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelWarning, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\0\4\0\0\0\0\0"
    "NSPanelWarning"
    "text"
  }},
};

PROTOBUF_NOINLINE void NSPanelWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelWarning)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelWarning::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelWarning)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .NSPanelWarningLevel level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_level(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWarning.text");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelWarning)
  return target;
}

::size_t NSPanelWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelWarning)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .NSPanelWarningLevel level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelWarning::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelWarning*>(&to_msg);
  auto& from = static_cast<const NSPanelWarning&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelWarning)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelWarning::CopyFrom(const NSPanelWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelWarning::InternalSwap(NSPanelWarning* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  swap(_impl_.level_, other->_impl_.level_);
}

::google::protobuf::Metadata NSPanelWarning::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelStatusReport::_Internal {
 public:
};

NSPanelStatusReport::NSPanelStatusReport(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelStatusReport)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelStatusReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelStatusReport& from_msg)
      : warnings_{visibility, arena, from.warnings_},
        mac_address_(arena, from.mac_address_),
        ip_address_(arena, from.ip_address_),
        _cached_size_{0} {}

NSPanelStatusReport::NSPanelStatusReport(
    ::google::protobuf::Arena* arena,
    const NSPanelStatusReport& from)
    : ::google::protobuf::Message(arena) {
  NSPanelStatusReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nspanel_state_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, nspanel_state_),
           offsetof(Impl_, temperature_) -
               offsetof(Impl_, nspanel_state_) +
               sizeof(Impl_::temperature_));

  // @@protoc_insertion_point(copy_constructor:NSPanelStatusReport)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelStatusReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : warnings_{visibility, arena},
        mac_address_(arena),
        ip_address_(arena),
        _cached_size_{0} {}

inline void NSPanelStatusReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nspanel_state_),
           0,
           offsetof(Impl_, temperature_) -
               offsetof(Impl_, nspanel_state_) +
               sizeof(Impl_::temperature_));
}
NSPanelStatusReport::~NSPanelStatusReport() {
  // @@protoc_insertion_point(destructor:NSPanelStatusReport)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelStatusReport::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.mac_address_.Destroy();
  _impl_.ip_address_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelStatusReport::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_._cached_size_),
              false,
          },
          &NSPanelStatusReport::MergeImpl,
          &NSPanelStatusReport::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 57, 2> NSPanelStatusReport::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NSPanelStatusReport_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelStatusReport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .NSPanelWarning warnings = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.warnings_)}},
    // .NSPanelStatusReport.state nspanel_state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelStatusReport, _impl_.nspanel_state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.nspanel_state_)}},
    // int32 update_progress = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelStatusReport, _impl_.update_progress_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.update_progress_)}},
    // int32 rssi = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelStatusReport, _impl_.rssi_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.rssi_)}},
    // int32 heap_used_pct = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelStatusReport, _impl_.heap_used_pct_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.heap_used_pct_)}},
    // string mac_address = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.mac_address_)}},
    // float temperature = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.temperature_)}},
    // string ip_address = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.ip_address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .NSPanelStatusReport.state nspanel_state = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.nspanel_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 update_progress = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.update_progress_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 rssi = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.rssi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 heap_used_pct = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.heap_used_pct_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string mac_address = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.mac_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float temperature = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string ip_address = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.ip_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .NSPanelWarning warnings = 8;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.warnings_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::NSPanelWarning>()},
  }}, {{
    "\23\0\0\0\0\13\0\12\0\0\0\0\0\0\0\0"
    "NSPanelStatusReport"
    "mac_address"
    "ip_address"
  }},
};

PROTOBUF_NOINLINE void NSPanelStatusReport::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelStatusReport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.warnings_.Clear();
  _impl_.mac_address_.ClearToEmpty();
  _impl_.ip_address_.ClearToEmpty();
  ::memset(&_impl_.nspanel_state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.temperature_) -
      reinterpret_cast<char*>(&_impl_.nspanel_state_)) + sizeof(_impl_.temperature_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelStatusReport::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelStatusReport)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .NSPanelStatusReport.state nspanel_state = 1;
  if (this->_internal_nspanel_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_nspanel_state(), target);
  }

  // int32 update_progress = 2;
  if (this->_internal_update_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_update_progress(), target);
  }

  // int32 rssi = 3;
  if (this->_internal_rssi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_rssi(), target);
  }

  // int32 heap_used_pct = 4;
  if (this->_internal_heap_used_pct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_heap_used_pct(), target);
  }

  // string mac_address = 5;
  if (!this->_internal_mac_address().empty()) {
    const std::string& _s = this->_internal_mac_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelStatusReport.mac_address");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // float temperature = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  ::uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_temperature(), target);
  }

  // string ip_address = 7;
  if (!this->_internal_ip_address().empty()) {
    const std::string& _s = this->_internal_ip_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelStatusReport.ip_address");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // repeated .NSPanelWarning warnings = 8;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_warnings_size());
       i < n; i++) {
    const auto& repfield = this->_internal_warnings().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            8, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelStatusReport)
  return target;
}

::size_t NSPanelStatusReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelStatusReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .NSPanelWarning warnings = 8;
  total_size += 1UL * this->_internal_warnings_size();
  for (const auto& msg : this->_internal_warnings()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string mac_address = 5;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mac_address());
  }

  // string ip_address = 7;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip_address());
  }

  // .NSPanelStatusReport.state nspanel_state = 1;
  if (this->_internal_nspanel_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nspanel_state());
  }

  // int32 update_progress = 2;
  if (this->_internal_update_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_update_progress());
  }

  // int32 rssi = 3;
  if (this->_internal_rssi() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rssi());
  }

  // int32 heap_used_pct = 4;
  if (this->_internal_heap_used_pct() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_heap_used_pct());
  }

  // float temperature = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  ::uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelStatusReport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelStatusReport*>(&to_msg);
  auto& from = static_cast<const NSPanelStatusReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelStatusReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_warnings()->MergeFrom(
      from._internal_warnings());
  if (!from._internal_mac_address().empty()) {
    _this->_internal_set_mac_address(from._internal_mac_address());
  }
  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (from._internal_nspanel_state() != 0) {
    _this->_impl_.nspanel_state_ = from._impl_.nspanel_state_;
  }
  if (from._internal_update_progress() != 0) {
    _this->_impl_.update_progress_ = from._impl_.update_progress_;
  }
  if (from._internal_rssi() != 0) {
    _this->_impl_.rssi_ = from._impl_.rssi_;
  }
  if (from._internal_heap_used_pct() != 0) {
    _this->_impl_.heap_used_pct_ = from._impl_.heap_used_pct_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  ::uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_impl_.temperature_ = from._impl_.temperature_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelStatusReport::CopyFrom(const NSPanelStatusReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelStatusReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelStatusReport::InternalSwap(NSPanelStatusReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.warnings_.InternalSwap(&other->_impl_.warnings_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mac_address_, &other->_impl_.mac_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_address_, &other->_impl_.ip_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.temperature_)
      + sizeof(NSPanelStatusReport::_impl_.temperature_)
      - PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.nspanel_state_)>(
          reinterpret_cast<char*>(&_impl_.nspanel_state_),
          reinterpret_cast<char*>(&other->_impl_.nspanel_state_));
}

::google::protobuf::Metadata NSPanelStatusReport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelLightStatus::_Internal {
 public:
};

NSPanelLightStatus::NSPanelLightStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelLightStatus)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelLightStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelLightStatus& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

NSPanelLightStatus::NSPanelLightStatus(
    ::google::protobuf::Arena* arena,
    const NSPanelLightStatus& from)
    : ::google::protobuf::Message(arena) {
  NSPanelLightStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, room_view_position_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::room_view_position_));

  // @@protoc_insertion_point(copy_constructor:NSPanelLightStatus)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelLightStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void NSPanelLightStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, room_view_position_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::room_view_position_));
}
NSPanelLightStatus::~NSPanelLightStatus() {
  // @@protoc_insertion_point(destructor:NSPanelLightStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelLightStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelLightStatus::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_._cached_size_),
              false,
          },
          &NSPanelLightStatus::MergeImpl,
          &NSPanelLightStatus::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 39, 2> NSPanelLightStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelLightStatus_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelLightStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelLightStatus, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.name_)}},
    // bool can_dim = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelLightStatus, _impl_.can_dim_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.can_dim_)}},
    // bool can_color_temperature = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelLightStatus, _impl_.can_color_temperature_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.can_color_temperature_)}},
    // bool can_rgb = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelLightStatus, _impl_.can_rgb_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.can_rgb_)}},
    // int32 light_level = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelLightStatus, _impl_.light_level_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.light_level_)}},
    // int32 color_temp = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelLightStatus, _impl_.color_temp_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.color_temp_)}},
    // int32 hue = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelLightStatus, _impl_.hue_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.hue_)}},
    // int32 saturation = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelLightStatus, _impl_.saturation_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.saturation_)}},
    // int32 room_view_position = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelLightStatus, _impl_.room_view_position_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.room_view_position_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool can_dim = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.can_dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_color_temperature = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.can_color_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_rgb = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.can_rgb_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 light_level = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.light_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 color_temp = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.color_temp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 hue = 8;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.hue_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 saturation = 9;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.saturation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 room_view_position = 10;
    {PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.room_view_position_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\22\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "NSPanelLightStatus"
    "name"
  }},
};

PROTOBUF_NOINLINE void NSPanelLightStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelLightStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.room_view_position_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.room_view_position_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelLightStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelLightStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelLightStatus.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool can_dim = 3;
  if (this->_internal_can_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_can_dim(), target);
  }

  // bool can_color_temperature = 4;
  if (this->_internal_can_color_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_can_color_temperature(), target);
  }

  // bool can_rgb = 5;
  if (this->_internal_can_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_can_rgb(), target);
  }

  // int32 light_level = 6;
  if (this->_internal_light_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_light_level(), target);
  }

  // int32 color_temp = 7;
  if (this->_internal_color_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_color_temp(), target);
  }

  // int32 hue = 8;
  if (this->_internal_hue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_hue(), target);
  }

  // int32 saturation = 9;
  if (this->_internal_saturation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_saturation(), target);
  }

  // int32 room_view_position = 10;
  if (this->_internal_room_view_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_room_view_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelLightStatus)
  return target;
}

::size_t NSPanelLightStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelLightStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool can_dim = 3;
  if (this->_internal_can_dim() != 0) {
    total_size += 2;
  }

  // bool can_color_temperature = 4;
  if (this->_internal_can_color_temperature() != 0) {
    total_size += 2;
  }

  // bool can_rgb = 5;
  if (this->_internal_can_rgb() != 0) {
    total_size += 2;
  }

  // int32 light_level = 6;
  if (this->_internal_light_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_light_level());
  }

  // int32 color_temp = 7;
  if (this->_internal_color_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_color_temp());
  }

  // int32 hue = 8;
  if (this->_internal_hue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_hue());
  }

  // int32 saturation = 9;
  if (this->_internal_saturation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_saturation());
  }

  // int32 room_view_position = 10;
  if (this->_internal_room_view_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_room_view_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelLightStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelLightStatus*>(&to_msg);
  auto& from = static_cast<const NSPanelLightStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelLightStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_can_dim() != 0) {
    _this->_impl_.can_dim_ = from._impl_.can_dim_;
  }
  if (from._internal_can_color_temperature() != 0) {
    _this->_impl_.can_color_temperature_ = from._impl_.can_color_temperature_;
  }
  if (from._internal_can_rgb() != 0) {
    _this->_impl_.can_rgb_ = from._impl_.can_rgb_;
  }
  if (from._internal_light_level() != 0) {
    _this->_impl_.light_level_ = from._impl_.light_level_;
  }
  if (from._internal_color_temp() != 0) {
    _this->_impl_.color_temp_ = from._impl_.color_temp_;
  }
  if (from._internal_hue() != 0) {
    _this->_impl_.hue_ = from._impl_.hue_;
  }
  if (from._internal_saturation() != 0) {
    _this->_impl_.saturation_ = from._impl_.saturation_;
  }
  if (from._internal_room_view_position() != 0) {
    _this->_impl_.room_view_position_ = from._impl_.room_view_position_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelLightStatus::CopyFrom(const NSPanelLightStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelLightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelLightStatus::InternalSwap(NSPanelLightStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.room_view_position_)
      + sizeof(NSPanelLightStatus::_impl_.room_view_position_)
      - PROTOBUF_FIELD_OFFSET(NSPanelLightStatus, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata NSPanelLightStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelRoomEntitiesPage_EntitySlot::_Internal {
 public:
};

NSPanelRoomEntitiesPage_EntitySlot::NSPanelRoomEntitiesPage_EntitySlot(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelRoomEntitiesPage.EntitySlot)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelRoomEntitiesPage_EntitySlot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelRoomEntitiesPage_EntitySlot& from_msg)
      : name_(arena, from.name_),
        icon_(arena, from.icon_),
        mqtt_state_topic_(arena, from.mqtt_state_topic_),
        _cached_size_{0} {}

NSPanelRoomEntitiesPage_EntitySlot::NSPanelRoomEntitiesPage_EntitySlot(
    ::google::protobuf::Arena* arena,
    const NSPanelRoomEntitiesPage_EntitySlot& from)
    : ::google::protobuf::Message(arena) {
  NSPanelRoomEntitiesPage_EntitySlot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_view_position_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_view_position_),
           offsetof(Impl_, can_save_scene_) -
               offsetof(Impl_, room_view_position_) +
               sizeof(Impl_::can_save_scene_));

  // @@protoc_insertion_point(copy_constructor:NSPanelRoomEntitiesPage.EntitySlot)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelRoomEntitiesPage_EntitySlot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        icon_(arena),
        mqtt_state_topic_(arena),
        _cached_size_{0} {}

inline void NSPanelRoomEntitiesPage_EntitySlot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_view_position_),
           0,
           offsetof(Impl_, can_save_scene_) -
               offsetof(Impl_, room_view_position_) +
               sizeof(Impl_::can_save_scene_));
}
NSPanelRoomEntitiesPage_EntitySlot::~NSPanelRoomEntitiesPage_EntitySlot() {
  // @@protoc_insertion_point(destructor:NSPanelRoomEntitiesPage.EntitySlot)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelRoomEntitiesPage_EntitySlot::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.icon_.Destroy();
  _impl_.mqtt_state_topic_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelRoomEntitiesPage_EntitySlot::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_._cached_size_),
              false,
          },
          &NSPanelRoomEntitiesPage_EntitySlot::MergeImpl,
          &NSPanelRoomEntitiesPage_EntitySlot::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 67, 2> NSPanelRoomEntitiesPage_EntitySlot::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelRoomEntitiesPage_EntitySlot_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelRoomEntitiesPage_EntitySlot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_view_position = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomEntitiesPage_EntitySlot, _impl_.room_view_position_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.room_view_position_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.name_)}},
    // string icon = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.icon_)}},
    // int32 pco = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomEntitiesPage_EntitySlot, _impl_.pco_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.pco_)}},
    // int32 pco2 = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomEntitiesPage_EntitySlot, _impl_.pco2_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.pco2_)}},
    // bool can_save_scene = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelRoomEntitiesPage_EntitySlot, _impl_.can_save_scene_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.can_save_scene_)}},
    // string mqtt_state_topic = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.mqtt_state_topic_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_view_position = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.room_view_position_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string icon = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.icon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 pco = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.pco_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 pco2 = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.pco2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool can_save_scene = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.can_save_scene_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string mqtt_state_topic = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.mqtt_state_topic_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\42\0\4\4\0\0\0\20"
    "NSPanelRoomEntitiesPage.EntitySlot"
    "name"
    "icon"
    "mqtt_state_topic"
  }},
};

PROTOBUF_NOINLINE void NSPanelRoomEntitiesPage_EntitySlot::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelRoomEntitiesPage.EntitySlot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.icon_.ClearToEmpty();
  _impl_.mqtt_state_topic_.ClearToEmpty();
  ::memset(&_impl_.room_view_position_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.can_save_scene_) -
      reinterpret_cast<char*>(&_impl_.room_view_position_)) + sizeof(_impl_.can_save_scene_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelRoomEntitiesPage_EntitySlot::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelRoomEntitiesPage.EntitySlot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 room_view_position = 1;
  if (this->_internal_room_view_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_room_view_position(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelRoomEntitiesPage.EntitySlot.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string icon = 3;
  if (!this->_internal_icon().empty()) {
    const std::string& _s = this->_internal_icon();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelRoomEntitiesPage.EntitySlot.icon");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 pco = 4;
  if (this->_internal_pco() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_pco(), target);
  }

  // int32 pco2 = 5;
  if (this->_internal_pco2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_pco2(), target);
  }

  // bool can_save_scene = 6;
  if (this->_internal_can_save_scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_can_save_scene(), target);
  }

  // string mqtt_state_topic = 7;
  if (!this->_internal_mqtt_state_topic().empty()) {
    const std::string& _s = this->_internal_mqtt_state_topic();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelRoomEntitiesPage.EntitySlot.mqtt_state_topic");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelRoomEntitiesPage.EntitySlot)
  return target;
}

::size_t NSPanelRoomEntitiesPage_EntitySlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelRoomEntitiesPage.EntitySlot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string icon = 3;
  if (!this->_internal_icon().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_icon());
  }

  // string mqtt_state_topic = 7;
  if (!this->_internal_mqtt_state_topic().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mqtt_state_topic());
  }

  // int32 room_view_position = 1;
  if (this->_internal_room_view_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_room_view_position());
  }

  // int32 pco = 4;
  if (this->_internal_pco() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_pco());
  }

  // int32 pco2 = 5;
  if (this->_internal_pco2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_pco2());
  }

  // bool can_save_scene = 6;
  if (this->_internal_can_save_scene() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelRoomEntitiesPage_EntitySlot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelRoomEntitiesPage_EntitySlot*>(&to_msg);
  auto& from = static_cast<const NSPanelRoomEntitiesPage_EntitySlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelRoomEntitiesPage.EntitySlot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_icon().empty()) {
    _this->_internal_set_icon(from._internal_icon());
  }
  if (!from._internal_mqtt_state_topic().empty()) {
    _this->_internal_set_mqtt_state_topic(from._internal_mqtt_state_topic());
  }
  if (from._internal_room_view_position() != 0) {
    _this->_impl_.room_view_position_ = from._impl_.room_view_position_;
  }
  if (from._internal_pco() != 0) {
    _this->_impl_.pco_ = from._impl_.pco_;
  }
  if (from._internal_pco2() != 0) {
    _this->_impl_.pco2_ = from._impl_.pco2_;
  }
  if (from._internal_can_save_scene() != 0) {
    _this->_impl_.can_save_scene_ = from._impl_.can_save_scene_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelRoomEntitiesPage_EntitySlot::CopyFrom(const NSPanelRoomEntitiesPage_EntitySlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelRoomEntitiesPage.EntitySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelRoomEntitiesPage_EntitySlot::InternalSwap(NSPanelRoomEntitiesPage_EntitySlot* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.icon_, &other->_impl_.icon_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mqtt_state_topic_, &other->_impl_.mqtt_state_topic_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.can_save_scene_)
      + sizeof(NSPanelRoomEntitiesPage_EntitySlot::_impl_.can_save_scene_)
      - PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage_EntitySlot, _impl_.room_view_position_)>(
          reinterpret_cast<char*>(&_impl_.room_view_position_),
          reinterpret_cast<char*>(&other->_impl_.room_view_position_));
}

::google::protobuf::Metadata NSPanelRoomEntitiesPage_EntitySlot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelRoomEntitiesPage::_Internal {
 public:
};

NSPanelRoomEntitiesPage::NSPanelRoomEntitiesPage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelRoomEntitiesPage)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelRoomEntitiesPage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelRoomEntitiesPage& from_msg)
      : entities_{visibility, arena, from.entities_},
        header_text_(arena, from.header_text_),
        _cached_size_{0} {}

NSPanelRoomEntitiesPage::NSPanelRoomEntitiesPage(
    ::google::protobuf::Arena* arena,
    const NSPanelRoomEntitiesPage& from)
    : ::google::protobuf::Message(arena) {
  NSPanelRoomEntitiesPage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, page_type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::page_type_));

  // @@protoc_insertion_point(copy_constructor:NSPanelRoomEntitiesPage)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelRoomEntitiesPage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entities_{visibility, arena},
        header_text_(arena),
        _cached_size_{0} {}

inline void NSPanelRoomEntitiesPage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, page_type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::page_type_));
}
NSPanelRoomEntitiesPage::~NSPanelRoomEntitiesPage() {
  // @@protoc_insertion_point(destructor:NSPanelRoomEntitiesPage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelRoomEntitiesPage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.header_text_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelRoomEntitiesPage::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_._cached_size_),
              false,
          },
          &NSPanelRoomEntitiesPage::MergeImpl,
          &NSPanelRoomEntitiesPage::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 43, 2> NSPanelRoomEntitiesPage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NSPanelRoomEntitiesPage_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelRoomEntitiesPage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .NSPanelRoomEntitiesPage.EntitySlot entities = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.entities_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomEntitiesPage, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.id_)}},
    // int32 page_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomEntitiesPage, _impl_.page_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.page_type_)}},
    // string header_text = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.header_text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 page_type = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.page_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string header_text = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.header_text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .NSPanelRoomEntitiesPage.EntitySlot entities = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.entities_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::NSPanelRoomEntitiesPage_EntitySlot>()},
  }}, {{
    "\27\0\0\13\0\0\0\0"
    "NSPanelRoomEntitiesPage"
    "header_text"
  }},
};

PROTOBUF_NOINLINE void NSPanelRoomEntitiesPage::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelRoomEntitiesPage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entities_.Clear();
  _impl_.header_text_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.page_type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.page_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelRoomEntitiesPage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelRoomEntitiesPage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 page_type = 2;
  if (this->_internal_page_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_page_type(), target);
  }

  // string header_text = 3;
  if (!this->_internal_header_text().empty()) {
    const std::string& _s = this->_internal_header_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelRoomEntitiesPage.header_text");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .NSPanelRoomEntitiesPage.EntitySlot entities = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_entities_size());
       i < n; i++) {
    const auto& repfield = this->_internal_entities().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelRoomEntitiesPage)
  return target;
}

::size_t NSPanelRoomEntitiesPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelRoomEntitiesPage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .NSPanelRoomEntitiesPage.EntitySlot entities = 4;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->_internal_entities()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string header_text = 3;
  if (!this->_internal_header_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_header_text());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 page_type = 2;
  if (this->_internal_page_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_page_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelRoomEntitiesPage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelRoomEntitiesPage*>(&to_msg);
  auto& from = static_cast<const NSPanelRoomEntitiesPage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelRoomEntitiesPage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entities()->MergeFrom(
      from._internal_entities());
  if (!from._internal_header_text().empty()) {
    _this->_internal_set_header_text(from._internal_header_text());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_page_type() != 0) {
    _this->_impl_.page_type_ = from._impl_.page_type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelRoomEntitiesPage::CopyFrom(const NSPanelRoomEntitiesPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelRoomEntitiesPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelRoomEntitiesPage::InternalSwap(NSPanelRoomEntitiesPage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entities_.InternalSwap(&other->_impl_.entities_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.header_text_, &other->_impl_.header_text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.page_type_)
      + sizeof(NSPanelRoomEntitiesPage::_impl_.page_type_)
      - PROTOBUF_FIELD_OFFSET(NSPanelRoomEntitiesPage, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata NSPanelRoomEntitiesPage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelRoomStatus::_Internal {
 public:
};

NSPanelRoomStatus::NSPanelRoomStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelRoomStatus)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelRoomStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelRoomStatus& from_msg)
      : entity_page_ids_{visibility, arena, from.entity_page_ids_},
        _entity_page_ids_cached_byte_size_{0},
        name_(arena, from.name_),
        _cached_size_{0} {}

NSPanelRoomStatus::NSPanelRoomStatus(
    ::google::protobuf::Arena* arena,
    const NSPanelRoomStatus& from)
    : ::google::protobuf::Message(arena) {
  NSPanelRoomStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, num_table_lights_on_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::num_table_lights_on_));

  // @@protoc_insertion_point(copy_constructor:NSPanelRoomStatus)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelRoomStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entity_page_ids_{visibility, arena},
        _entity_page_ids_cached_byte_size_{0},
        name_(arena),
        _cached_size_{0} {}

inline void NSPanelRoomStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, num_table_lights_on_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::num_table_lights_on_));
}
NSPanelRoomStatus::~NSPanelRoomStatus() {
  // @@protoc_insertion_point(destructor:NSPanelRoomStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelRoomStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelRoomStatus::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_._cached_size_),
              false,
          },
          &NSPanelRoomStatus::MergeImpl,
          &NSPanelRoomStatus::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 0, 38, 2> NSPanelRoomStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelRoomStatus_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelRoomStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.name_)}},
    // int32 average_dim_level = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.average_dim_level_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.average_dim_level_)}},
    // int32 ceiling_lights_dim_level = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.ceiling_lights_dim_level_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.ceiling_lights_dim_level_)}},
    // int32 table_lights_dim_level = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.table_lights_dim_level_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.table_lights_dim_level_)}},
    // int32 average_color_temperature = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.average_color_temperature_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.average_color_temperature_)}},
    // int32 ceiling_lights_color_temperature_value = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.ceiling_lights_color_temperature_value_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.ceiling_lights_color_temperature_value_)}},
    // int32 table_lights_color_temperature_value = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.table_lights_color_temperature_value_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.table_lights_color_temperature_value_)}},
    // int32 num_ceiling_lights = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.num_ceiling_lights_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.num_ceiling_lights_)}},
    // int32 num_table_lights = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.num_table_lights_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.num_table_lights_)}},
    // int32 num_ceiling_lights_on = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.num_ceiling_lights_on_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.num_ceiling_lights_on_)}},
    // int32 num_table_lights_on = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelRoomStatus, _impl_.num_table_lights_on_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.num_table_lights_on_)}},
    // repeated int32 entity_page_ids = 13;
    {::_pbi::TcParser::FastV32P1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.entity_page_ids_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 average_dim_level = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.average_dim_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ceiling_lights_dim_level = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.ceiling_lights_dim_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 table_lights_dim_level = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.table_lights_dim_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 average_color_temperature = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.average_color_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ceiling_lights_color_temperature_value = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.ceiling_lights_color_temperature_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 table_lights_color_temperature_value = 8;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.table_lights_color_temperature_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 num_ceiling_lights = 9;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.num_ceiling_lights_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 num_table_lights = 10;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.num_table_lights_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 num_ceiling_lights_on = 11;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.num_ceiling_lights_on_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 num_table_lights_on = 12;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.num_table_lights_on_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 entity_page_ids = 13;
    {PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.entity_page_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
    "\21\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "NSPanelRoomStatus"
    "name"
  }},
};

PROTOBUF_NOINLINE void NSPanelRoomStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelRoomStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_page_ids_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_table_lights_on_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.num_table_lights_on_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelRoomStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelRoomStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelRoomStatus.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 average_dim_level = 3;
  if (this->_internal_average_dim_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_average_dim_level(), target);
  }

  // int32 ceiling_lights_dim_level = 4;
  if (this->_internal_ceiling_lights_dim_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_ceiling_lights_dim_level(), target);
  }

  // int32 table_lights_dim_level = 5;
  if (this->_internal_table_lights_dim_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_table_lights_dim_level(), target);
  }

  // int32 average_color_temperature = 6;
  if (this->_internal_average_color_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_average_color_temperature(), target);
  }

  // int32 ceiling_lights_color_temperature_value = 7;
  if (this->_internal_ceiling_lights_color_temperature_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_ceiling_lights_color_temperature_value(), target);
  }

  // int32 table_lights_color_temperature_value = 8;
  if (this->_internal_table_lights_color_temperature_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_table_lights_color_temperature_value(), target);
  }

  // int32 num_ceiling_lights = 9;
  if (this->_internal_num_ceiling_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_num_ceiling_lights(), target);
  }

  // int32 num_table_lights = 10;
  if (this->_internal_num_table_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_num_table_lights(), target);
  }

  // int32 num_ceiling_lights_on = 11;
  if (this->_internal_num_ceiling_lights_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_num_ceiling_lights_on(), target);
  }

  // int32 num_table_lights_on = 12;
  if (this->_internal_num_table_lights_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_num_table_lights_on(), target);
  }

  // repeated int32 entity_page_ids = 13;
  {
    int byte_size = _impl_._entity_page_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_entity_page_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelRoomStatus)
  return target;
}

::size_t NSPanelRoomStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelRoomStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated int32 entity_page_ids = 13;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_entity_page_ids())
    ;
    _impl_._entity_page_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 average_dim_level = 3;
  if (this->_internal_average_dim_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_average_dim_level());
  }

  // int32 ceiling_lights_dim_level = 4;
  if (this->_internal_ceiling_lights_dim_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_ceiling_lights_dim_level());
  }

  // int32 table_lights_dim_level = 5;
  if (this->_internal_table_lights_dim_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_table_lights_dim_level());
  }

  // int32 average_color_temperature = 6;
  if (this->_internal_average_color_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_average_color_temperature());
  }

  // int32 ceiling_lights_color_temperature_value = 7;
  if (this->_internal_ceiling_lights_color_temperature_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_ceiling_lights_color_temperature_value());
  }

  // int32 table_lights_color_temperature_value = 8;
  if (this->_internal_table_lights_color_temperature_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_table_lights_color_temperature_value());
  }

  // int32 num_ceiling_lights = 9;
  if (this->_internal_num_ceiling_lights() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_ceiling_lights());
  }

  // int32 num_table_lights = 10;
  if (this->_internal_num_table_lights() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_table_lights());
  }

  // int32 num_ceiling_lights_on = 11;
  if (this->_internal_num_ceiling_lights_on() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_ceiling_lights_on());
  }

  // int32 num_table_lights_on = 12;
  if (this->_internal_num_table_lights_on() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_table_lights_on());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelRoomStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelRoomStatus*>(&to_msg);
  auto& from = static_cast<const NSPanelRoomStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelRoomStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entity_page_ids()->MergeFrom(from._internal_entity_page_ids());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_average_dim_level() != 0) {
    _this->_impl_.average_dim_level_ = from._impl_.average_dim_level_;
  }
  if (from._internal_ceiling_lights_dim_level() != 0) {
    _this->_impl_.ceiling_lights_dim_level_ = from._impl_.ceiling_lights_dim_level_;
  }
  if (from._internal_table_lights_dim_level() != 0) {
    _this->_impl_.table_lights_dim_level_ = from._impl_.table_lights_dim_level_;
  }
  if (from._internal_average_color_temperature() != 0) {
    _this->_impl_.average_color_temperature_ = from._impl_.average_color_temperature_;
  }
  if (from._internal_ceiling_lights_color_temperature_value() != 0) {
    _this->_impl_.ceiling_lights_color_temperature_value_ = from._impl_.ceiling_lights_color_temperature_value_;
  }
  if (from._internal_table_lights_color_temperature_value() != 0) {
    _this->_impl_.table_lights_color_temperature_value_ = from._impl_.table_lights_color_temperature_value_;
  }
  if (from._internal_num_ceiling_lights() != 0) {
    _this->_impl_.num_ceiling_lights_ = from._impl_.num_ceiling_lights_;
  }
  if (from._internal_num_table_lights() != 0) {
    _this->_impl_.num_table_lights_ = from._impl_.num_table_lights_;
  }
  if (from._internal_num_ceiling_lights_on() != 0) {
    _this->_impl_.num_ceiling_lights_on_ = from._impl_.num_ceiling_lights_on_;
  }
  if (from._internal_num_table_lights_on() != 0) {
    _this->_impl_.num_table_lights_on_ = from._impl_.num_table_lights_on_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelRoomStatus::CopyFrom(const NSPanelRoomStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelRoomStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelRoomStatus::InternalSwap(NSPanelRoomStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entity_page_ids_.InternalSwap(&other->_impl_.entity_page_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.num_table_lights_on_)
      + sizeof(NSPanelRoomStatus::_impl_.num_table_lights_on_)
      - PROTOBUF_FIELD_OFFSET(NSPanelRoomStatus, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata NSPanelRoomStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelWeatherUpdate_ForecastItem::_Internal {
 public:
};

NSPanelWeatherUpdate_ForecastItem::NSPanelWeatherUpdate_ForecastItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelWeatherUpdate.ForecastItem)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelWeatherUpdate_ForecastItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelWeatherUpdate_ForecastItem& from_msg)
      : weather_icon_(arena, from.weather_icon_),
        precipitation_string_(arena, from.precipitation_string_),
        temperature_maxmin_string_(arena, from.temperature_maxmin_string_),
        wind_string_(arena, from.wind_string_),
        display_string_(arena, from.display_string_),
        _cached_size_{0} {}

NSPanelWeatherUpdate_ForecastItem::NSPanelWeatherUpdate_ForecastItem(
    ::google::protobuf::Arena* arena,
    const NSPanelWeatherUpdate_ForecastItem& from)
    : ::google::protobuf::Message(arena) {
  NSPanelWeatherUpdate_ForecastItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:NSPanelWeatherUpdate.ForecastItem)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelWeatherUpdate_ForecastItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : weather_icon_(arena),
        precipitation_string_(arena),
        temperature_maxmin_string_(arena),
        wind_string_(arena),
        display_string_(arena),
        _cached_size_{0} {}

inline void NSPanelWeatherUpdate_ForecastItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
NSPanelWeatherUpdate_ForecastItem::~NSPanelWeatherUpdate_ForecastItem() {
  // @@protoc_insertion_point(destructor:NSPanelWeatherUpdate.ForecastItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelWeatherUpdate_ForecastItem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.weather_icon_.Destroy();
  _impl_.precipitation_string_.Destroy();
  _impl_.temperature_maxmin_string_.Destroy();
  _impl_.wind_string_.Destroy();
  _impl_.display_string_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelWeatherUpdate_ForecastItem::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_._cached_size_),
              false,
          },
          &NSPanelWeatherUpdate_ForecastItem::MergeImpl,
          &NSPanelWeatherUpdate_ForecastItem::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 124, 2> NSPanelWeatherUpdate_ForecastItem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelWeatherUpdate_ForecastItem_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelWeatherUpdate_ForecastItem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string weather_icon = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.weather_icon_)}},
    // string precipitation_string = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.precipitation_string_)}},
    // string temperature_maxmin_string = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.temperature_maxmin_string_)}},
    // string wind_string = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.wind_string_)}},
    // string display_string = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.display_string_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string weather_icon = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.weather_icon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string precipitation_string = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.precipitation_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string temperature_maxmin_string = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.temperature_maxmin_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string wind_string = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.wind_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string display_string = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate_ForecastItem, _impl_.display_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\14\24\31\13\16\0\0"
    "NSPanelWeatherUpdate.ForecastItem"
    "weather_icon"
    "precipitation_string"
    "temperature_maxmin_string"
    "wind_string"
    "display_string"
  }},
};

PROTOBUF_NOINLINE void NSPanelWeatherUpdate_ForecastItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelWeatherUpdate.ForecastItem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weather_icon_.ClearToEmpty();
  _impl_.precipitation_string_.ClearToEmpty();
  _impl_.temperature_maxmin_string_.ClearToEmpty();
  _impl_.wind_string_.ClearToEmpty();
  _impl_.display_string_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelWeatherUpdate_ForecastItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelWeatherUpdate.ForecastItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string weather_icon = 1;
  if (!this->_internal_weather_icon().empty()) {
    const std::string& _s = this->_internal_weather_icon();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.ForecastItem.weather_icon");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string precipitation_string = 2;
  if (!this->_internal_precipitation_string().empty()) {
    const std::string& _s = this->_internal_precipitation_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.ForecastItem.precipitation_string");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string temperature_maxmin_string = 3;
  if (!this->_internal_temperature_maxmin_string().empty()) {
    const std::string& _s = this->_internal_temperature_maxmin_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.ForecastItem.temperature_maxmin_string");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string wind_string = 4;
  if (!this->_internal_wind_string().empty()) {
    const std::string& _s = this->_internal_wind_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.ForecastItem.wind_string");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string display_string = 5;
  if (!this->_internal_display_string().empty()) {
    const std::string& _s = this->_internal_display_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.ForecastItem.display_string");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelWeatherUpdate.ForecastItem)
  return target;
}

::size_t NSPanelWeatherUpdate_ForecastItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelWeatherUpdate.ForecastItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string weather_icon = 1;
  if (!this->_internal_weather_icon().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_weather_icon());
  }

  // string precipitation_string = 2;
  if (!this->_internal_precipitation_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_precipitation_string());
  }

  // string temperature_maxmin_string = 3;
  if (!this->_internal_temperature_maxmin_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_temperature_maxmin_string());
  }

  // string wind_string = 4;
  if (!this->_internal_wind_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_wind_string());
  }

  // string display_string = 5;
  if (!this->_internal_display_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_display_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelWeatherUpdate_ForecastItem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelWeatherUpdate_ForecastItem*>(&to_msg);
  auto& from = static_cast<const NSPanelWeatherUpdate_ForecastItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelWeatherUpdate.ForecastItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_weather_icon().empty()) {
    _this->_internal_set_weather_icon(from._internal_weather_icon());
  }
  if (!from._internal_precipitation_string().empty()) {
    _this->_internal_set_precipitation_string(from._internal_precipitation_string());
  }
  if (!from._internal_temperature_maxmin_string().empty()) {
    _this->_internal_set_temperature_maxmin_string(from._internal_temperature_maxmin_string());
  }
  if (!from._internal_wind_string().empty()) {
    _this->_internal_set_wind_string(from._internal_wind_string());
  }
  if (!from._internal_display_string().empty()) {
    _this->_internal_set_display_string(from._internal_display_string());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelWeatherUpdate_ForecastItem::CopyFrom(const NSPanelWeatherUpdate_ForecastItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelWeatherUpdate.ForecastItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelWeatherUpdate_ForecastItem::InternalSwap(NSPanelWeatherUpdate_ForecastItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weather_icon_, &other->_impl_.weather_icon_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.precipitation_string_, &other->_impl_.precipitation_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.temperature_maxmin_string_, &other->_impl_.temperature_maxmin_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wind_string_, &other->_impl_.wind_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_string_, &other->_impl_.display_string_, arena);
}

::google::protobuf::Metadata NSPanelWeatherUpdate_ForecastItem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelWeatherUpdate::_Internal {
 public:
};

NSPanelWeatherUpdate::NSPanelWeatherUpdate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelWeatherUpdate)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelWeatherUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelWeatherUpdate& from_msg)
      : forecast_items_{visibility, arena, from.forecast_items_},
        current_weather_icon_(arena, from.current_weather_icon_),
        current_temperature_string_(arena, from.current_temperature_string_),
        current_maxmin_temperature_(arena, from.current_maxmin_temperature_),
        current_wind_string_(arena, from.current_wind_string_),
        sunrise_string_(arena, from.sunrise_string_),
        sunset_string_(arena, from.sunset_string_),
        current_precipitation_string_(arena, from.current_precipitation_string_),
        _cached_size_{0} {}

NSPanelWeatherUpdate::NSPanelWeatherUpdate(
    ::google::protobuf::Arena* arena,
    const NSPanelWeatherUpdate& from)
    : ::google::protobuf::Message(arena) {
  NSPanelWeatherUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:NSPanelWeatherUpdate)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelWeatherUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : forecast_items_{visibility, arena},
        current_weather_icon_(arena),
        current_temperature_string_(arena),
        current_maxmin_temperature_(arena),
        current_wind_string_(arena),
        sunrise_string_(arena),
        sunset_string_(arena),
        current_precipitation_string_(arena),
        _cached_size_{0} {}

inline void NSPanelWeatherUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
NSPanelWeatherUpdate::~NSPanelWeatherUpdate() {
  // @@protoc_insertion_point(destructor:NSPanelWeatherUpdate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelWeatherUpdate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.current_weather_icon_.Destroy();
  _impl_.current_temperature_string_.Destroy();
  _impl_.current_maxmin_temperature_.Destroy();
  _impl_.current_wind_string_.Destroy();
  _impl_.sunrise_string_.Destroy();
  _impl_.sunset_string_.Destroy();
  _impl_.current_precipitation_string_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelWeatherUpdate::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_._cached_size_),
              false,
          },
          &NSPanelWeatherUpdate::MergeImpl,
          &NSPanelWeatherUpdate::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 183, 2> NSPanelWeatherUpdate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NSPanelWeatherUpdate_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelWeatherUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string current_precipitation_string = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_precipitation_string_)}},
    // repeated .NSPanelWeatherUpdate.ForecastItem forecast_items = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.forecast_items_)}},
    // string current_weather_icon = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_weather_icon_)}},
    // string current_temperature_string = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_temperature_string_)}},
    // string current_maxmin_temperature = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_maxmin_temperature_)}},
    // string current_wind_string = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_wind_string_)}},
    // string sunrise_string = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.sunrise_string_)}},
    // string sunset_string = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.sunset_string_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .NSPanelWeatherUpdate.ForecastItem forecast_items = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.forecast_items_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string current_weather_icon = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_weather_icon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string current_temperature_string = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_temperature_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string current_maxmin_temperature = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_maxmin_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string current_wind_string = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_wind_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sunrise_string = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.sunrise_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sunset_string = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.sunset_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string current_precipitation_string = 8;
    {PROTOBUF_FIELD_OFFSET(NSPanelWeatherUpdate, _impl_.current_precipitation_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::NSPanelWeatherUpdate_ForecastItem>()},
  }}, {{
    "\24\0\24\32\32\23\16\15\34\0\0\0\0\0\0\0"
    "NSPanelWeatherUpdate"
    "current_weather_icon"
    "current_temperature_string"
    "current_maxmin_temperature"
    "current_wind_string"
    "sunrise_string"
    "sunset_string"
    "current_precipitation_string"
  }},
};

PROTOBUF_NOINLINE void NSPanelWeatherUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelWeatherUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.forecast_items_.Clear();
  _impl_.current_weather_icon_.ClearToEmpty();
  _impl_.current_temperature_string_.ClearToEmpty();
  _impl_.current_maxmin_temperature_.ClearToEmpty();
  _impl_.current_wind_string_.ClearToEmpty();
  _impl_.sunrise_string_.ClearToEmpty();
  _impl_.sunset_string_.ClearToEmpty();
  _impl_.current_precipitation_string_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelWeatherUpdate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelWeatherUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .NSPanelWeatherUpdate.ForecastItem forecast_items = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_forecast_items_size());
       i < n; i++) {
    const auto& repfield = this->_internal_forecast_items().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string current_weather_icon = 2;
  if (!this->_internal_current_weather_icon().empty()) {
    const std::string& _s = this->_internal_current_weather_icon();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.current_weather_icon");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string current_temperature_string = 3;
  if (!this->_internal_current_temperature_string().empty()) {
    const std::string& _s = this->_internal_current_temperature_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.current_temperature_string");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string current_maxmin_temperature = 4;
  if (!this->_internal_current_maxmin_temperature().empty()) {
    const std::string& _s = this->_internal_current_maxmin_temperature();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.current_maxmin_temperature");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string current_wind_string = 5;
  if (!this->_internal_current_wind_string().empty()) {
    const std::string& _s = this->_internal_current_wind_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.current_wind_string");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string sunrise_string = 6;
  if (!this->_internal_sunrise_string().empty()) {
    const std::string& _s = this->_internal_sunrise_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.sunrise_string");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string sunset_string = 7;
  if (!this->_internal_sunset_string().empty()) {
    const std::string& _s = this->_internal_sunset_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.sunset_string");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string current_precipitation_string = 8;
  if (!this->_internal_current_precipitation_string().empty()) {
    const std::string& _s = this->_internal_current_precipitation_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelWeatherUpdate.current_precipitation_string");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelWeatherUpdate)
  return target;
}

::size_t NSPanelWeatherUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelWeatherUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .NSPanelWeatherUpdate.ForecastItem forecast_items = 1;
  total_size += 1UL * this->_internal_forecast_items_size();
  for (const auto& msg : this->_internal_forecast_items()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string current_weather_icon = 2;
  if (!this->_internal_current_weather_icon().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_current_weather_icon());
  }

  // string current_temperature_string = 3;
  if (!this->_internal_current_temperature_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_current_temperature_string());
  }

  // string current_maxmin_temperature = 4;
  if (!this->_internal_current_maxmin_temperature().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_current_maxmin_temperature());
  }

  // string current_wind_string = 5;
  if (!this->_internal_current_wind_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_current_wind_string());
  }

  // string sunrise_string = 6;
  if (!this->_internal_sunrise_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sunrise_string());
  }

  // string sunset_string = 7;
  if (!this->_internal_sunset_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sunset_string());
  }

  // string current_precipitation_string = 8;
  if (!this->_internal_current_precipitation_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_current_precipitation_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelWeatherUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelWeatherUpdate*>(&to_msg);
  auto& from = static_cast<const NSPanelWeatherUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelWeatherUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_forecast_items()->MergeFrom(
      from._internal_forecast_items());
  if (!from._internal_current_weather_icon().empty()) {
    _this->_internal_set_current_weather_icon(from._internal_current_weather_icon());
  }
  if (!from._internal_current_temperature_string().empty()) {
    _this->_internal_set_current_temperature_string(from._internal_current_temperature_string());
  }
  if (!from._internal_current_maxmin_temperature().empty()) {
    _this->_internal_set_current_maxmin_temperature(from._internal_current_maxmin_temperature());
  }
  if (!from._internal_current_wind_string().empty()) {
    _this->_internal_set_current_wind_string(from._internal_current_wind_string());
  }
  if (!from._internal_sunrise_string().empty()) {
    _this->_internal_set_sunrise_string(from._internal_sunrise_string());
  }
  if (!from._internal_sunset_string().empty()) {
    _this->_internal_set_sunset_string(from._internal_sunset_string());
  }
  if (!from._internal_current_precipitation_string().empty()) {
    _this->_internal_set_current_precipitation_string(from._internal_current_precipitation_string());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelWeatherUpdate::CopyFrom(const NSPanelWeatherUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelWeatherUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelWeatherUpdate::InternalSwap(NSPanelWeatherUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.forecast_items_.InternalSwap(&other->_impl_.forecast_items_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_weather_icon_, &other->_impl_.current_weather_icon_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_temperature_string_, &other->_impl_.current_temperature_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_maxmin_temperature_, &other->_impl_.current_maxmin_temperature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_wind_string_, &other->_impl_.current_wind_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sunrise_string_, &other->_impl_.sunrise_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sunset_string_, &other->_impl_.sunset_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_precipitation_string_, &other->_impl_.current_precipitation_string_, arena);
}

::google::protobuf::Metadata NSPanelWeatherUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_Internal {
 public:
};

NSPanelMQTTManagerCommand_FirstPageTurnLightOn::NSPanelMQTTManagerCommand_FirstPageTurnLightOn(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelMQTTManagerCommand.FirstPageTurnLightOn)
}
NSPanelMQTTManagerCommand_FirstPageTurnLightOn::NSPanelMQTTManagerCommand_FirstPageTurnLightOn(
    ::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_FirstPageTurnLightOn& from)
    : NSPanelMQTTManagerCommand_FirstPageTurnLightOn(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE NSPanelMQTTManagerCommand_FirstPageTurnLightOn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, affect_lights_),
           0,
           offsetof(Impl_, has_kelvin_value_) -
               offsetof(Impl_, affect_lights_) +
               sizeof(Impl_::has_kelvin_value_));
}
NSPanelMQTTManagerCommand_FirstPageTurnLightOn::~NSPanelMQTTManagerCommand_FirstPageTurnLightOn() {
  // @@protoc_insertion_point(destructor:NSPanelMQTTManagerCommand.FirstPageTurnLightOn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelMQTTManagerCommand_FirstPageTurnLightOn::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_._cached_size_),
              false,
          },
          &NSPanelMQTTManagerCommand_FirstPageTurnLightOn::MergeImpl,
          &NSPanelMQTTManagerCommand_FirstPageTurnLightOn::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelMQTTManagerCommand_FirstPageTurnLightOn_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_FirstPageTurnLightOn>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.affect_lights_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.affect_lights_)}},
    // int32 brightness_slider_value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.brightness_slider_value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.brightness_slider_value_)}},
    // int32 kelvin_slider_value = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.kelvin_slider_value_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.kelvin_slider_value_)}},
    // int32 selected_room = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.selected_room_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.selected_room_)}},
    // bool global = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.global_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.global_)}},
    // bool has_brightness_value = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.has_brightness_value_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.has_brightness_value_)}},
    // bool has_kelvin_value = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.has_kelvin_value_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.has_kelvin_value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.affect_lights_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 brightness_slider_value = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.brightness_slider_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 kelvin_slider_value = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.kelvin_slider_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 selected_room = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.selected_room_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool global = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.global_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool has_brightness_value = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.has_brightness_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool has_kelvin_value = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.has_kelvin_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOn)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.affect_lights_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.has_kelvin_value_) -
      reinterpret_cast<char*>(&_impl_.affect_lights_)) + sizeof(_impl_.has_kelvin_value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOn)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
  if (this->_internal_affect_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_affect_lights(), target);
  }

  // int32 brightness_slider_value = 2;
  if (this->_internal_brightness_slider_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_brightness_slider_value(), target);
  }

  // int32 kelvin_slider_value = 3;
  if (this->_internal_kelvin_slider_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_kelvin_slider_value(), target);
  }

  // int32 selected_room = 4;
  if (this->_internal_selected_room() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_selected_room(), target);
  }

  // bool global = 5;
  if (this->_internal_global() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_global(), target);
  }

  // bool has_brightness_value = 6;
  if (this->_internal_has_brightness_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_has_brightness_value(), target);
  }

  // bool has_kelvin_value = 7;
  if (this->_internal_has_kelvin_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_has_kelvin_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelMQTTManagerCommand.FirstPageTurnLightOn)
  return target;
}

::size_t NSPanelMQTTManagerCommand_FirstPageTurnLightOn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOn)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
  if (this->_internal_affect_lights() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_affect_lights());
  }

  // int32 brightness_slider_value = 2;
  if (this->_internal_brightness_slider_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_brightness_slider_value());
  }

  // int32 kelvin_slider_value = 3;
  if (this->_internal_kelvin_slider_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_kelvin_slider_value());
  }

  // int32 selected_room = 4;
  if (this->_internal_selected_room() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_selected_room());
  }

  // bool global = 5;
  if (this->_internal_global() != 0) {
    total_size += 2;
  }

  // bool has_brightness_value = 6;
  if (this->_internal_has_brightness_value() != 0) {
    total_size += 2;
  }

  // bool has_kelvin_value = 7;
  if (this->_internal_has_kelvin_value() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelMQTTManagerCommand_FirstPageTurnLightOn*>(&to_msg);
  auto& from = static_cast<const NSPanelMQTTManagerCommand_FirstPageTurnLightOn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_affect_lights() != 0) {
    _this->_impl_.affect_lights_ = from._impl_.affect_lights_;
  }
  if (from._internal_brightness_slider_value() != 0) {
    _this->_impl_.brightness_slider_value_ = from._impl_.brightness_slider_value_;
  }
  if (from._internal_kelvin_slider_value() != 0) {
    _this->_impl_.kelvin_slider_value_ = from._impl_.kelvin_slider_value_;
  }
  if (from._internal_selected_room() != 0) {
    _this->_impl_.selected_room_ = from._impl_.selected_room_;
  }
  if (from._internal_global() != 0) {
    _this->_impl_.global_ = from._impl_.global_;
  }
  if (from._internal_has_brightness_value() != 0) {
    _this->_impl_.has_brightness_value_ = from._impl_.has_brightness_value_;
  }
  if (from._internal_has_kelvin_value() != 0) {
    _this->_impl_.has_kelvin_value_ = from._impl_.has_kelvin_value_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::CopyFrom(const NSPanelMQTTManagerCommand_FirstPageTurnLightOn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelMQTTManagerCommand_FirstPageTurnLightOn::InternalSwap(NSPanelMQTTManagerCommand_FirstPageTurnLightOn* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.has_kelvin_value_)
      + sizeof(NSPanelMQTTManagerCommand_FirstPageTurnLightOn::_impl_.has_kelvin_value_)
      - PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOn, _impl_.affect_lights_)>(
          reinterpret_cast<char*>(&_impl_.affect_lights_),
          reinterpret_cast<char*>(&other->_impl_.affect_lights_));
}

::google::protobuf::Metadata NSPanelMQTTManagerCommand_FirstPageTurnLightOn::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelMQTTManagerCommand_FirstPageTurnLightOff::_Internal {
 public:
};

NSPanelMQTTManagerCommand_FirstPageTurnLightOff::NSPanelMQTTManagerCommand_FirstPageTurnLightOff(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelMQTTManagerCommand.FirstPageTurnLightOff)
}
NSPanelMQTTManagerCommand_FirstPageTurnLightOff::NSPanelMQTTManagerCommand_FirstPageTurnLightOff(
    ::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_FirstPageTurnLightOff& from)
    : NSPanelMQTTManagerCommand_FirstPageTurnLightOff(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE NSPanelMQTTManagerCommand_FirstPageTurnLightOff::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, affect_lights_),
           0,
           offsetof(Impl_, global_) -
               offsetof(Impl_, affect_lights_) +
               sizeof(Impl_::global_));
}
NSPanelMQTTManagerCommand_FirstPageTurnLightOff::~NSPanelMQTTManagerCommand_FirstPageTurnLightOff() {
  // @@protoc_insertion_point(destructor:NSPanelMQTTManagerCommand.FirstPageTurnLightOff)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelMQTTManagerCommand_FirstPageTurnLightOff::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_._cached_size_),
              false,
          },
          &NSPanelMQTTManagerCommand_FirstPageTurnLightOff::MergeImpl,
          &NSPanelMQTTManagerCommand_FirstPageTurnLightOff::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> NSPanelMQTTManagerCommand_FirstPageTurnLightOff::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelMQTTManagerCommand_FirstPageTurnLightOff_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_FirstPageTurnLightOff>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool global = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.global_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.global_)}},
    // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.affect_lights_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.affect_lights_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.affect_lights_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool global = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.global_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOff)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.affect_lights_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.global_) -
      reinterpret_cast<char*>(&_impl_.affect_lights_)) + sizeof(_impl_.global_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelMQTTManagerCommand_FirstPageTurnLightOff::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOff)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
  if (this->_internal_affect_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_affect_lights(), target);
  }

  // bool global = 2;
  if (this->_internal_global() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_global(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelMQTTManagerCommand.FirstPageTurnLightOff)
  return target;
}

::size_t NSPanelMQTTManagerCommand_FirstPageTurnLightOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOff)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // .NSPanelMQTTManagerCommand.AffectLightsOptions affect_lights = 1;
  if (this->_internal_affect_lights() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_affect_lights());
  }

  // bool global = 2;
  if (this->_internal_global() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelMQTTManagerCommand_FirstPageTurnLightOff*>(&to_msg);
  auto& from = static_cast<const NSPanelMQTTManagerCommand_FirstPageTurnLightOff&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOff)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_affect_lights() != 0) {
    _this->_impl_.affect_lights_ = from._impl_.affect_lights_;
  }
  if (from._internal_global() != 0) {
    _this->_impl_.global_ = from._impl_.global_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::CopyFrom(const NSPanelMQTTManagerCommand_FirstPageTurnLightOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelMQTTManagerCommand.FirstPageTurnLightOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelMQTTManagerCommand_FirstPageTurnLightOff::InternalSwap(NSPanelMQTTManagerCommand_FirstPageTurnLightOff* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.global_)
      + sizeof(NSPanelMQTTManagerCommand_FirstPageTurnLightOff::_impl_.global_)
      - PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_FirstPageTurnLightOff, _impl_.affect_lights_)>(
          reinterpret_cast<char*>(&_impl_.affect_lights_),
          reinterpret_cast<char*>(&other->_impl_.affect_lights_));
}

::google::protobuf::Metadata NSPanelMQTTManagerCommand_FirstPageTurnLightOff::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelMQTTManagerCommand_LightCommand::_Internal {
 public:
};

NSPanelMQTTManagerCommand_LightCommand::NSPanelMQTTManagerCommand_LightCommand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelMQTTManagerCommand.LightCommand)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelMQTTManagerCommand_LightCommand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelMQTTManagerCommand_LightCommand& from_msg)
      : light_ids_{visibility, arena, from.light_ids_},
        _light_ids_cached_byte_size_{0},
        _cached_size_{0} {}

NSPanelMQTTManagerCommand_LightCommand::NSPanelMQTTManagerCommand_LightCommand(
    ::google::protobuf::Arena* arena,
    const NSPanelMQTTManagerCommand_LightCommand& from)
    : ::google::protobuf::Message(arena) {
  NSPanelMQTTManagerCommand_LightCommand* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, brightness_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, brightness_),
           offsetof(Impl_, saturation_) -
               offsetof(Impl_, brightness_) +
               sizeof(Impl_::saturation_));

  // @@protoc_insertion_point(copy_constructor:NSPanelMQTTManagerCommand.LightCommand)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelMQTTManagerCommand_LightCommand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : light_ids_{visibility, arena},
        _light_ids_cached_byte_size_{0},
        _cached_size_{0} {}

inline void NSPanelMQTTManagerCommand_LightCommand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, brightness_),
           0,
           offsetof(Impl_, saturation_) -
               offsetof(Impl_, brightness_) +
               sizeof(Impl_::saturation_));
}
NSPanelMQTTManagerCommand_LightCommand::~NSPanelMQTTManagerCommand_LightCommand() {
  // @@protoc_insertion_point(destructor:NSPanelMQTTManagerCommand.LightCommand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelMQTTManagerCommand_LightCommand::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelMQTTManagerCommand_LightCommand::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_._cached_size_),
              false,
          },
          &NSPanelMQTTManagerCommand_LightCommand::MergeImpl,
          &NSPanelMQTTManagerCommand_LightCommand::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 0, 2> NSPanelMQTTManagerCommand_LightCommand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelMQTTManagerCommand_LightCommand_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_LightCommand>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 light_ids = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.light_ids_)}},
    // bool has_brightness = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_brightness_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_brightness_)}},
    // int32 brightness = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_LightCommand, _impl_.brightness_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.brightness_)}},
    // bool has_color_temperature = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_color_temperature_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_color_temperature_)}},
    // int32 color_temperature = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_LightCommand, _impl_.color_temperature_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.color_temperature_)}},
    // bool has_hue = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_hue_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_hue_)}},
    // int32 hue = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_LightCommand, _impl_.hue_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.hue_)}},
    // bool has_saturation = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_saturation_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_saturation_)}},
    // int32 saturation = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_LightCommand, _impl_.saturation_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.saturation_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 light_ids = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.light_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // bool has_brightness = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_brightness_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 brightness = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.brightness_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool has_color_temperature = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_color_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 color_temperature = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.color_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool has_hue = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_hue_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 hue = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.hue_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool has_saturation = 8;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.has_saturation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 saturation = 9;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.saturation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void NSPanelMQTTManagerCommand_LightCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelMQTTManagerCommand.LightCommand)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.light_ids_.Clear();
  ::memset(&_impl_.brightness_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.saturation_) -
      reinterpret_cast<char*>(&_impl_.brightness_)) + sizeof(_impl_.saturation_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelMQTTManagerCommand_LightCommand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelMQTTManagerCommand.LightCommand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 light_ids = 1;
  {
    int byte_size = _impl_._light_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_light_ids(), byte_size, target);
    }
  }

  // bool has_brightness = 2;
  if (this->_internal_has_brightness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_has_brightness(), target);
  }

  // int32 brightness = 3;
  if (this->_internal_brightness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_brightness(), target);
  }

  // bool has_color_temperature = 4;
  if (this->_internal_has_color_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_has_color_temperature(), target);
  }

  // int32 color_temperature = 5;
  if (this->_internal_color_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_color_temperature(), target);
  }

  // bool has_hue = 6;
  if (this->_internal_has_hue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_has_hue(), target);
  }

  // int32 hue = 7;
  if (this->_internal_hue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_hue(), target);
  }

  // bool has_saturation = 8;
  if (this->_internal_has_saturation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_has_saturation(), target);
  }

  // int32 saturation = 9;
  if (this->_internal_saturation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_saturation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelMQTTManagerCommand.LightCommand)
  return target;
}

::size_t NSPanelMQTTManagerCommand_LightCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelMQTTManagerCommand.LightCommand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated int32 light_ids = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_light_ids())
    ;
    _impl_._light_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 brightness = 3;
  if (this->_internal_brightness() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_brightness());
  }

  // int32 color_temperature = 5;
  if (this->_internal_color_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_color_temperature());
  }

  // bool has_brightness = 2;
  if (this->_internal_has_brightness() != 0) {
    total_size += 2;
  }

  // bool has_color_temperature = 4;
  if (this->_internal_has_color_temperature() != 0) {
    total_size += 2;
  }

  // bool has_hue = 6;
  if (this->_internal_has_hue() != 0) {
    total_size += 2;
  }

  // bool has_saturation = 8;
  if (this->_internal_has_saturation() != 0) {
    total_size += 2;
  }

  // int32 hue = 7;
  if (this->_internal_hue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_hue());
  }

  // int32 saturation = 9;
  if (this->_internal_saturation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_saturation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelMQTTManagerCommand_LightCommand::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelMQTTManagerCommand_LightCommand*>(&to_msg);
  auto& from = static_cast<const NSPanelMQTTManagerCommand_LightCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelMQTTManagerCommand.LightCommand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_light_ids()->MergeFrom(from._internal_light_ids());
  if (from._internal_brightness() != 0) {
    _this->_impl_.brightness_ = from._impl_.brightness_;
  }
  if (from._internal_color_temperature() != 0) {
    _this->_impl_.color_temperature_ = from._impl_.color_temperature_;
  }
  if (from._internal_has_brightness() != 0) {
    _this->_impl_.has_brightness_ = from._impl_.has_brightness_;
  }
  if (from._internal_has_color_temperature() != 0) {
    _this->_impl_.has_color_temperature_ = from._impl_.has_color_temperature_;
  }
  if (from._internal_has_hue() != 0) {
    _this->_impl_.has_hue_ = from._impl_.has_hue_;
  }
  if (from._internal_has_saturation() != 0) {
    _this->_impl_.has_saturation_ = from._impl_.has_saturation_;
  }
  if (from._internal_hue() != 0) {
    _this->_impl_.hue_ = from._impl_.hue_;
  }
  if (from._internal_saturation() != 0) {
    _this->_impl_.saturation_ = from._impl_.saturation_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelMQTTManagerCommand_LightCommand::CopyFrom(const NSPanelMQTTManagerCommand_LightCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelMQTTManagerCommand.LightCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelMQTTManagerCommand_LightCommand::InternalSwap(NSPanelMQTTManagerCommand_LightCommand* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.light_ids_.InternalSwap(&other->_impl_.light_ids_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.saturation_)
      + sizeof(NSPanelMQTTManagerCommand_LightCommand::_impl_.saturation_)
      - PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_LightCommand, _impl_.brightness_)>(
          reinterpret_cast<char*>(&_impl_.brightness_),
          reinterpret_cast<char*>(&other->_impl_.brightness_));
}

::google::protobuf::Metadata NSPanelMQTTManagerCommand_LightCommand::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::_Internal {
 public:
};

NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage)
}
NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(
    ::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& from)
    : NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, entity_page_id_),
           0,
           offsetof(Impl_, entity_slot_) -
               offsetof(Impl_, entity_page_id_) +
               sizeof(Impl_::entity_slot_));
}
NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::~NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage() {
  // @@protoc_insertion_point(destructor:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_._cached_size_),
              false,
          },
          &NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::MergeImpl,
          &NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 entity_slot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_slot_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_slot_)}},
    // int32 entity_page_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_page_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_page_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 entity_page_id = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_page_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 entity_slot = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_slot_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.entity_page_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.entity_slot_) -
      reinterpret_cast<char*>(&_impl_.entity_page_id_)) + sizeof(_impl_.entity_slot_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 entity_page_id = 1;
  if (this->_internal_entity_page_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_entity_page_id(), target);
  }

  // int32 entity_slot = 2;
  if (this->_internal_entity_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_entity_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage)
  return target;
}

::size_t NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int32 entity_page_id = 1;
  if (this->_internal_entity_page_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_entity_page_id());
  }

  // int32 entity_slot = 2;
  if (this->_internal_entity_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_entity_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage*>(&to_msg);
  auto& from = static_cast<const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_entity_page_id() != 0) {
    _this->_impl_.entity_page_id_ = from._impl_.entity_page_id_;
  }
  if (from._internal_entity_slot() != 0) {
    _this->_impl_.entity_slot_ = from._impl_.entity_slot_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::CopyFrom(const NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::InternalSwap(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_slot_)
      + sizeof(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::_impl_.entity_slot_)
      - PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage, _impl_.entity_page_id_)>(
          reinterpret_cast<char*>(&_impl_.entity_page_id_),
          reinterpret_cast<char*>(&other->_impl_.entity_page_id_));
}

::google::protobuf::Metadata NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelMQTTManagerCommand_SaveSceneCommand::_Internal {
 public:
};

NSPanelMQTTManagerCommand_SaveSceneCommand::NSPanelMQTTManagerCommand_SaveSceneCommand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelMQTTManagerCommand.SaveSceneCommand)
}
NSPanelMQTTManagerCommand_SaveSceneCommand::NSPanelMQTTManagerCommand_SaveSceneCommand(
    ::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_SaveSceneCommand& from)
    : NSPanelMQTTManagerCommand_SaveSceneCommand(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE NSPanelMQTTManagerCommand_SaveSceneCommand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NSPanelMQTTManagerCommand_SaveSceneCommand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, entity_page_id_),
           0,
           offsetof(Impl_, entity_slot_) -
               offsetof(Impl_, entity_page_id_) +
               sizeof(Impl_::entity_slot_));
}
NSPanelMQTTManagerCommand_SaveSceneCommand::~NSPanelMQTTManagerCommand_SaveSceneCommand() {
  // @@protoc_insertion_point(destructor:NSPanelMQTTManagerCommand.SaveSceneCommand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelMQTTManagerCommand_SaveSceneCommand::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelMQTTManagerCommand_SaveSceneCommand::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_._cached_size_),
              false,
          },
          &NSPanelMQTTManagerCommand_SaveSceneCommand::MergeImpl,
          &NSPanelMQTTManagerCommand_SaveSceneCommand::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> NSPanelMQTTManagerCommand_SaveSceneCommand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelMQTTManagerCommand_SaveSceneCommand_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_SaveSceneCommand>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 entity_slot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_slot_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_slot_)}},
    // int32 entity_page_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_page_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_page_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 entity_page_id = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_page_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 entity_slot = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_slot_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void NSPanelMQTTManagerCommand_SaveSceneCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelMQTTManagerCommand.SaveSceneCommand)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.entity_page_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.entity_slot_) -
      reinterpret_cast<char*>(&_impl_.entity_page_id_)) + sizeof(_impl_.entity_slot_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelMQTTManagerCommand_SaveSceneCommand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelMQTTManagerCommand.SaveSceneCommand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 entity_page_id = 1;
  if (this->_internal_entity_page_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_entity_page_id(), target);
  }

  // int32 entity_slot = 2;
  if (this->_internal_entity_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_entity_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelMQTTManagerCommand.SaveSceneCommand)
  return target;
}

::size_t NSPanelMQTTManagerCommand_SaveSceneCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelMQTTManagerCommand.SaveSceneCommand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int32 entity_page_id = 1;
  if (this->_internal_entity_page_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_entity_page_id());
  }

  // int32 entity_slot = 2;
  if (this->_internal_entity_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_entity_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelMQTTManagerCommand_SaveSceneCommand::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelMQTTManagerCommand_SaveSceneCommand*>(&to_msg);
  auto& from = static_cast<const NSPanelMQTTManagerCommand_SaveSceneCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelMQTTManagerCommand.SaveSceneCommand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_entity_page_id() != 0) {
    _this->_impl_.entity_page_id_ = from._impl_.entity_page_id_;
  }
  if (from._internal_entity_slot() != 0) {
    _this->_impl_.entity_slot_ = from._impl_.entity_slot_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelMQTTManagerCommand_SaveSceneCommand::CopyFrom(const NSPanelMQTTManagerCommand_SaveSceneCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelMQTTManagerCommand.SaveSceneCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelMQTTManagerCommand_SaveSceneCommand::InternalSwap(NSPanelMQTTManagerCommand_SaveSceneCommand* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_slot_)
      + sizeof(NSPanelMQTTManagerCommand_SaveSceneCommand::_impl_.entity_slot_)
      - PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_SaveSceneCommand, _impl_.entity_page_id_)>(
          reinterpret_cast<char*>(&_impl_.entity_page_id_),
          reinterpret_cast<char*>(&other->_impl_.entity_page_id_));
}

::google::protobuf::Metadata NSPanelMQTTManagerCommand_SaveSceneCommand::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelMQTTManagerCommand_ButtonPressed::_Internal {
 public:
};

NSPanelMQTTManagerCommand_ButtonPressed::NSPanelMQTTManagerCommand_ButtonPressed(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelMQTTManagerCommand.ButtonPressed)
}
NSPanelMQTTManagerCommand_ButtonPressed::NSPanelMQTTManagerCommand_ButtonPressed(
    ::google::protobuf::Arena* arena, const NSPanelMQTTManagerCommand_ButtonPressed& from)
    : NSPanelMQTTManagerCommand_ButtonPressed(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE NSPanelMQTTManagerCommand_ButtonPressed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NSPanelMQTTManagerCommand_ButtonPressed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nspanel_id_),
           0,
           offsetof(Impl_, button_id_) -
               offsetof(Impl_, nspanel_id_) +
               sizeof(Impl_::button_id_));
}
NSPanelMQTTManagerCommand_ButtonPressed::~NSPanelMQTTManagerCommand_ButtonPressed() {
  // @@protoc_insertion_point(destructor:NSPanelMQTTManagerCommand.ButtonPressed)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelMQTTManagerCommand_ButtonPressed::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelMQTTManagerCommand_ButtonPressed::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ButtonPressed, _impl_._cached_size_),
              false,
          },
          &NSPanelMQTTManagerCommand_ButtonPressed::MergeImpl,
          &NSPanelMQTTManagerCommand_ButtonPressed::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> NSPanelMQTTManagerCommand_ButtonPressed::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelMQTTManagerCommand_ButtonPressed_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_ButtonPressed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 button_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_ButtonPressed, _impl_.button_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ButtonPressed, _impl_.button_id_)}},
    // int32 nspanel_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelMQTTManagerCommand_ButtonPressed, _impl_.nspanel_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ButtonPressed, _impl_.nspanel_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 nspanel_id = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ButtonPressed, _impl_.nspanel_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 button_id = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ButtonPressed, _impl_.button_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void NSPanelMQTTManagerCommand_ButtonPressed::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelMQTTManagerCommand.ButtonPressed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.nspanel_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.button_id_) -
      reinterpret_cast<char*>(&_impl_.nspanel_id_)) + sizeof(_impl_.button_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelMQTTManagerCommand_ButtonPressed::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelMQTTManagerCommand.ButtonPressed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 nspanel_id = 1;
  if (this->_internal_nspanel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_nspanel_id(), target);
  }

  // int32 button_id = 2;
  if (this->_internal_button_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_button_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelMQTTManagerCommand.ButtonPressed)
  return target;
}

::size_t NSPanelMQTTManagerCommand_ButtonPressed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelMQTTManagerCommand.ButtonPressed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int32 nspanel_id = 1;
  if (this->_internal_nspanel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_nspanel_id());
  }

  // int32 button_id = 2;
  if (this->_internal_button_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_button_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelMQTTManagerCommand_ButtonPressed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelMQTTManagerCommand_ButtonPressed*>(&to_msg);
  auto& from = static_cast<const NSPanelMQTTManagerCommand_ButtonPressed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelMQTTManagerCommand.ButtonPressed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nspanel_id() != 0) {
    _this->_impl_.nspanel_id_ = from._impl_.nspanel_id_;
  }
  if (from._internal_button_id() != 0) {
    _this->_impl_.button_id_ = from._impl_.button_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelMQTTManagerCommand_ButtonPressed::CopyFrom(const NSPanelMQTTManagerCommand_ButtonPressed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelMQTTManagerCommand.ButtonPressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelMQTTManagerCommand_ButtonPressed::InternalSwap(NSPanelMQTTManagerCommand_ButtonPressed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ButtonPressed, _impl_.button_id_)
      + sizeof(NSPanelMQTTManagerCommand_ButtonPressed::_impl_.button_id_)
      - PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand_ButtonPressed, _impl_.nspanel_id_)>(
          reinterpret_cast<char*>(&_impl_.nspanel_id_),
          reinterpret_cast<char*>(&other->_impl_.nspanel_id_));
}

::google::protobuf::Metadata NSPanelMQTTManagerCommand_ButtonPressed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelMQTTManagerCommand::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::NSPanelMQTTManagerCommand, _impl_._oneof_case_);
};

void NSPanelMQTTManagerCommand::set_allocated_first_page_turn_on(::NSPanelMQTTManagerCommand_FirstPageTurnLightOn* first_page_turn_on) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_CommandData();
  if (first_page_turn_on) {
    ::google::protobuf::Arena* submessage_arena = first_page_turn_on->GetArena();
    if (message_arena != submessage_arena) {
      first_page_turn_on = ::google::protobuf::internal::GetOwnedMessage(message_arena, first_page_turn_on, submessage_arena);
    }
    set_has_first_page_turn_on();
    _impl_.CommandData_.first_page_turn_on_ = first_page_turn_on;
  }
  // @@protoc_insertion_point(field_set_allocated:NSPanelMQTTManagerCommand.first_page_turn_on)
}
void NSPanelMQTTManagerCommand::set_allocated_first_page_turn_off(::NSPanelMQTTManagerCommand_FirstPageTurnLightOff* first_page_turn_off) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_CommandData();
  if (first_page_turn_off) {
    ::google::protobuf::Arena* submessage_arena = first_page_turn_off->GetArena();
    if (message_arena != submessage_arena) {
      first_page_turn_off = ::google::protobuf::internal::GetOwnedMessage(message_arena, first_page_turn_off, submessage_arena);
    }
    set_has_first_page_turn_off();
    _impl_.CommandData_.first_page_turn_off_ = first_page_turn_off;
  }
  // @@protoc_insertion_point(field_set_allocated:NSPanelMQTTManagerCommand.first_page_turn_off)
}
void NSPanelMQTTManagerCommand::set_allocated_light_command(::NSPanelMQTTManagerCommand_LightCommand* light_command) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_CommandData();
  if (light_command) {
    ::google::protobuf::Arena* submessage_arena = light_command->GetArena();
    if (message_arena != submessage_arena) {
      light_command = ::google::protobuf::internal::GetOwnedMessage(message_arena, light_command, submessage_arena);
    }
    set_has_light_command();
    _impl_.CommandData_.light_command_ = light_command;
  }
  // @@protoc_insertion_point(field_set_allocated:NSPanelMQTTManagerCommand.light_command)
}
void NSPanelMQTTManagerCommand::set_allocated_toggle_entity_from_entities_page(::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage* toggle_entity_from_entities_page) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_CommandData();
  if (toggle_entity_from_entities_page) {
    ::google::protobuf::Arena* submessage_arena = toggle_entity_from_entities_page->GetArena();
    if (message_arena != submessage_arena) {
      toggle_entity_from_entities_page = ::google::protobuf::internal::GetOwnedMessage(message_arena, toggle_entity_from_entities_page, submessage_arena);
    }
    set_has_toggle_entity_from_entities_page();
    _impl_.CommandData_.toggle_entity_from_entities_page_ = toggle_entity_from_entities_page;
  }
  // @@protoc_insertion_point(field_set_allocated:NSPanelMQTTManagerCommand.toggle_entity_from_entities_page)
}
void NSPanelMQTTManagerCommand::set_allocated_save_scene_command(::NSPanelMQTTManagerCommand_SaveSceneCommand* save_scene_command) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_CommandData();
  if (save_scene_command) {
    ::google::protobuf::Arena* submessage_arena = save_scene_command->GetArena();
    if (message_arena != submessage_arena) {
      save_scene_command = ::google::protobuf::internal::GetOwnedMessage(message_arena, save_scene_command, submessage_arena);
    }
    set_has_save_scene_command();
    _impl_.CommandData_.save_scene_command_ = save_scene_command;
  }
  // @@protoc_insertion_point(field_set_allocated:NSPanelMQTTManagerCommand.save_scene_command)
}
void NSPanelMQTTManagerCommand::set_allocated_button_pressed(::NSPanelMQTTManagerCommand_ButtonPressed* button_pressed) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_CommandData();
  if (button_pressed) {
    ::google::protobuf::Arena* submessage_arena = button_pressed->GetArena();
    if (message_arena != submessage_arena) {
      button_pressed = ::google::protobuf::internal::GetOwnedMessage(message_arena, button_pressed, submessage_arena);
    }
    set_has_button_pressed();
    _impl_.CommandData_.button_pressed_ = button_pressed;
  }
  // @@protoc_insertion_point(field_set_allocated:NSPanelMQTTManagerCommand.button_pressed)
}
NSPanelMQTTManagerCommand::NSPanelMQTTManagerCommand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelMQTTManagerCommand)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelMQTTManagerCommand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelMQTTManagerCommand& from_msg)
      : CommandData_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

NSPanelMQTTManagerCommand::NSPanelMQTTManagerCommand(
    ::google::protobuf::Arena* arena,
    const NSPanelMQTTManagerCommand& from)
    : ::google::protobuf::Message(arena) {
  NSPanelMQTTManagerCommand* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (CommandData_case()) {
    case COMMANDDATA_NOT_SET:
      break;
      case kFirstPageTurnOn:
        _impl_.CommandData_.first_page_turn_on_ = ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_FirstPageTurnLightOn>(arena, *from._impl_.CommandData_.first_page_turn_on_);
        break;
      case kFirstPageTurnOff:
        _impl_.CommandData_.first_page_turn_off_ = ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_FirstPageTurnLightOff>(arena, *from._impl_.CommandData_.first_page_turn_off_);
        break;
      case kLightCommand:
        _impl_.CommandData_.light_command_ = ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_LightCommand>(arena, *from._impl_.CommandData_.light_command_);
        break;
      case kToggleEntityFromEntitiesPage:
        _impl_.CommandData_.toggle_entity_from_entities_page_ = ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage>(arena, *from._impl_.CommandData_.toggle_entity_from_entities_page_);
        break;
      case kSaveSceneCommand:
        _impl_.CommandData_.save_scene_command_ = ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_SaveSceneCommand>(arena, *from._impl_.CommandData_.save_scene_command_);
        break;
      case kButtonPressed:
        _impl_.CommandData_.button_pressed_ = ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_ButtonPressed>(arena, *from._impl_.CommandData_.button_pressed_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:NSPanelMQTTManagerCommand)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelMQTTManagerCommand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : CommandData_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void NSPanelMQTTManagerCommand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
NSPanelMQTTManagerCommand::~NSPanelMQTTManagerCommand() {
  // @@protoc_insertion_point(destructor:NSPanelMQTTManagerCommand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelMQTTManagerCommand::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_CommandData()) {
    clear_CommandData();
  }
  _impl_.~Impl_();
}

void NSPanelMQTTManagerCommand::clear_CommandData() {
// @@protoc_insertion_point(one_of_clear_start:NSPanelMQTTManagerCommand)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (CommandData_case()) {
    case kFirstPageTurnOn: {
      if (GetArena() == nullptr) {
        delete _impl_.CommandData_.first_page_turn_on_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.first_page_turn_on_);
      }
      break;
    }
    case kFirstPageTurnOff: {
      if (GetArena() == nullptr) {
        delete _impl_.CommandData_.first_page_turn_off_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.first_page_turn_off_);
      }
      break;
    }
    case kLightCommand: {
      if (GetArena() == nullptr) {
        delete _impl_.CommandData_.light_command_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.light_command_);
      }
      break;
    }
    case kToggleEntityFromEntitiesPage: {
      if (GetArena() == nullptr) {
        delete _impl_.CommandData_.toggle_entity_from_entities_page_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.toggle_entity_from_entities_page_);
      }
      break;
    }
    case kSaveSceneCommand: {
      if (GetArena() == nullptr) {
        delete _impl_.CommandData_.save_scene_command_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.save_scene_command_);
      }
      break;
    }
    case kButtonPressed: {
      if (GetArena() == nullptr) {
        delete _impl_.CommandData_.button_pressed_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.CommandData_.button_pressed_);
      }
      break;
    }
    case COMMANDDATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = COMMANDDATA_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
NSPanelMQTTManagerCommand::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand, _impl_._cached_size_),
              false,
          },
          &NSPanelMQTTManagerCommand::MergeImpl,
          &NSPanelMQTTManagerCommand::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 6, 0, 2> NSPanelMQTTManagerCommand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NSPanelMQTTManagerCommand_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .NSPanelMQTTManagerCommand.FirstPageTurnLightOn first_page_turn_on = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand, _impl_.CommandData_.first_page_turn_on_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .NSPanelMQTTManagerCommand.FirstPageTurnLightOff first_page_turn_off = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand, _impl_.CommandData_.first_page_turn_off_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .NSPanelMQTTManagerCommand.LightCommand light_command = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand, _impl_.CommandData_.light_command_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage toggle_entity_from_entities_page = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand, _impl_.CommandData_.toggle_entity_from_entities_page_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .NSPanelMQTTManagerCommand.SaveSceneCommand save_scene_command = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand, _impl_.CommandData_.save_scene_command_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .NSPanelMQTTManagerCommand.ButtonPressed button_pressed = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelMQTTManagerCommand, _impl_.CommandData_.button_pressed_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_FirstPageTurnLightOn>()},
    {::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_FirstPageTurnLightOff>()},
    {::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_LightCommand>()},
    {::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage>()},
    {::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_SaveSceneCommand>()},
    {::_pbi::TcParser::GetTable<::NSPanelMQTTManagerCommand_ButtonPressed>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void NSPanelMQTTManagerCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelMQTTManagerCommand)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_CommandData();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelMQTTManagerCommand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelMQTTManagerCommand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (CommandData_case()) {
    case kFirstPageTurnOn: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *_impl_.CommandData_.first_page_turn_on_, _impl_.CommandData_.first_page_turn_on_->GetCachedSize(), target, stream);
      break;
    }
    case kFirstPageTurnOff: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *_impl_.CommandData_.first_page_turn_off_, _impl_.CommandData_.first_page_turn_off_->GetCachedSize(), target, stream);
      break;
    }
    case kLightCommand: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *_impl_.CommandData_.light_command_, _impl_.CommandData_.light_command_->GetCachedSize(), target, stream);
      break;
    }
    case kToggleEntityFromEntitiesPage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *_impl_.CommandData_.toggle_entity_from_entities_page_, _impl_.CommandData_.toggle_entity_from_entities_page_->GetCachedSize(), target, stream);
      break;
    }
    case kSaveSceneCommand: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *_impl_.CommandData_.save_scene_command_, _impl_.CommandData_.save_scene_command_->GetCachedSize(), target, stream);
      break;
    }
    case kButtonPressed: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *_impl_.CommandData_.button_pressed_, _impl_.CommandData_.button_pressed_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelMQTTManagerCommand)
  return target;
}

::size_t NSPanelMQTTManagerCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelMQTTManagerCommand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (CommandData_case()) {
    // .NSPanelMQTTManagerCommand.FirstPageTurnLightOn first_page_turn_on = 1;
    case kFirstPageTurnOn: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.CommandData_.first_page_turn_on_);
      break;
    }
    // .NSPanelMQTTManagerCommand.FirstPageTurnLightOff first_page_turn_off = 2;
    case kFirstPageTurnOff: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.CommandData_.first_page_turn_off_);
      break;
    }
    // .NSPanelMQTTManagerCommand.LightCommand light_command = 3;
    case kLightCommand: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.CommandData_.light_command_);
      break;
    }
    // .NSPanelMQTTManagerCommand.ToggleEntityFromEntitiesPage toggle_entity_from_entities_page = 4;
    case kToggleEntityFromEntitiesPage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.CommandData_.toggle_entity_from_entities_page_);
      break;
    }
    // .NSPanelMQTTManagerCommand.SaveSceneCommand save_scene_command = 5;
    case kSaveSceneCommand: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.CommandData_.save_scene_command_);
      break;
    }
    // .NSPanelMQTTManagerCommand.ButtonPressed button_pressed = 6;
    case kButtonPressed: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.CommandData_.button_pressed_);
      break;
    }
    case COMMANDDATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelMQTTManagerCommand::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelMQTTManagerCommand*>(&to_msg);
  auto& from = static_cast<const NSPanelMQTTManagerCommand&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelMQTTManagerCommand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_CommandData();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kFirstPageTurnOn: {
        if (oneof_needs_init) {
          _this->_impl_.CommandData_.first_page_turn_on_ =
              ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_FirstPageTurnLightOn>(arena, *from._impl_.CommandData_.first_page_turn_on_);
        } else {
          _this->_impl_.CommandData_.first_page_turn_on_->MergeFrom(from._internal_first_page_turn_on());
        }
        break;
      }
      case kFirstPageTurnOff: {
        if (oneof_needs_init) {
          _this->_impl_.CommandData_.first_page_turn_off_ =
              ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_FirstPageTurnLightOff>(arena, *from._impl_.CommandData_.first_page_turn_off_);
        } else {
          _this->_impl_.CommandData_.first_page_turn_off_->MergeFrom(from._internal_first_page_turn_off());
        }
        break;
      }
      case kLightCommand: {
        if (oneof_needs_init) {
          _this->_impl_.CommandData_.light_command_ =
              ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_LightCommand>(arena, *from._impl_.CommandData_.light_command_);
        } else {
          _this->_impl_.CommandData_.light_command_->MergeFrom(from._internal_light_command());
        }
        break;
      }
      case kToggleEntityFromEntitiesPage: {
        if (oneof_needs_init) {
          _this->_impl_.CommandData_.toggle_entity_from_entities_page_ =
              ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_ToggleEntityFromEntitiesPage>(arena, *from._impl_.CommandData_.toggle_entity_from_entities_page_);
        } else {
          _this->_impl_.CommandData_.toggle_entity_from_entities_page_->MergeFrom(from._internal_toggle_entity_from_entities_page());
        }
        break;
      }
      case kSaveSceneCommand: {
        if (oneof_needs_init) {
          _this->_impl_.CommandData_.save_scene_command_ =
              ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_SaveSceneCommand>(arena, *from._impl_.CommandData_.save_scene_command_);
        } else {
          _this->_impl_.CommandData_.save_scene_command_->MergeFrom(from._internal_save_scene_command());
        }
        break;
      }
      case kButtonPressed: {
        if (oneof_needs_init) {
          _this->_impl_.CommandData_.button_pressed_ =
              ::google::protobuf::Message::CopyConstruct<::NSPanelMQTTManagerCommand_ButtonPressed>(arena, *from._impl_.CommandData_.button_pressed_);
        } else {
          _this->_impl_.CommandData_.button_pressed_->MergeFrom(from._internal_button_pressed());
        }
        break;
      }
      case COMMANDDATA_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelMQTTManagerCommand::CopyFrom(const NSPanelMQTTManagerCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelMQTTManagerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelMQTTManagerCommand::InternalSwap(NSPanelMQTTManagerCommand* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.CommandData_, other->_impl_.CommandData_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata NSPanelMQTTManagerCommand::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
