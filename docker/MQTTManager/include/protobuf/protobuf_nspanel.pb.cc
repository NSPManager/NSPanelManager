// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuf_nspanel.proto
// Protobuf C++ Version: 5.27.0

#include "protobuf_nspanel.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr NSPanelStatusReport_NSPanelWarning::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        level_{static_cast< ::NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelStatusReport_NSPanelWarning::NSPanelStatusReport_NSPanelWarning(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelStatusReport_NSPanelWarningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelStatusReport_NSPanelWarningDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelStatusReport_NSPanelWarningDefaultTypeInternal() {}
  union {
    NSPanelStatusReport_NSPanelWarning _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelStatusReport_NSPanelWarningDefaultTypeInternal _NSPanelStatusReport_NSPanelWarning_default_instance_;

inline constexpr NSPanelStatusReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        warnings_{},
        mac_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        temperature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nspanel_state_{static_cast< ::NSPanelStatusReport_state >(0)},
        update_progress_{0},
        rssi_{0},
        heap_used_pct_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelStatusReport::NSPanelStatusReport(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelStatusReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelStatusReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelStatusReportDefaultTypeInternal() {}
  union {
    NSPanelStatusReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelStatusReportDefaultTypeInternal _NSPanelStatusReport_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protobuf_5fnspanel_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protobuf_5fnspanel_2eproto = nullptr;
const ::uint32_t
    TableStruct_protobuf_5fnspanel_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport_NSPanelWarning, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport_NSPanelWarning, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport_NSPanelWarning, _impl_.text_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.nspanel_state_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.update_progress_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.rssi_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.heap_used_pct_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.mac_address_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.temperature_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.ip_address_),
        PROTOBUF_FIELD_OFFSET(::NSPanelStatusReport, _impl_.warnings_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::NSPanelStatusReport_NSPanelWarning)},
        {10, 26, -1, sizeof(::NSPanelStatusReport)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_NSPanelStatusReport_NSPanelWarning_default_instance_._instance,
    &::_NSPanelStatusReport_default_instance_._instance,
};
const char descriptor_table_protodef_protobuf_5fnspanel_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\026protobuf_nspanel.proto\"\274\004\n\023NSPanelStat"
    "usReport\0221\n\rnspanel_state\030\001 \001(\0162\032.NSPane"
    "lStatusReport.state\022\034\n\017update_progress\030\002"
    " \001(\005H\000\210\001\001\022\014\n\004rssi\030\003 \001(\005\022\025\n\rheap_used_pct"
    "\030\004 \001(\005\022\023\n\013mac_address\030\005 \001(\t\022\023\n\013temperatu"
    "re\030\006 \001(\t\022\022\n\nip_address\030\007 \001(\t\0225\n\010warnings"
    "\030\010 \003(\0132#.NSPanelStatusReport.NSPanelWarn"
    "ing\032\303\001\n\016NSPanelWarning\022F\n\005level\030\001 \001(\01627."
    "NSPanelStatusReport.NSPanelWarning.NSPan"
    "elWarningLevel\022\014\n\004text\030\002 \001(\t\"[\n\023NSPanelW"
    "arningLevel\022\014\n\010CRITICAL\020\000\022\t\n\005ERROR\020\001\022\013\n\007"
    "WARNING\020\002\022\010\n\004INFO\020\003\022\t\n\005DEBUG\020\004\022\t\n\005TRACE\020"
    "\005\"`\n\005state\022\n\n\006ONLINE\020\000\022\013\n\007OFFLINE\020\001\022\020\n\014U"
    "PDATING_TFT\020\002\022\025\n\021UPDATING_FIRMWARE\020\003\022\025\n\021"
    "UPDATING_LITTLEFS\020\004B\022\n\020_update_progressb"
    "\006proto3"
};
static ::absl::once_flag descriptor_table_protobuf_5fnspanel_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_protobuf_5fnspanel_2eproto = {
    false,
    false,
    607,
    descriptor_table_protodef_protobuf_5fnspanel_2eproto,
    "protobuf_nspanel.proto",
    &descriptor_table_protobuf_5fnspanel_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_protobuf_5fnspanel_2eproto::offsets,
    file_level_enum_descriptors_protobuf_5fnspanel_2eproto,
    file_level_service_descriptors_protobuf_5fnspanel_2eproto,
};
const ::google::protobuf::EnumDescriptor* NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto);
  return file_level_enum_descriptors_protobuf_5fnspanel_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_internal_data_[] = {
    393216u, 0u, };
bool NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::CRITICAL;
constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::ERROR;
constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::WARNING;
constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::INFO;
constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::DEBUG;
constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::TRACE;
constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::NSPanelWarningLevel_MIN;
constexpr NSPanelStatusReport_NSPanelWarning_NSPanelWarningLevel NSPanelStatusReport_NSPanelWarning::NSPanelWarningLevel_MAX;
constexpr int NSPanelStatusReport_NSPanelWarning::NSPanelWarningLevel_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NSPanelStatusReport_state_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto);
  return file_level_enum_descriptors_protobuf_5fnspanel_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelStatusReport_state_internal_data_[] = {
    327680u, 0u, };
bool NSPanelStatusReport_state_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelStatusReport_state NSPanelStatusReport::ONLINE;
constexpr NSPanelStatusReport_state NSPanelStatusReport::OFFLINE;
constexpr NSPanelStatusReport_state NSPanelStatusReport::UPDATING_TFT;
constexpr NSPanelStatusReport_state NSPanelStatusReport::UPDATING_FIRMWARE;
constexpr NSPanelStatusReport_state NSPanelStatusReport::UPDATING_LITTLEFS;
constexpr NSPanelStatusReport_state NSPanelStatusReport::state_MIN;
constexpr NSPanelStatusReport_state NSPanelStatusReport::state_MAX;
constexpr int NSPanelStatusReport::state_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class NSPanelStatusReport_NSPanelWarning::_Internal {
 public:
};

NSPanelStatusReport_NSPanelWarning::NSPanelStatusReport_NSPanelWarning(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelStatusReport.NSPanelWarning)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelStatusReport_NSPanelWarning::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelStatusReport_NSPanelWarning& from_msg)
      : text_(arena, from.text_),
        _cached_size_{0} {}

NSPanelStatusReport_NSPanelWarning::NSPanelStatusReport_NSPanelWarning(
    ::google::protobuf::Arena* arena,
    const NSPanelStatusReport_NSPanelWarning& from)
    : ::google::protobuf::Message(arena) {
  NSPanelStatusReport_NSPanelWarning* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:NSPanelStatusReport.NSPanelWarning)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelStatusReport_NSPanelWarning::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : text_(arena),
        _cached_size_{0} {}

inline void NSPanelStatusReport_NSPanelWarning::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.level_ = {};
}
NSPanelStatusReport_NSPanelWarning::~NSPanelStatusReport_NSPanelWarning() {
  // @@protoc_insertion_point(destructor:NSPanelStatusReport.NSPanelWarning)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelStatusReport_NSPanelWarning::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelStatusReport_NSPanelWarning::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelStatusReport_NSPanelWarning, _impl_._cached_size_),
              false,
          },
          &NSPanelStatusReport_NSPanelWarning::MergeImpl,
          &NSPanelStatusReport_NSPanelWarning::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 47, 2> NSPanelStatusReport_NSPanelWarning::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelStatusReport_NSPanelWarning_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelStatusReport_NSPanelWarning>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport_NSPanelWarning, _impl_.text_)}},
    // .NSPanelStatusReport.NSPanelWarning.NSPanelWarningLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelStatusReport_NSPanelWarning, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport_NSPanelWarning, _impl_.level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .NSPanelStatusReport.NSPanelWarning.NSPanelWarningLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport_NSPanelWarning, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport_NSPanelWarning, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\42\0\4\0\0\0\0\0"
    "NSPanelStatusReport.NSPanelWarning"
    "text"
  }},
};

PROTOBUF_NOINLINE void NSPanelStatusReport_NSPanelWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelStatusReport.NSPanelWarning)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelStatusReport_NSPanelWarning::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelStatusReport.NSPanelWarning)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .NSPanelStatusReport.NSPanelWarning.NSPanelWarningLevel level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_level(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelStatusReport.NSPanelWarning.text");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelStatusReport.NSPanelWarning)
  return target;
}

::size_t NSPanelStatusReport_NSPanelWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelStatusReport.NSPanelWarning)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .NSPanelStatusReport.NSPanelWarning.NSPanelWarningLevel level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelStatusReport_NSPanelWarning::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelStatusReport_NSPanelWarning*>(&to_msg);
  auto& from = static_cast<const NSPanelStatusReport_NSPanelWarning&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelStatusReport.NSPanelWarning)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelStatusReport_NSPanelWarning::CopyFrom(const NSPanelStatusReport_NSPanelWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelStatusReport.NSPanelWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelStatusReport_NSPanelWarning::InternalSwap(NSPanelStatusReport_NSPanelWarning* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  swap(_impl_.level_, other->_impl_.level_);
}

::google::protobuf::Metadata NSPanelStatusReport_NSPanelWarning::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NSPanelStatusReport::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NSPanelStatusReport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_._has_bits_);
};

NSPanelStatusReport::NSPanelStatusReport(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelStatusReport)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelStatusReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelStatusReport& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        warnings_{visibility, arena, from.warnings_},
        mac_address_(arena, from.mac_address_),
        temperature_(arena, from.temperature_),
        ip_address_(arena, from.ip_address_) {}

NSPanelStatusReport::NSPanelStatusReport(
    ::google::protobuf::Arena* arena,
    const NSPanelStatusReport& from)
    : ::google::protobuf::Message(arena) {
  NSPanelStatusReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nspanel_state_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, nspanel_state_),
           offsetof(Impl_, heap_used_pct_) -
               offsetof(Impl_, nspanel_state_) +
               sizeof(Impl_::heap_used_pct_));

  // @@protoc_insertion_point(copy_constructor:NSPanelStatusReport)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelStatusReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        warnings_{visibility, arena},
        mac_address_(arena),
        temperature_(arena),
        ip_address_(arena) {}

inline void NSPanelStatusReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nspanel_state_),
           0,
           offsetof(Impl_, heap_used_pct_) -
               offsetof(Impl_, nspanel_state_) +
               sizeof(Impl_::heap_used_pct_));
}
NSPanelStatusReport::~NSPanelStatusReport() {
  // @@protoc_insertion_point(destructor:NSPanelStatusReport)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelStatusReport::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.mac_address_.Destroy();
  _impl_.temperature_.Destroy();
  _impl_.ip_address_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelStatusReport::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_._cached_size_),
              false,
          },
          &NSPanelStatusReport::MergeImpl,
          &NSPanelStatusReport::kDescriptorMethods,
          &descriptor_table_protobuf_5fnspanel_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 68, 2> NSPanelStatusReport::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NSPanelStatusReport_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelStatusReport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .NSPanelStatusReport.NSPanelWarning warnings = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.warnings_)}},
    // .NSPanelStatusReport.state nspanel_state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelStatusReport, _impl_.nspanel_state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.nspanel_state_)}},
    // optional int32 update_progress = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelStatusReport, _impl_.update_progress_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.update_progress_)}},
    // int32 rssi = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelStatusReport, _impl_.rssi_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.rssi_)}},
    // int32 heap_used_pct = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelStatusReport, _impl_.heap_used_pct_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.heap_used_pct_)}},
    // string mac_address = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.mac_address_)}},
    // string temperature = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.temperature_)}},
    // string ip_address = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.ip_address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .NSPanelStatusReport.state nspanel_state = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.nspanel_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional int32 update_progress = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.update_progress_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 rssi = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.rssi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 heap_used_pct = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.heap_used_pct_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string mac_address = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.mac_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string temperature = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.temperature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ip_address = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.ip_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .NSPanelStatusReport.NSPanelWarning warnings = 8;
    {PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.warnings_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::NSPanelStatusReport_NSPanelWarning>()},
  }}, {{
    "\23\0\0\0\0\13\13\12\0\0\0\0\0\0\0\0"
    "NSPanelStatusReport"
    "mac_address"
    "temperature"
    "ip_address"
  }},
};

PROTOBUF_NOINLINE void NSPanelStatusReport::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelStatusReport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.warnings_.Clear();
  _impl_.mac_address_.ClearToEmpty();
  _impl_.temperature_.ClearToEmpty();
  _impl_.ip_address_.ClearToEmpty();
  _impl_.nspanel_state_ = 0;
  _impl_.update_progress_ = 0;
  ::memset(&_impl_.rssi_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.heap_used_pct_) -
      reinterpret_cast<char*>(&_impl_.rssi_)) + sizeof(_impl_.heap_used_pct_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelStatusReport::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelStatusReport)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .NSPanelStatusReport.state nspanel_state = 1;
  if (this->_internal_nspanel_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_nspanel_state(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 update_progress = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_update_progress(), target);
  }

  // int32 rssi = 3;
  if (this->_internal_rssi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_rssi(), target);
  }

  // int32 heap_used_pct = 4;
  if (this->_internal_heap_used_pct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_heap_used_pct(), target);
  }

  // string mac_address = 5;
  if (!this->_internal_mac_address().empty()) {
    const std::string& _s = this->_internal_mac_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelStatusReport.mac_address");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string temperature = 6;
  if (!this->_internal_temperature().empty()) {
    const std::string& _s = this->_internal_temperature();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelStatusReport.temperature");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string ip_address = 7;
  if (!this->_internal_ip_address().empty()) {
    const std::string& _s = this->_internal_ip_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelStatusReport.ip_address");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // repeated .NSPanelStatusReport.NSPanelWarning warnings = 8;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_warnings_size());
       i < n; i++) {
    const auto& repfield = this->_internal_warnings().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            8, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelStatusReport)
  return target;
}

::size_t NSPanelStatusReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelStatusReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .NSPanelStatusReport.NSPanelWarning warnings = 8;
  total_size += 1UL * this->_internal_warnings_size();
  for (const auto& msg : this->_internal_warnings()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string mac_address = 5;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mac_address());
  }

  // string temperature = 6;
  if (!this->_internal_temperature().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_temperature());
  }

  // string ip_address = 7;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip_address());
  }

  // .NSPanelStatusReport.state nspanel_state = 1;
  if (this->_internal_nspanel_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nspanel_state());
  }

  // optional int32 update_progress = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_update_progress());
  }

  // int32 rssi = 3;
  if (this->_internal_rssi() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rssi());
  }

  // int32 heap_used_pct = 4;
  if (this->_internal_heap_used_pct() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_heap_used_pct());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelStatusReport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelStatusReport*>(&to_msg);
  auto& from = static_cast<const NSPanelStatusReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelStatusReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_warnings()->MergeFrom(
      from._internal_warnings());
  if (!from._internal_mac_address().empty()) {
    _this->_internal_set_mac_address(from._internal_mac_address());
  }
  if (!from._internal_temperature().empty()) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (from._internal_nspanel_state() != 0) {
    _this->_impl_.nspanel_state_ = from._impl_.nspanel_state_;
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.update_progress_ = from._impl_.update_progress_;
  }
  if (from._internal_rssi() != 0) {
    _this->_impl_.rssi_ = from._impl_.rssi_;
  }
  if (from._internal_heap_used_pct() != 0) {
    _this->_impl_.heap_used_pct_ = from._impl_.heap_used_pct_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelStatusReport::CopyFrom(const NSPanelStatusReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelStatusReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelStatusReport::InternalSwap(NSPanelStatusReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.warnings_.InternalSwap(&other->_impl_.warnings_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mac_address_, &other->_impl_.mac_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.temperature_, &other->_impl_.temperature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_address_, &other->_impl_.ip_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.heap_used_pct_)
      + sizeof(NSPanelStatusReport::_impl_.heap_used_pct_)
      - PROTOBUF_FIELD_OFFSET(NSPanelStatusReport, _impl_.nspanel_state_)>(
          reinterpret_cast<char*>(&_impl_.nspanel_state_),
          reinterpret_cast<char*>(&other->_impl_.nspanel_state_));
}

::google::protobuf::Metadata NSPanelStatusReport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_protobuf_5fnspanel_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
