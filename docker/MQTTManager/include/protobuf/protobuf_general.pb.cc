// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuf_general.proto
// Protobuf C++ Version: 5.27.0

#include "protobuf_general.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr RoomSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : light_ids_{},
        _light_ids_cached_byte_size_{0},
        scene_ids_{},
        _scene_ids_cached_byte_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RoomSettings::RoomSettings(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoomSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomSettingsDefaultTypeInternal() {}
  union {
    RoomSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomSettingsDefaultTypeInternal _RoomSettings_default_instance_;

inline constexpr LightSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        home_assistant_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_control_mode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_item_switch_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_item_dimmer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_item_color_temp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_item_rgb_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        room_id_{0},
        is_ceiling_light_{false},
        can_dim_{false},
        can_color_temperature_{false},
        can_rgb_{false} {}

template <typename>
PROTOBUF_CONSTEXPR LightSettings::LightSettings(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LightSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightSettingsDefaultTypeInternal() {}
  union {
    LightSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightSettingsDefaultTypeInternal _LightSettings_default_instance_;

inline constexpr MultipleRoomsSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rooms_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MultipleRoomsSettings::MultipleRoomsSettings(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MultipleRoomsSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultipleRoomsSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultipleRoomsSettingsDefaultTypeInternal() {}
  union {
    MultipleRoomsSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultipleRoomsSettingsDefaultTypeInternal _MultipleRoomsSettings_default_instance_;

inline constexpr MultipleLightsSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : lights_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MultipleLightsSettings::MultipleLightsSettings(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MultipleLightsSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultipleLightsSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultipleLightsSettingsDefaultTypeInternal() {}
  union {
    MultipleLightsSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultipleLightsSettingsDefaultTypeInternal _MultipleLightsSettings_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protobuf_5fgeneral_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protobuf_5fgeneral_2eproto = nullptr;
const ::uint32_t
    TableStruct_protobuf_5fgeneral_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RoomSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RoomSettings, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::RoomSettings, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::RoomSettings, _impl_.light_ids_),
        PROTOBUF_FIELD_OFFSET(::RoomSettings, _impl_.scene_ids_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::MultipleRoomsSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MultipleRoomsSettings, _impl_.rooms_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.is_ceiling_light_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.can_dim_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.can_color_temperature_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.can_rgb_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.home_assistant_name_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.openhab_name_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.openhab_control_mode_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.openhab_item_switch_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.openhab_item_dimmer_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.openhab_item_color_temp_),
        PROTOBUF_FIELD_OFFSET(::LightSettings, _impl_.openhab_item_rgb_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::MultipleLightsSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MultipleLightsSettings, _impl_.lights_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::RoomSettings)},
        {12, -1, -1, sizeof(::MultipleRoomsSettings)},
        {21, 44, -1, sizeof(::LightSettings)},
        {59, -1, -1, sizeof(::MultipleLightsSettings)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_RoomSettings_default_instance_._instance,
    &::_MultipleRoomsSettings_default_instance_._instance,
    &::_LightSettings_default_instance_._instance,
    &::_MultipleLightsSettings_default_instance_._instance,
};
const char descriptor_table_protodef_protobuf_5fgeneral_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\026protobuf_general.proto\"N\n\014RoomSettings"
    "\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\021\n\tlight_ids\030"
    "\003 \003(\005\022\021\n\tscene_ids\030\004 \003(\005\"5\n\025MultipleRoom"
    "sSettings\022\034\n\005rooms\030\001 \003(\0132\r.RoomSettings\""
    "\257\004\n\rLightSettings\022\n\n\002id\030\001 \001(\005\022\017\n\007room_id"
    "\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004 \001(\t\022\030\n\020is"
    "_ceiling_light\030\005 \001(\010\022\017\n\007can_dim\030\006 \001(\010\022\035\n"
    "\025can_color_temperature\030\007 \001(\010\022\017\n\007can_rgb\030"
    "\010 \001(\010\022 \n\023home_assistant_name\030\t \001(\tH\000\210\001\001\022"
    "\031\n\014openhab_name\030\n \001(\tH\001\210\001\001\022!\n\024openhab_co"
    "ntrol_mode\030\013 \001(\tH\002\210\001\001\022 \n\023openhab_item_sw"
    "itch\030\014 \001(\tH\003\210\001\001\022 \n\023openhab_item_dimmer\030\r"
    " \001(\tH\004\210\001\001\022$\n\027openhab_item_color_temp\030\016 \001"
    "(\tH\005\210\001\001\022\035\n\020openhab_item_rgb\030\017 \001(\tH\006\210\001\001B\026"
    "\n\024_home_assistant_nameB\017\n\r_openhab_nameB"
    "\027\n\025_openhab_control_modeB\026\n\024_openhab_ite"
    "m_switchB\026\n\024_openhab_item_dimmerB\032\n\030_ope"
    "nhab_item_color_tempB\023\n\021_openhab_item_rg"
    "b\"8\n\026MultipleLightsSettings\022\036\n\006lights\030\001 "
    "\003(\0132\016.LightSettingsb\006proto3"
};
static ::absl::once_flag descriptor_table_protobuf_5fgeneral_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_protobuf_5fgeneral_2eproto = {
    false,
    false,
    787,
    descriptor_table_protodef_protobuf_5fgeneral_2eproto,
    "protobuf_general.proto",
    &descriptor_table_protobuf_5fgeneral_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_protobuf_5fgeneral_2eproto::offsets,
    file_level_enum_descriptors_protobuf_5fgeneral_2eproto,
    file_level_service_descriptors_protobuf_5fgeneral_2eproto,
};
// ===================================================================

class RoomSettings::_Internal {
 public:
};

RoomSettings::RoomSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoomSettings)
}
inline PROTOBUF_NDEBUG_INLINE RoomSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RoomSettings& from_msg)
      : light_ids_{visibility, arena, from.light_ids_},
        _light_ids_cached_byte_size_{0},
        scene_ids_{visibility, arena, from.scene_ids_},
        _scene_ids_cached_byte_size_{0},
        name_(arena, from.name_),
        _cached_size_{0} {}

RoomSettings::RoomSettings(
    ::google::protobuf::Arena* arena,
    const RoomSettings& from)
    : ::google::protobuf::Message(arena) {
  RoomSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:RoomSettings)
}
inline PROTOBUF_NDEBUG_INLINE RoomSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : light_ids_{visibility, arena},
        _light_ids_cached_byte_size_{0},
        scene_ids_{visibility, arena},
        _scene_ids_cached_byte_size_{0},
        name_(arena),
        _cached_size_{0} {}

inline void RoomSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
RoomSettings::~RoomSettings() {
  // @@protoc_insertion_point(destructor:RoomSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoomSettings::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RoomSettings::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_._cached_size_),
              false,
          },
          &RoomSettings::MergeImpl,
          &RoomSettings::kDescriptorMethods,
          &descriptor_table_protobuf_5fgeneral_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 25, 2> RoomSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RoomSettings_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RoomSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated int32 scene_ids = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.scene_ids_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomSettings, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.name_)}},
    // repeated int32 light_ids = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.light_ids_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated int32 light_ids = 3;
    {PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.light_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 scene_ids = 4;
    {PROTOBUF_FIELD_OFFSET(RoomSettings, _impl_.scene_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
    "\14\0\4\0\0\0\0\0"
    "RoomSettings"
    "name"
  }},
};

PROTOBUF_NOINLINE void RoomSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.light_ids_.Clear();
  _impl_.scene_ids_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* RoomSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "RoomSettings.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated int32 light_ids = 3;
  {
    int byte_size = _impl_._light_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_light_ids(), byte_size, target);
    }
  }

  // repeated int32 scene_ids = 4;
  {
    int byte_size = _impl_._scene_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_scene_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomSettings)
  return target;
}

::size_t RoomSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated int32 light_ids = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_light_ids())
    ;
    _impl_._light_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 scene_ids = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_scene_ids())
    ;
    _impl_._scene_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RoomSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoomSettings*>(&to_msg);
  auto& from = static_cast<const RoomSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RoomSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_light_ids()->MergeFrom(from._internal_light_ids());
  _this->_internal_mutable_scene_ids()->MergeFrom(from._internal_scene_ids());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoomSettings::CopyFrom(const RoomSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoomSettings::InternalSwap(RoomSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.light_ids_.InternalSwap(&other->_impl_.light_ids_);
  _impl_.scene_ids_.InternalSwap(&other->_impl_.scene_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata RoomSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MultipleRoomsSettings::_Internal {
 public:
};

MultipleRoomsSettings::MultipleRoomsSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MultipleRoomsSettings)
}
inline PROTOBUF_NDEBUG_INLINE MultipleRoomsSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::MultipleRoomsSettings& from_msg)
      : rooms_{visibility, arena, from.rooms_},
        _cached_size_{0} {}

MultipleRoomsSettings::MultipleRoomsSettings(
    ::google::protobuf::Arena* arena,
    const MultipleRoomsSettings& from)
    : ::google::protobuf::Message(arena) {
  MultipleRoomsSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:MultipleRoomsSettings)
}
inline PROTOBUF_NDEBUG_INLINE MultipleRoomsSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : rooms_{visibility, arena},
        _cached_size_{0} {}

inline void MultipleRoomsSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MultipleRoomsSettings::~MultipleRoomsSettings() {
  // @@protoc_insertion_point(destructor:MultipleRoomsSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MultipleRoomsSettings::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
MultipleRoomsSettings::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(MultipleRoomsSettings, _impl_._cached_size_),
              false,
          },
          &MultipleRoomsSettings::MergeImpl,
          &MultipleRoomsSettings::kDescriptorMethods,
          &descriptor_table_protobuf_5fgeneral_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MultipleRoomsSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MultipleRoomsSettings_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MultipleRoomsSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .RoomSettings rooms = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MultipleRoomsSettings, _impl_.rooms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .RoomSettings rooms = 1;
    {PROTOBUF_FIELD_OFFSET(MultipleRoomsSettings, _impl_.rooms_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RoomSettings>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MultipleRoomsSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:MultipleRoomsSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rooms_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MultipleRoomsSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MultipleRoomsSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .RoomSettings rooms = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_rooms_size());
       i < n; i++) {
    const auto& repfield = this->_internal_rooms().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultipleRoomsSettings)
  return target;
}

::size_t MultipleRoomsSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultipleRoomsSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .RoomSettings rooms = 1;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->_internal_rooms()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void MultipleRoomsSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MultipleRoomsSettings*>(&to_msg);
  auto& from = static_cast<const MultipleRoomsSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MultipleRoomsSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rooms()->MergeFrom(
      from._internal_rooms());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultipleRoomsSettings::CopyFrom(const MultipleRoomsSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultipleRoomsSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MultipleRoomsSettings::InternalSwap(MultipleRoomsSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rooms_.InternalSwap(&other->_impl_.rooms_);
}

::google::protobuf::Metadata MultipleRoomsSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LightSettings::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LightSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LightSettings, _impl_._has_bits_);
};

LightSettings::LightSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:LightSettings)
}
inline PROTOBUF_NDEBUG_INLINE LightSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::LightSettings& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        type_(arena, from.type_),
        home_assistant_name_(arena, from.home_assistant_name_),
        openhab_name_(arena, from.openhab_name_),
        openhab_control_mode_(arena, from.openhab_control_mode_),
        openhab_item_switch_(arena, from.openhab_item_switch_),
        openhab_item_dimmer_(arena, from.openhab_item_dimmer_),
        openhab_item_color_temp_(arena, from.openhab_item_color_temp_),
        openhab_item_rgb_(arena, from.openhab_item_rgb_) {}

LightSettings::LightSettings(
    ::google::protobuf::Arena* arena,
    const LightSettings& from)
    : ::google::protobuf::Message(arena) {
  LightSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, can_rgb_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::can_rgb_));

  // @@protoc_insertion_point(copy_constructor:LightSettings)
}
inline PROTOBUF_NDEBUG_INLINE LightSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        type_(arena),
        home_assistant_name_(arena),
        openhab_name_(arena),
        openhab_control_mode_(arena),
        openhab_item_switch_(arena),
        openhab_item_dimmer_(arena),
        openhab_item_color_temp_(arena),
        openhab_item_rgb_(arena) {}

inline void LightSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, can_rgb_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::can_rgb_));
}
LightSettings::~LightSettings() {
  // @@protoc_insertion_point(destructor:LightSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LightSettings::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.home_assistant_name_.Destroy();
  _impl_.openhab_name_.Destroy();
  _impl_.openhab_control_mode_.Destroy();
  _impl_.openhab_item_switch_.Destroy();
  _impl_.openhab_item_dimmer_.Destroy();
  _impl_.openhab_item_color_temp_.Destroy();
  _impl_.openhab_item_rgb_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
LightSettings::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(LightSettings, _impl_._cached_size_),
              false,
          },
          &LightSettings::MergeImpl,
          &LightSettings::kDescriptorMethods,
          &descriptor_table_protobuf_5fgeneral_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 0, 166, 2> LightSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LightSettings, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LightSettings_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::LightSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LightSettings, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.id_)}},
    // int32 room_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LightSettings, _impl_.room_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.room_id_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.name_)}},
    // string type = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.type_)}},
    // bool is_ceiling_light = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LightSettings, _impl_.is_ceiling_light_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.is_ceiling_light_)}},
    // bool can_dim = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LightSettings, _impl_.can_dim_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.can_dim_)}},
    // bool can_color_temperature = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LightSettings, _impl_.can_color_temperature_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.can_color_temperature_)}},
    // bool can_rgb = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LightSettings, _impl_.can_rgb_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.can_rgb_)}},
    // optional string home_assistant_name = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.home_assistant_name_)}},
    // optional string openhab_name = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 1, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_name_)}},
    // optional string openhab_control_mode = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 2, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_control_mode_)}},
    // optional string openhab_item_switch = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 3, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_item_switch_)}},
    // optional string openhab_item_dimmer = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 4, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_item_dimmer_)}},
    // optional string openhab_item_color_temp = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 5, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_item_color_temp_)}},
    // optional string openhab_item_rgb = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 6, 0, PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_item_rgb_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 room_id = 2;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string type = 4;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_ceiling_light = 5;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.is_ceiling_light_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_dim = 6;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.can_dim_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_color_temperature = 7;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.can_color_temperature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_rgb = 8;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.can_rgb_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // optional string home_assistant_name = 9;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.home_assistant_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string openhab_name = 10;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string openhab_control_mode = 11;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_control_mode_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string openhab_item_switch = 12;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_item_switch_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string openhab_item_dimmer = 13;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_item_dimmer_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string openhab_item_color_temp = 14;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_item_color_temp_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string openhab_item_rgb = 15;
    {PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.openhab_item_rgb_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\15\0\0\4\4\0\0\0\0\23\14\24\23\23\27\20"
    "LightSettings"
    "name"
    "type"
    "home_assistant_name"
    "openhab_name"
    "openhab_control_mode"
    "openhab_item_switch"
    "openhab_item_dimmer"
    "openhab_item_color_temp"
    "openhab_item_rgb"
  }},
};

PROTOBUF_NOINLINE void LightSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:LightSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.home_assistant_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.openhab_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.openhab_control_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.openhab_item_switch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.openhab_item_dimmer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.openhab_item_color_temp_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.openhab_item_rgb_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.can_rgb_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.can_rgb_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* LightSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LightSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 room_id = 2;
  if (this->_internal_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_room_id(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LightSettings.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LightSettings.type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool is_ceiling_light = 5;
  if (this->_internal_is_ceiling_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_ceiling_light(), target);
  }

  // bool can_dim = 6;
  if (this->_internal_can_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_can_dim(), target);
  }

  // bool can_color_temperature = 7;
  if (this->_internal_can_color_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_can_color_temperature(), target);
  }

  // bool can_rgb = 8;
  if (this->_internal_can_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_can_rgb(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string home_assistant_name = 9;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_home_assistant_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LightSettings.home_assistant_name");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional string openhab_name = 10;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_openhab_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LightSettings.openhab_name");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional string openhab_control_mode = 11;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_openhab_control_mode();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LightSettings.openhab_control_mode");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional string openhab_item_switch = 12;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_openhab_item_switch();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LightSettings.openhab_item_switch");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional string openhab_item_dimmer = 13;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_openhab_item_dimmer();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LightSettings.openhab_item_dimmer");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional string openhab_item_color_temp = 14;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_openhab_item_color_temp();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LightSettings.openhab_item_color_temp");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // optional string openhab_item_rgb = 15;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_openhab_item_rgb();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LightSettings.openhab_item_rgb");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LightSettings)
  return target;
}

::size_t LightSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LightSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string home_assistant_name = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_home_assistant_name());
    }

    // optional string openhab_name = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_openhab_name());
    }

    // optional string openhab_control_mode = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_openhab_control_mode());
    }

    // optional string openhab_item_switch = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_openhab_item_switch());
    }

    // optional string openhab_item_dimmer = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_openhab_item_dimmer());
    }

    // optional string openhab_item_color_temp = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_openhab_item_color_temp());
    }

    // optional string openhab_item_rgb = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_openhab_item_rgb());
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 room_id = 2;
  if (this->_internal_room_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_room_id());
  }

  // bool is_ceiling_light = 5;
  if (this->_internal_is_ceiling_light() != 0) {
    total_size += 2;
  }

  // bool can_dim = 6;
  if (this->_internal_can_dim() != 0) {
    total_size += 2;
  }

  // bool can_color_temperature = 7;
  if (this->_internal_can_color_temperature() != 0) {
    total_size += 2;
  }

  // bool can_rgb = 8;
  if (this->_internal_can_rgb() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void LightSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LightSettings*>(&to_msg);
  auto& from = static_cast<const LightSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LightSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_home_assistant_name(from._internal_home_assistant_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_openhab_name(from._internal_openhab_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_openhab_control_mode(from._internal_openhab_control_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_openhab_item_switch(from._internal_openhab_item_switch());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_openhab_item_dimmer(from._internal_openhab_item_dimmer());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_openhab_item_color_temp(from._internal_openhab_item_color_temp());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_openhab_item_rgb(from._internal_openhab_item_rgb());
    }
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_is_ceiling_light() != 0) {
    _this->_impl_.is_ceiling_light_ = from._impl_.is_ceiling_light_;
  }
  if (from._internal_can_dim() != 0) {
    _this->_impl_.can_dim_ = from._impl_.can_dim_;
  }
  if (from._internal_can_color_temperature() != 0) {
    _this->_impl_.can_color_temperature_ = from._impl_.can_color_temperature_;
  }
  if (from._internal_can_rgb() != 0) {
    _this->_impl_.can_rgb_ = from._impl_.can_rgb_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LightSettings::CopyFrom(const LightSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LightSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LightSettings::InternalSwap(LightSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.home_assistant_name_, &other->_impl_.home_assistant_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_name_, &other->_impl_.openhab_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_control_mode_, &other->_impl_.openhab_control_mode_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_item_switch_, &other->_impl_.openhab_item_switch_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_item_dimmer_, &other->_impl_.openhab_item_dimmer_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_item_color_temp_, &other->_impl_.openhab_item_color_temp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_item_rgb_, &other->_impl_.openhab_item_rgb_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.can_rgb_)
      + sizeof(LightSettings::_impl_.can_rgb_)
      - PROTOBUF_FIELD_OFFSET(LightSettings, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata LightSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MultipleLightsSettings::_Internal {
 public:
};

MultipleLightsSettings::MultipleLightsSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MultipleLightsSettings)
}
inline PROTOBUF_NDEBUG_INLINE MultipleLightsSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::MultipleLightsSettings& from_msg)
      : lights_{visibility, arena, from.lights_},
        _cached_size_{0} {}

MultipleLightsSettings::MultipleLightsSettings(
    ::google::protobuf::Arena* arena,
    const MultipleLightsSettings& from)
    : ::google::protobuf::Message(arena) {
  MultipleLightsSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:MultipleLightsSettings)
}
inline PROTOBUF_NDEBUG_INLINE MultipleLightsSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : lights_{visibility, arena},
        _cached_size_{0} {}

inline void MultipleLightsSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MultipleLightsSettings::~MultipleLightsSettings() {
  // @@protoc_insertion_point(destructor:MultipleLightsSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MultipleLightsSettings::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
MultipleLightsSettings::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(MultipleLightsSettings, _impl_._cached_size_),
              false,
          },
          &MultipleLightsSettings::MergeImpl,
          &MultipleLightsSettings::kDescriptorMethods,
          &descriptor_table_protobuf_5fgeneral_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MultipleLightsSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MultipleLightsSettings_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MultipleLightsSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .LightSettings lights = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MultipleLightsSettings, _impl_.lights_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .LightSettings lights = 1;
    {PROTOBUF_FIELD_OFFSET(MultipleLightsSettings, _impl_.lights_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::LightSettings>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MultipleLightsSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:MultipleLightsSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lights_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MultipleLightsSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MultipleLightsSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .LightSettings lights = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_lights_size());
       i < n; i++) {
    const auto& repfield = this->_internal_lights().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultipleLightsSettings)
  return target;
}

::size_t MultipleLightsSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultipleLightsSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .LightSettings lights = 1;
  total_size += 1UL * this->_internal_lights_size();
  for (const auto& msg : this->_internal_lights()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void MultipleLightsSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MultipleLightsSettings*>(&to_msg);
  auto& from = static_cast<const MultipleLightsSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MultipleLightsSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_lights()->MergeFrom(
      from._internal_lights());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultipleLightsSettings::CopyFrom(const MultipleLightsSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultipleLightsSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MultipleLightsSettings::InternalSwap(MultipleLightsSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lights_.InternalSwap(&other->_impl_.lights_);
}

::google::protobuf::Metadata MultipleLightsSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_protobuf_5fgeneral_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
