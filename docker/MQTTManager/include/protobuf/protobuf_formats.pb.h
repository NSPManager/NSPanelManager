// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuf_formats.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_5fformats_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_5fformats_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protobuf_5fformats_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_5fformats_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protobuf_5fformats_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum time_format : int {
  AM_PM = 0,
  FULL = 1,
  time_format_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  time_format_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool time_format_IsValid(int value);
extern const uint32_t time_format_internal_data_[];
constexpr time_format time_format_MIN = static_cast<time_format>(0);
constexpr time_format time_format_MAX = static_cast<time_format>(1);
constexpr int time_format_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
time_format_descriptor();
template <typename T>
const std::string& time_format_Name(T value) {
  static_assert(std::is_same<T, time_format>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to time_format_Name().");
  return time_format_Name(static_cast<time_format>(value));
}
template <>
inline const std::string& time_format_Name(time_format value) {
  return ::google::protobuf::internal::NameOfDenseEnum<time_format_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool time_format_Parse(absl::string_view name, time_format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<time_format>(
      time_format_descriptor(), name, value);
}
enum temperature_format : int {
  FAHRENHEIT = 0,
  CELCIUS = 1,
  temperature_format_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  temperature_format_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool temperature_format_IsValid(int value);
extern const uint32_t temperature_format_internal_data_[];
constexpr temperature_format temperature_format_MIN = static_cast<temperature_format>(0);
constexpr temperature_format temperature_format_MAX = static_cast<temperature_format>(1);
constexpr int temperature_format_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
temperature_format_descriptor();
template <typename T>
const std::string& temperature_format_Name(T value) {
  static_assert(std::is_same<T, temperature_format>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to temperature_format_Name().");
  return temperature_format_Name(static_cast<temperature_format>(value));
}
template <>
inline const std::string& temperature_format_Name(temperature_format value) {
  return ::google::protobuf::internal::NameOfDenseEnum<temperature_format_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool temperature_format_Parse(absl::string_view name, temperature_format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<temperature_format>(
      temperature_format_descriptor(), name, value);
}
enum wind_speed_format : int {
  KM_H = 0,
  M_S = 1,
  MP_H = 2,
  KNOTS = 3,
  wind_speed_format_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  wind_speed_format_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool wind_speed_format_IsValid(int value);
extern const uint32_t wind_speed_format_internal_data_[];
constexpr wind_speed_format wind_speed_format_MIN = static_cast<wind_speed_format>(0);
constexpr wind_speed_format wind_speed_format_MAX = static_cast<wind_speed_format>(3);
constexpr int wind_speed_format_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
wind_speed_format_descriptor();
template <typename T>
const std::string& wind_speed_format_Name(T value) {
  static_assert(std::is_same<T, wind_speed_format>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to wind_speed_format_Name().");
  return wind_speed_format_Name(static_cast<wind_speed_format>(value));
}
template <>
inline const std::string& wind_speed_format_Name(wind_speed_format value) {
  return ::google::protobuf::internal::NameOfDenseEnum<wind_speed_format_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool wind_speed_format_Parse(absl::string_view name, wind_speed_format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<wind_speed_format>(
      wind_speed_format_descriptor(), name, value);
}
enum precipitation_format : int {
  MILLIMETERS = 0,
  INCES = 1,
  precipitation_format_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  precipitation_format_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool precipitation_format_IsValid(int value);
extern const uint32_t precipitation_format_internal_data_[];
constexpr precipitation_format precipitation_format_MIN = static_cast<precipitation_format>(0);
constexpr precipitation_format precipitation_format_MAX = static_cast<precipitation_format>(1);
constexpr int precipitation_format_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
precipitation_format_descriptor();
template <typename T>
const std::string& precipitation_format_Name(T value) {
  static_assert(std::is_same<T, precipitation_format>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to precipitation_format_Name().");
  return precipitation_format_Name(static_cast<precipitation_format>(value));
}
template <>
inline const std::string& precipitation_format_Name(precipitation_format value) {
  return ::google::protobuf::internal::NameOfDenseEnum<precipitation_format_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool precipitation_format_Parse(absl::string_view name, precipitation_format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<precipitation_format>(
      precipitation_format_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::time_format> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::time_format>() {
  return ::time_format_descriptor();
}
template <>
struct is_proto_enum<::temperature_format> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::temperature_format>() {
  return ::temperature_format_descriptor();
}
template <>
struct is_proto_enum<::wind_speed_format> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::wind_speed_format>() {
  return ::wind_speed_format_descriptor();
}
template <>
struct is_proto_enum<::precipitation_format> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::precipitation_format>() {
  return ::precipitation_format_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protobuf_5fformats_2eproto_2epb_2eh
