// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuf_mqttmanager.proto
// Protobuf C++ Version: 5.27.0

#include "protobuf_mqttmanager.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr NSPanelSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rooms_{},
        _rooms_cached_byte_size_{0},
        scenes_{},
        _scenes_cached_byte_size_{0},
        mac_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        button1_mqtt_topic_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        button2_mqtt_topic_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        button1_mqtt_payload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        button2_mqtt_payload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        home_{0},
        default_page_{static_cast< ::NSPanelSettings_NSPanelDefaultPage >(0)},
        raise_to_100_light_level_{0},
        color_temp_min_{0},
        color_temp_max_{0},
        min_button_push_time_{0},
        button_long_press_time_{0},
        special_mode_trigger_time_{0},
        special_mode_release_time_{0},
        mqtt_ignore_time_{0},
        screen_dim_level_{0},
        screensaver_dim_level_{0},
        screensaver_activation_timeout_{0},
        screensaver_mode_{static_cast< ::NSPanelSettings_NSPanelScreensaverMode >(0)},
        reverse_color_temp_{false},
        is_us_panel_{false},
        lock_to_default_room_{false},
        reverse_relays_{false},
        clock_format_{static_cast< ::time_format >(0)},
        temperature_unit_{static_cast< ::temperature_format >(0)},
        temperature_calibration_{0},
        button1_mode_{static_cast< ::NSPanelSettings_NSPanelButtonMode >(0)},
        button2_mode_{static_cast< ::NSPanelSettings_NSPanelButtonMode >(0)},
        button1_detached_light_id_{0},
        button2_detached_light_id_{0},
        relay1_default_mode_{false},
        relay2_default_mode_{false},
        denied_{false},
        accepted_{false},
        relay1_register_type_{static_cast< ::NSPanelSettings_RelayRegisterType >(0)},
        relay2_register_type_{static_cast< ::NSPanelSettings_RelayRegisterType >(0)},
        default_room_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NSPanelSettings::NSPanelSettings(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NSPanelSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NSPanelSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NSPanelSettingsDefaultTypeInternal() {}
  union {
    NSPanelSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NSPanelSettingsDefaultTypeInternal _NSPanelSettings_default_instance_;

inline constexpr MQTTManagerSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : date_format_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        outside_temp_sensor_provider_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        outside_temp_sensor_entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        weather_location_latitude_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        weather_location_longitude_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        manager_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        color_temp_min_{0u},
        color_temp_max_{0u},
        weather_wind_speed_format_{static_cast< ::wind_speed_format >(0)},
        weather_precipitation_unit_{static_cast< ::precipitation_format >(0)},
        weather_update_interval_minutes_{0},
        clock_format_{static_cast< ::time_format >(0)},
        temperature_unit_{static_cast< ::temperature_format >(0)},
        max_log_buffer_size_{0},
        manager_port_{0},
        light_turn_on_behavior_{static_cast< ::MQTTManagerSettings_turn_on_behavior >(0)},
        mqtt_wait_time_{0},
        is_home_assistant_addon_{false},
        optimistic_mode_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MQTTManagerSettings::MQTTManagerSettings(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MQTTManagerSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MQTTManagerSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MQTTManagerSettingsDefaultTypeInternal() {}
  union {
    MQTTManagerSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MQTTManagerSettingsDefaultTypeInternal _MQTTManagerSettings_default_instance_;

inline constexpr MQTTManagerPrivateSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : home_assistant_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        home_assistant_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        openhab_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mqtt_server_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mqtt_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mqtt_password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mqtt_server_port_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MQTTManagerPrivateSettings::MQTTManagerPrivateSettings(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MQTTManagerPrivateSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MQTTManagerPrivateSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MQTTManagerPrivateSettingsDefaultTypeInternal() {}
  union {
    MQTTManagerPrivateSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MQTTManagerPrivateSettingsDefaultTypeInternal _MQTTManagerPrivateSettings_default_instance_;

inline constexpr MultipleNSPanelsSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nspanels_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MultipleNSPanelsSettings::MultipleNSPanelsSettings(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MultipleNSPanelsSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultipleNSPanelsSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultipleNSPanelsSettingsDefaultTypeInternal() {}
  union {
    MultipleNSPanelsSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultipleNSPanelsSettingsDefaultTypeInternal _MultipleNSPanelsSettings_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protobuf_5fmqttmanager_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protobuf_5fmqttmanager_2eproto = nullptr;
const ::uint32_t
    TableStruct_protobuf_5fmqttmanager_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.mac_address_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.home_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.default_page_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.raise_to_100_light_level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.color_temp_min_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.color_temp_max_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.reverse_color_temp_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.min_button_push_time_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.button_long_press_time_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.special_mode_trigger_time_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.special_mode_release_time_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.mqtt_ignore_time_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.screen_dim_level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.screensaver_dim_level_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.screensaver_activation_timeout_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.screensaver_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.clock_format_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.temperature_unit_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.is_us_panel_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.lock_to_default_room_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.reverse_relays_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.relay1_default_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.relay2_default_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.temperature_calibration_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.button1_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.button2_mode_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.button1_mqtt_topic_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.button2_mqtt_topic_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.button1_mqtt_payload_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.button2_mqtt_payload_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.button1_detached_light_id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.button2_detached_light_id_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.denied_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.accepted_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.rooms_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.scenes_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.ip_address_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.relay1_register_type_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.relay2_register_type_),
        PROTOBUF_FIELD_OFFSET(::NSPanelSettings, _impl_.default_room_),
        4,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        5,
        6,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::MQTTManagerPrivateSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MQTTManagerPrivateSettings, _impl_.home_assistant_address_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerPrivateSettings, _impl_.home_assistant_token_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerPrivateSettings, _impl_.openhab_address_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerPrivateSettings, _impl_.openhab_token_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerPrivateSettings, _impl_.mqtt_server_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerPrivateSettings, _impl_.mqtt_server_port_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerPrivateSettings, _impl_.mqtt_username_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerPrivateSettings, _impl_.mqtt_password_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.color_temp_min_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.color_temp_max_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.date_format_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.outside_temp_sensor_provider_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.outside_temp_sensor_entity_id_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.weather_location_latitude_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.weather_location_longitude_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.weather_wind_speed_format_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.weather_precipitation_unit_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.weather_update_interval_minutes_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.clock_format_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.temperature_unit_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.max_log_buffer_size_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.manager_port_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.manager_address_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.light_turn_on_behavior_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.is_home_assistant_addon_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.mqtt_wait_time_),
        PROTOBUF_FIELD_OFFSET(::MQTTManagerSettings, _impl_.optimistic_mode_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::MultipleNSPanelsSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MultipleNSPanelsSettings, _impl_.nspanels_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 50, -1, sizeof(::NSPanelSettings)},
        {92, -1, -1, sizeof(::MQTTManagerPrivateSettings)},
        {108, -1, -1, sizeof(::MQTTManagerSettings)},
        {135, -1, -1, sizeof(::MultipleNSPanelsSettings)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_NSPanelSettings_default_instance_._instance,
    &::_MQTTManagerPrivateSettings_default_instance_._instance,
    &::_MQTTManagerSettings_default_instance_._instance,
    &::_MultipleNSPanelsSettings_default_instance_._instance,
};
const char descriptor_table_protodef_protobuf_5fmqttmanager_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032protobuf_mqttmanager.proto\032\026protobuf_f"
    "ormats.proto\"\214\017\n\017NSPanelSettings\022\017\n\002id\030\001"
    " \001(\005H\000\210\001\001\022\023\n\013mac_address\030\002 \001(\t\022\014\n\004name\030\003"
    " \001(\t\022\014\n\004home\030\004 \001(\005\0229\n\014default_page\030\005 \001(\016"
    "2#.NSPanelSettings.NSPanelDefaultPage\022 \n"
    "\030raise_to_100_light_level\030\006 \001(\005\022\026\n\016color"
    "_temp_min\030\007 \001(\005\022\026\n\016color_temp_max\030\010 \001(\005\022"
    "\032\n\022reverse_color_temp\030\t \001(\010\022\034\n\024min_butto"
    "n_push_time\030\n \001(\005\022\036\n\026button_long_press_t"
    "ime\030\013 \001(\005\022!\n\031special_mode_trigger_time\030\014"
    " \001(\005\022!\n\031special_mode_release_time\030\r \001(\005\022"
    "\030\n\020mqtt_ignore_time\030\016 \001(\005\022\030\n\020screen_dim_"
    "level\030\017 \001(\005\022\035\n\025screensaver_dim_level\030\020 \001"
    "(\005\022&\n\036screensaver_activation_timeout\030\021 \001"
    "(\005\022A\n\020screensaver_mode\030\022 \001(\0162\'.NSPanelSe"
    "ttings.NSPanelScreensaverMode\022\"\n\014clock_f"
    "ormat\030\023 \001(\0162\014.time_format\022-\n\020temperature"
    "_unit\030\024 \001(\0162\023.temperature_format\022\023\n\013is_u"
    "s_panel\030\025 \001(\010\022\034\n\024lock_to_default_room\030\026 "
    "\001(\010\022\026\n\016reverse_relays\030\027 \001(\010\022\033\n\023relay1_de"
    "fault_mode\030\030 \001(\010\022\033\n\023relay2_default_mode\030"
    "\031 \001(\010\022\037\n\027temperature_calibration\030\032 \001(\005\0228"
    "\n\014button1_mode\030\033 \001(\0162\".NSPanelSettings.N"
    "SPanelButtonMode\0228\n\014button2_mode\030\034 \001(\0162\""
    ".NSPanelSettings.NSPanelButtonMode\022\037\n\022bu"
    "tton1_mqtt_topic\030\035 \001(\tH\001\210\001\001\022\037\n\022button2_m"
    "qtt_topic\030\036 \001(\tH\002\210\001\001\022!\n\024button1_mqtt_pay"
    "load\030\037 \001(\tH\003\210\001\001\022!\n\024button2_mqtt_payload\030"
    "  \001(\tH\004\210\001\001\022&\n\031button1_detached_light_id\030"
    "! \001(\005H\005\210\001\001\022&\n\031button2_detached_light_id\030"
    "\" \001(\005H\006\210\001\001\022\016\n\006denied\030- \001(\010\022\020\n\010accepted\030."
    " \001(\010\022\r\n\005rooms\030/ \003(\005\022\016\n\006scenes\0300 \003(\005\022\022\n\ni"
    "p_address\0301 \001(\t\022@\n\024relay1_register_type\030"
    "2 \001(\0162\".NSPanelSettings.RelayRegisterTyp"
    "e\022@\n\024relay2_register_type\0303 \001(\0162\".NSPane"
    "lSettings.RelayRegisterType\022\024\n\014default_r"
    "oom\0304 \001(\005\"C\n\022NSPanelDefaultPage\022\r\n\tMAIN_"
    "PAGE\020\000\022\017\n\013SCENES_PAGE\020\001\022\r\n\tROOM_PAGE\020\002\"\250"
    "\001\n\026NSPanelScreensaverMode\022\033\n\027WEATHER_WIT"
    "H_BACKGROUND\020\000\022\036\n\032WEATHER_WITHOUT_BACKGR"
    "OUND\020\001\022\034\n\030DATETIME_WITH_BACKGROUND\020\003\022\037\n\033"
    "DATETIME_WITHOUT_BACKGROUND\020\004\022\022\n\016NO_SCRE"
    "ENSAVER\020\005\"Y\n\021NSPanelButtonMode\022\017\n\013DIRECT"
    "_MODE\020\000\022\021\n\rDETACHED_MODE\020\001\022\017\n\013CUSTOM_MQT"
    "T\020\002\022\017\n\013FOLLOW_MODE\020\003\"*\n\021RelayRegisterTyp"
    "e\022\n\n\006SWITCH\020\000\022\t\n\005LIGHT\020\001B\005\n\003_idB\025\n\023_butt"
    "on1_mqtt_topicB\025\n\023_button2_mqtt_topicB\027\n"
    "\025_button1_mqtt_payloadB\027\n\025_button2_mqtt_"
    "payloadB\034\n\032_button1_detached_light_idB\034\n"
    "\032_button2_detached_light_id\"\347\001\n\032MQTTMana"
    "gerPrivateSettings\022\036\n\026home_assistant_add"
    "ress\030\001 \001(\t\022\034\n\024home_assistant_token\030\002 \001(\t"
    "\022\027\n\017openhab_address\030\003 \001(\t\022\025\n\ropenhab_tok"
    "en\030\004 \001(\t\022\023\n\013mqtt_server\030\005 \001(\t\022\030\n\020mqtt_se"
    "rver_port\030\006 \001(\005\022\025\n\rmqtt_username\030\007 \001(\t\022\025"
    "\n\rmqtt_password\030\010 \001(\t\"\371\005\n\023MQTTManagerSet"
    "tings\022\026\n\016color_temp_min\030\001 \001(\r\022\026\n\016color_t"
    "emp_max\030\002 \001(\r\022\023\n\013date_format\030\003 \001(\t\022$\n\034ou"
    "tside_temp_sensor_provider\030\004 \001(\t\022%\n\035outs"
    "ide_temp_sensor_entity_id\030\005 \001(\t\022!\n\031weath"
    "er_location_latitude\030\006 \001(\t\022\"\n\032weather_lo"
    "cation_longitude\030\007 \001(\t\0225\n\031weather_wind_s"
    "peed_format\030\010 \001(\0162\022.wind_speed_format\0229\n"
    "\032weather_precipitation_unit\030\t \001(\0162\025.prec"
    "ipitation_format\022\'\n\037weather_update_inter"
    "val_minutes\030\n \001(\005\022\"\n\014clock_format\030\013 \001(\0162"
    "\014.time_format\022-\n\020temperature_unit\030\014 \001(\0162"
    "\023.temperature_format\022\033\n\023max_log_buffer_s"
    "ize\030\r \001(\005\022\024\n\014manager_port\030\016 \001(\005\022\027\n\017manag"
    "er_address\030\017 \001(\t\022E\n\026light_turn_on_behavi"
    "or\030\020 \001(\0162%.MQTTManagerSettings.turn_on_b"
    "ehavior\022\037\n\027is_home_assistant_addon\030\021 \001(\010"
    "\022\026\n\016mqtt_wait_time\030\022 \001(\005\022\027\n\017optimistic_m"
    "ode\030\023 \001(\010\"6\n\020turn_on_behavior\022\025\n\021color_t"
    "emperature\020\000\022\013\n\007restore\020\001\">\n\030MultipleNSP"
    "anelsSettings\022\"\n\010nspanels\030\001 \003(\0132\020.NSPane"
    "lSettingsb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protobuf_5fmqttmanager_2eproto_deps[1] =
    {
        &::descriptor_table_protobuf_5fformats_2eproto,
};
static ::absl::once_flag descriptor_table_protobuf_5fmqttmanager_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_protobuf_5fmqttmanager_2eproto = {
    false,
    false,
    3057,
    descriptor_table_protodef_protobuf_5fmqttmanager_2eproto,
    "protobuf_mqttmanager.proto",
    &descriptor_table_protobuf_5fmqttmanager_2eproto_once,
    descriptor_table_protobuf_5fmqttmanager_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_protobuf_5fmqttmanager_2eproto::offsets,
    file_level_enum_descriptors_protobuf_5fmqttmanager_2eproto,
    file_level_service_descriptors_protobuf_5fmqttmanager_2eproto,
};
const ::google::protobuf::EnumDescriptor* NSPanelSettings_NSPanelDefaultPage_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fmqttmanager_2eproto);
  return file_level_enum_descriptors_protobuf_5fmqttmanager_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelSettings_NSPanelDefaultPage_internal_data_[] = {
    196608u, 0u, };
bool NSPanelSettings_NSPanelDefaultPage_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelSettings_NSPanelDefaultPage NSPanelSettings::MAIN_PAGE;
constexpr NSPanelSettings_NSPanelDefaultPage NSPanelSettings::SCENES_PAGE;
constexpr NSPanelSettings_NSPanelDefaultPage NSPanelSettings::ROOM_PAGE;
constexpr NSPanelSettings_NSPanelDefaultPage NSPanelSettings::NSPanelDefaultPage_MIN;
constexpr NSPanelSettings_NSPanelDefaultPage NSPanelSettings::NSPanelDefaultPage_MAX;
constexpr int NSPanelSettings::NSPanelDefaultPage_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NSPanelSettings_NSPanelScreensaverMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fmqttmanager_2eproto);
  return file_level_enum_descriptors_protobuf_5fmqttmanager_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelSettings_NSPanelScreensaverMode_internal_data_[] = {
    131072u, 32u, 14u, };
bool NSPanelSettings_NSPanelScreensaverMode_IsValid(int value) {
  return 0 <= value && value <= 5 && ((59u >> value) & 1) != 0;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelSettings_NSPanelScreensaverMode NSPanelSettings::WEATHER_WITH_BACKGROUND;
constexpr NSPanelSettings_NSPanelScreensaverMode NSPanelSettings::WEATHER_WITHOUT_BACKGROUND;
constexpr NSPanelSettings_NSPanelScreensaverMode NSPanelSettings::DATETIME_WITH_BACKGROUND;
constexpr NSPanelSettings_NSPanelScreensaverMode NSPanelSettings::DATETIME_WITHOUT_BACKGROUND;
constexpr NSPanelSettings_NSPanelScreensaverMode NSPanelSettings::NO_SCREENSAVER;
constexpr NSPanelSettings_NSPanelScreensaverMode NSPanelSettings::NSPanelScreensaverMode_MIN;
constexpr NSPanelSettings_NSPanelScreensaverMode NSPanelSettings::NSPanelScreensaverMode_MAX;
constexpr int NSPanelSettings::NSPanelScreensaverMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NSPanelSettings_NSPanelButtonMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fmqttmanager_2eproto);
  return file_level_enum_descriptors_protobuf_5fmqttmanager_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelSettings_NSPanelButtonMode_internal_data_[] = {
    262144u, 0u, };
bool NSPanelSettings_NSPanelButtonMode_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelSettings_NSPanelButtonMode NSPanelSettings::DIRECT_MODE;
constexpr NSPanelSettings_NSPanelButtonMode NSPanelSettings::DETACHED_MODE;
constexpr NSPanelSettings_NSPanelButtonMode NSPanelSettings::CUSTOM_MQTT;
constexpr NSPanelSettings_NSPanelButtonMode NSPanelSettings::FOLLOW_MODE;
constexpr NSPanelSettings_NSPanelButtonMode NSPanelSettings::NSPanelButtonMode_MIN;
constexpr NSPanelSettings_NSPanelButtonMode NSPanelSettings::NSPanelButtonMode_MAX;
constexpr int NSPanelSettings::NSPanelButtonMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NSPanelSettings_RelayRegisterType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fmqttmanager_2eproto);
  return file_level_enum_descriptors_protobuf_5fmqttmanager_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t NSPanelSettings_RelayRegisterType_internal_data_[] = {
    131072u, 0u, };
bool NSPanelSettings_RelayRegisterType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NSPanelSettings_RelayRegisterType NSPanelSettings::SWITCH;
constexpr NSPanelSettings_RelayRegisterType NSPanelSettings::LIGHT;
constexpr NSPanelSettings_RelayRegisterType NSPanelSettings::RelayRegisterType_MIN;
constexpr NSPanelSettings_RelayRegisterType NSPanelSettings::RelayRegisterType_MAX;
constexpr int NSPanelSettings::RelayRegisterType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* MQTTManagerSettings_turn_on_behavior_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_protobuf_5fmqttmanager_2eproto);
  return file_level_enum_descriptors_protobuf_5fmqttmanager_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t MQTTManagerSettings_turn_on_behavior_internal_data_[] = {
    131072u, 0u, };
bool MQTTManagerSettings_turn_on_behavior_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MQTTManagerSettings_turn_on_behavior MQTTManagerSettings::color_temperature;
constexpr MQTTManagerSettings_turn_on_behavior MQTTManagerSettings::restore;
constexpr MQTTManagerSettings_turn_on_behavior MQTTManagerSettings::turn_on_behavior_MIN;
constexpr MQTTManagerSettings_turn_on_behavior MQTTManagerSettings::turn_on_behavior_MAX;
constexpr int MQTTManagerSettings::turn_on_behavior_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class NSPanelSettings::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NSPanelSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_._has_bits_);
};

NSPanelSettings::NSPanelSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NSPanelSettings)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NSPanelSettings& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rooms_{visibility, arena, from.rooms_},
        _rooms_cached_byte_size_{0},
        scenes_{visibility, arena, from.scenes_},
        _scenes_cached_byte_size_{0},
        mac_address_(arena, from.mac_address_),
        name_(arena, from.name_),
        button1_mqtt_topic_(arena, from.button1_mqtt_topic_),
        button2_mqtt_topic_(arena, from.button2_mqtt_topic_),
        button1_mqtt_payload_(arena, from.button1_mqtt_payload_),
        button2_mqtt_payload_(arena, from.button2_mqtt_payload_),
        ip_address_(arena, from.ip_address_) {}

NSPanelSettings::NSPanelSettings(
    ::google::protobuf::Arena* arena,
    const NSPanelSettings& from)
    : ::google::protobuf::Message(arena) {
  NSPanelSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, default_room_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::default_room_));

  // @@protoc_insertion_point(copy_constructor:NSPanelSettings)
}
inline PROTOBUF_NDEBUG_INLINE NSPanelSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        rooms_{visibility, arena},
        _rooms_cached_byte_size_{0},
        scenes_{visibility, arena},
        _scenes_cached_byte_size_{0},
        mac_address_(arena),
        name_(arena),
        button1_mqtt_topic_(arena),
        button2_mqtt_topic_(arena),
        button1_mqtt_payload_(arena),
        button2_mqtt_payload_(arena),
        ip_address_(arena) {}

inline void NSPanelSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, default_room_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::default_room_));
}
NSPanelSettings::~NSPanelSettings() {
  // @@protoc_insertion_point(destructor:NSPanelSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NSPanelSettings::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.mac_address_.Destroy();
  _impl_.name_.Destroy();
  _impl_.button1_mqtt_topic_.Destroy();
  _impl_.button2_mqtt_topic_.Destroy();
  _impl_.button1_mqtt_payload_.Destroy();
  _impl_.button2_mqtt_payload_.Destroy();
  _impl_.ip_address_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NSPanelSettings::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_._cached_size_),
              false,
          },
          &NSPanelSettings::MergeImpl,
          &NSPanelSettings::kDescriptorMethods,
          &descriptor_table_protobuf_5fmqttmanager_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 42, 0, 165, 9> NSPanelSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_._has_bits_),
    0, // no _extensions_
    52, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    42,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NSPanelSettings_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NSPanelSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.id_), 4>(),
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.id_)}},
    // string mac_address = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.mac_address_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.name_)}},
    // int32 home = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.home_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.home_)}},
    // .NSPanelSettings.NSPanelDefaultPage default_page = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.default_page_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.default_page_)}},
    // int32 raise_to_100_light_level = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.raise_to_100_light_level_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.raise_to_100_light_level_)}},
    // int32 color_temp_min = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.color_temp_min_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.color_temp_min_)}},
    // int32 color_temp_max = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.color_temp_max_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.color_temp_max_)}},
    // bool reverse_color_temp = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NSPanelSettings, _impl_.reverse_color_temp_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.reverse_color_temp_)}},
    // int32 min_button_push_time = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.min_button_push_time_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.min_button_push_time_)}},
    // int32 button_long_press_time = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.button_long_press_time_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button_long_press_time_)}},
    // int32 special_mode_trigger_time = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.special_mode_trigger_time_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.special_mode_trigger_time_)}},
    // int32 special_mode_release_time = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.special_mode_release_time_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.special_mode_release_time_)}},
    // int32 mqtt_ignore_time = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.mqtt_ignore_time_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.mqtt_ignore_time_)}},
    // int32 screen_dim_level = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NSPanelSettings, _impl_.screen_dim_level_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.screen_dim_level_)}},
    // int32 screensaver_dim_level = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.screensaver_dim_level_)}},
    // int32 screensaver_activation_timeout = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.screensaver_activation_timeout_)}},
    // .NSPanelSettings.NSPanelScreensaverMode screensaver_mode = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.screensaver_mode_)}},
    // .time_format clock_format = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.clock_format_)}},
    // .temperature_format temperature_unit = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.temperature_unit_)}},
    // bool is_us_panel = 21;
    {::_pbi::TcParser::FastV8S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.is_us_panel_)}},
    // bool lock_to_default_room = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.lock_to_default_room_)}},
    // bool reverse_relays = 23;
    {::_pbi::TcParser::FastV8S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.reverse_relays_)}},
    // bool relay1_default_mode = 24;
    {::_pbi::TcParser::FastV8S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.relay1_default_mode_)}},
    // bool relay2_default_mode = 25;
    {::_pbi::TcParser::FastV8S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.relay2_default_mode_)}},
    // int32 temperature_calibration = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.temperature_calibration_)}},
    // .NSPanelSettings.NSPanelButtonMode button1_mode = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button1_mode_)}},
    // .NSPanelSettings.NSPanelButtonMode button2_mode = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button2_mode_)}},
    // optional string button1_mqtt_topic = 29;
    {::_pbi::TcParser::FastUS2,
     {490, 0, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button1_mqtt_topic_)}},
    // optional string button2_mqtt_topic = 30;
    {::_pbi::TcParser::FastUS2,
     {498, 1, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button2_mqtt_topic_)}},
    // optional string button1_mqtt_payload = 31;
    {::_pbi::TcParser::FastUS2,
     {506, 2, 0, PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button1_mqtt_payload_)}},
  }}, {{
    33, 0, 2,
    4092, 32, 65520, 38,
    65535, 65535
  }}, {{
    // optional int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string mac_address = 2;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.mac_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 home = 4;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.home_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .NSPanelSettings.NSPanelDefaultPage default_page = 5;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.default_page_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 raise_to_100_light_level = 6;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.raise_to_100_light_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 color_temp_min = 7;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.color_temp_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 color_temp_max = 8;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.color_temp_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool reverse_color_temp = 9;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.reverse_color_temp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 min_button_push_time = 10;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.min_button_push_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 button_long_press_time = 11;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button_long_press_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 special_mode_trigger_time = 12;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.special_mode_trigger_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 special_mode_release_time = 13;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.special_mode_release_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 mqtt_ignore_time = 14;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.mqtt_ignore_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 screen_dim_level = 15;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.screen_dim_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 screensaver_dim_level = 16;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.screensaver_dim_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 screensaver_activation_timeout = 17;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.screensaver_activation_timeout_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .NSPanelSettings.NSPanelScreensaverMode screensaver_mode = 18;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.screensaver_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .time_format clock_format = 19;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.clock_format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .temperature_format temperature_unit = 20;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.temperature_unit_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_us_panel = 21;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.is_us_panel_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool lock_to_default_room = 22;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.lock_to_default_room_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool reverse_relays = 23;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.reverse_relays_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool relay1_default_mode = 24;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.relay1_default_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool relay2_default_mode = 25;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.relay2_default_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 temperature_calibration = 26;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.temperature_calibration_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .NSPanelSettings.NSPanelButtonMode button1_mode = 27;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button1_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .NSPanelSettings.NSPanelButtonMode button2_mode = 28;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button2_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional string button1_mqtt_topic = 29;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button1_mqtt_topic_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string button2_mqtt_topic = 30;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button2_mqtt_topic_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string button1_mqtt_payload = 31;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button1_mqtt_payload_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string button2_mqtt_payload = 32;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button2_mqtt_payload_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 button1_detached_light_id = 33;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button1_detached_light_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 button2_detached_light_id = 34;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.button2_detached_light_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool denied = 45;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.denied_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool accepted = 46;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.accepted_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated int32 rooms = 47;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.rooms_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 scenes = 48;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.scenes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // string ip_address = 49;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.ip_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .NSPanelSettings.RelayRegisterType relay1_register_type = 50;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.relay1_register_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .NSPanelSettings.RelayRegisterType relay2_register_type = 51;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.relay2_register_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 default_room = 52;
    {PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.default_room_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\17\0\13\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\22\22\24\24\0\0\0\0\0\0\12\0\0\0\0\0\0\0\0"
    "NSPanelSettings"
    "mac_address"
    "name"
    "button1_mqtt_topic"
    "button2_mqtt_topic"
    "button1_mqtt_payload"
    "button2_mqtt_payload"
    "ip_address"
  }},
};

PROTOBUF_NOINLINE void NSPanelSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:NSPanelSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rooms_.Clear();
  _impl_.scenes_.Clear();
  _impl_.mac_address_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.button1_mqtt_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.button2_mqtt_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.button1_mqtt_payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.button2_mqtt_payload_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.ip_address_.ClearToEmpty();
  _impl_.id_ = 0;
  ::memset(&_impl_.home_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.button2_mode_) -
      reinterpret_cast<char*>(&_impl_.home_)) + sizeof(_impl_.button2_mode_));
  if (cached_has_bits & 0x00000060u) {
    ::memset(&_impl_.button1_detached_light_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.button2_detached_light_id_) -
        reinterpret_cast<char*>(&_impl_.button1_detached_light_id_)) + sizeof(_impl_.button2_detached_light_id_));
  }
  ::memset(&_impl_.relay1_default_mode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.default_room_) -
      reinterpret_cast<char*>(&_impl_.relay1_default_mode_)) + sizeof(_impl_.default_room_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NSPanelSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NSPanelSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string mac_address = 2;
  if (!this->_internal_mac_address().empty()) {
    const std::string& _s = this->_internal_mac_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelSettings.mac_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelSettings.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 home = 4;
  if (this->_internal_home() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_home(), target);
  }

  // .NSPanelSettings.NSPanelDefaultPage default_page = 5;
  if (this->_internal_default_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_default_page(), target);
  }

  // int32 raise_to_100_light_level = 6;
  if (this->_internal_raise_to_100_light_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_raise_to_100_light_level(), target);
  }

  // int32 color_temp_min = 7;
  if (this->_internal_color_temp_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_color_temp_min(), target);
  }

  // int32 color_temp_max = 8;
  if (this->_internal_color_temp_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_color_temp_max(), target);
  }

  // bool reverse_color_temp = 9;
  if (this->_internal_reverse_color_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_reverse_color_temp(), target);
  }

  // int32 min_button_push_time = 10;
  if (this->_internal_min_button_push_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_min_button_push_time(), target);
  }

  // int32 button_long_press_time = 11;
  if (this->_internal_button_long_press_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_button_long_press_time(), target);
  }

  // int32 special_mode_trigger_time = 12;
  if (this->_internal_special_mode_trigger_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_special_mode_trigger_time(), target);
  }

  // int32 special_mode_release_time = 13;
  if (this->_internal_special_mode_release_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<13>(
            stream, this->_internal_special_mode_release_time(), target);
  }

  // int32 mqtt_ignore_time = 14;
  if (this->_internal_mqtt_ignore_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<14>(
            stream, this->_internal_mqtt_ignore_time(), target);
  }

  // int32 screen_dim_level = 15;
  if (this->_internal_screen_dim_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_screen_dim_level(), target);
  }

  // int32 screensaver_dim_level = 16;
  if (this->_internal_screensaver_dim_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_screensaver_dim_level(), target);
  }

  // int32 screensaver_activation_timeout = 17;
  if (this->_internal_screensaver_activation_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this->_internal_screensaver_activation_timeout(), target);
  }

  // .NSPanelSettings.NSPanelScreensaverMode screensaver_mode = 18;
  if (this->_internal_screensaver_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        18, this->_internal_screensaver_mode(), target);
  }

  // .time_format clock_format = 19;
  if (this->_internal_clock_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        19, this->_internal_clock_format(), target);
  }

  // .temperature_format temperature_unit = 20;
  if (this->_internal_temperature_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        20, this->_internal_temperature_unit(), target);
  }

  // bool is_us_panel = 21;
  if (this->_internal_is_us_panel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this->_internal_is_us_panel(), target);
  }

  // bool lock_to_default_room = 22;
  if (this->_internal_lock_to_default_room() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this->_internal_lock_to_default_room(), target);
  }

  // bool reverse_relays = 23;
  if (this->_internal_reverse_relays() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_reverse_relays(), target);
  }

  // bool relay1_default_mode = 24;
  if (this->_internal_relay1_default_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        24, this->_internal_relay1_default_mode(), target);
  }

  // bool relay2_default_mode = 25;
  if (this->_internal_relay2_default_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        25, this->_internal_relay2_default_mode(), target);
  }

  // int32 temperature_calibration = 26;
  if (this->_internal_temperature_calibration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        26, this->_internal_temperature_calibration(), target);
  }

  // .NSPanelSettings.NSPanelButtonMode button1_mode = 27;
  if (this->_internal_button1_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        27, this->_internal_button1_mode(), target);
  }

  // .NSPanelSettings.NSPanelButtonMode button2_mode = 28;
  if (this->_internal_button2_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        28, this->_internal_button2_mode(), target);
  }

  // optional string button1_mqtt_topic = 29;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_button1_mqtt_topic();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelSettings.button1_mqtt_topic");
    target = stream->WriteStringMaybeAliased(29, _s, target);
  }

  // optional string button2_mqtt_topic = 30;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_button2_mqtt_topic();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelSettings.button2_mqtt_topic");
    target = stream->WriteStringMaybeAliased(30, _s, target);
  }

  // optional string button1_mqtt_payload = 31;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_button1_mqtt_payload();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelSettings.button1_mqtt_payload");
    target = stream->WriteStringMaybeAliased(31, _s, target);
  }

  // optional string button2_mqtt_payload = 32;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_button2_mqtt_payload();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelSettings.button2_mqtt_payload");
    target = stream->WriteStringMaybeAliased(32, _s, target);
  }

  // optional int32 button1_detached_light_id = 33;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        33, this->_internal_button1_detached_light_id(), target);
  }

  // optional int32 button2_detached_light_id = 34;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        34, this->_internal_button2_detached_light_id(), target);
  }

  // bool denied = 45;
  if (this->_internal_denied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        45, this->_internal_denied(), target);
  }

  // bool accepted = 46;
  if (this->_internal_accepted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        46, this->_internal_accepted(), target);
  }

  // repeated int32 rooms = 47;
  {
    int byte_size = _impl_._rooms_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          47, _internal_rooms(), byte_size, target);
    }
  }

  // repeated int32 scenes = 48;
  {
    int byte_size = _impl_._scenes_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          48, _internal_scenes(), byte_size, target);
    }
  }

  // string ip_address = 49;
  if (!this->_internal_ip_address().empty()) {
    const std::string& _s = this->_internal_ip_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NSPanelSettings.ip_address");
    target = stream->WriteStringMaybeAliased(49, _s, target);
  }

  // .NSPanelSettings.RelayRegisterType relay1_register_type = 50;
  if (this->_internal_relay1_register_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        50, this->_internal_relay1_register_type(), target);
  }

  // .NSPanelSettings.RelayRegisterType relay2_register_type = 51;
  if (this->_internal_relay2_register_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        51, this->_internal_relay2_register_type(), target);
  }

  // int32 default_room = 52;
  if (this->_internal_default_room() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        52, this->_internal_default_room(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NSPanelSettings)
  return target;
}

::size_t NSPanelSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NSPanelSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated int32 rooms = 47;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_rooms())
    ;
    _impl_._rooms_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 scenes = 48;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_scenes())
    ;
    _impl_._scenes_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string mac_address = 2;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mac_address());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string button1_mqtt_topic = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_button1_mqtt_topic());
    }

    // optional string button2_mqtt_topic = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_button2_mqtt_topic());
    }

    // optional string button1_mqtt_payload = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_button1_mqtt_payload());
    }

    // optional string button2_mqtt_payload = 32;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_button2_mqtt_payload());
    }

  }
  // string ip_address = 49;
  if (!this->_internal_ip_address().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip_address());
  }

  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 home = 4;
  if (this->_internal_home() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_home());
  }

  // .NSPanelSettings.NSPanelDefaultPage default_page = 5;
  if (this->_internal_default_page() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_default_page());
  }

  // int32 raise_to_100_light_level = 6;
  if (this->_internal_raise_to_100_light_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_raise_to_100_light_level());
  }

  // int32 color_temp_min = 7;
  if (this->_internal_color_temp_min() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_color_temp_min());
  }

  // int32 color_temp_max = 8;
  if (this->_internal_color_temp_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_color_temp_max());
  }

  // int32 min_button_push_time = 10;
  if (this->_internal_min_button_push_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_min_button_push_time());
  }

  // int32 button_long_press_time = 11;
  if (this->_internal_button_long_press_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_button_long_press_time());
  }

  // int32 special_mode_trigger_time = 12;
  if (this->_internal_special_mode_trigger_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_special_mode_trigger_time());
  }

  // int32 special_mode_release_time = 13;
  if (this->_internal_special_mode_release_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_special_mode_release_time());
  }

  // int32 mqtt_ignore_time = 14;
  if (this->_internal_mqtt_ignore_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_mqtt_ignore_time());
  }

  // int32 screen_dim_level = 15;
  if (this->_internal_screen_dim_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_screen_dim_level());
  }

  // int32 screensaver_dim_level = 16;
  if (this->_internal_screensaver_dim_level() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_screensaver_dim_level());
  }

  // int32 screensaver_activation_timeout = 17;
  if (this->_internal_screensaver_activation_timeout() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_screensaver_activation_timeout());
  }

  // .NSPanelSettings.NSPanelScreensaverMode screensaver_mode = 18;
  if (this->_internal_screensaver_mode() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_screensaver_mode());
  }

  // bool reverse_color_temp = 9;
  if (this->_internal_reverse_color_temp() != 0) {
    total_size += 2;
  }

  // bool is_us_panel = 21;
  if (this->_internal_is_us_panel() != 0) {
    total_size += 3;
  }

  // bool lock_to_default_room = 22;
  if (this->_internal_lock_to_default_room() != 0) {
    total_size += 3;
  }

  // bool reverse_relays = 23;
  if (this->_internal_reverse_relays() != 0) {
    total_size += 3;
  }

  // .time_format clock_format = 19;
  if (this->_internal_clock_format() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_clock_format());
  }

  // .temperature_format temperature_unit = 20;
  if (this->_internal_temperature_unit() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_temperature_unit());
  }

  // int32 temperature_calibration = 26;
  if (this->_internal_temperature_calibration() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_temperature_calibration());
  }

  // .NSPanelSettings.NSPanelButtonMode button1_mode = 27;
  if (this->_internal_button1_mode() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_button1_mode());
  }

  // .NSPanelSettings.NSPanelButtonMode button2_mode = 28;
  if (this->_internal_button2_mode() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_button2_mode());
  }

  if (cached_has_bits & 0x00000060u) {
    // optional int32 button1_detached_light_id = 33;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_button1_detached_light_id());
    }

    // optional int32 button2_detached_light_id = 34;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_button2_detached_light_id());
    }

  }
  // bool relay1_default_mode = 24;
  if (this->_internal_relay1_default_mode() != 0) {
    total_size += 3;
  }

  // bool relay2_default_mode = 25;
  if (this->_internal_relay2_default_mode() != 0) {
    total_size += 3;
  }

  // bool denied = 45;
  if (this->_internal_denied() != 0) {
    total_size += 3;
  }

  // bool accepted = 46;
  if (this->_internal_accepted() != 0) {
    total_size += 3;
  }

  // .NSPanelSettings.RelayRegisterType relay1_register_type = 50;
  if (this->_internal_relay1_register_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_relay1_register_type());
  }

  // .NSPanelSettings.RelayRegisterType relay2_register_type = 51;
  if (this->_internal_relay2_register_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_relay2_register_type());
  }

  // int32 default_room = 52;
  if (this->_internal_default_room() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_default_room());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NSPanelSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NSPanelSettings*>(&to_msg);
  auto& from = static_cast<const NSPanelSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NSPanelSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rooms()->MergeFrom(from._internal_rooms());
  _this->_internal_mutable_scenes()->MergeFrom(from._internal_scenes());
  if (!from._internal_mac_address().empty()) {
    _this->_internal_set_mac_address(from._internal_mac_address());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_button1_mqtt_topic(from._internal_button1_mqtt_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_button2_mqtt_topic(from._internal_button2_mqtt_topic());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_button1_mqtt_payload(from._internal_button1_mqtt_payload());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_button2_mqtt_payload(from._internal_button2_mqtt_payload());
    }
  }
  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (cached_has_bits & 0x00000010u) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_home() != 0) {
    _this->_impl_.home_ = from._impl_.home_;
  }
  if (from._internal_default_page() != 0) {
    _this->_impl_.default_page_ = from._impl_.default_page_;
  }
  if (from._internal_raise_to_100_light_level() != 0) {
    _this->_impl_.raise_to_100_light_level_ = from._impl_.raise_to_100_light_level_;
  }
  if (from._internal_color_temp_min() != 0) {
    _this->_impl_.color_temp_min_ = from._impl_.color_temp_min_;
  }
  if (from._internal_color_temp_max() != 0) {
    _this->_impl_.color_temp_max_ = from._impl_.color_temp_max_;
  }
  if (from._internal_min_button_push_time() != 0) {
    _this->_impl_.min_button_push_time_ = from._impl_.min_button_push_time_;
  }
  if (from._internal_button_long_press_time() != 0) {
    _this->_impl_.button_long_press_time_ = from._impl_.button_long_press_time_;
  }
  if (from._internal_special_mode_trigger_time() != 0) {
    _this->_impl_.special_mode_trigger_time_ = from._impl_.special_mode_trigger_time_;
  }
  if (from._internal_special_mode_release_time() != 0) {
    _this->_impl_.special_mode_release_time_ = from._impl_.special_mode_release_time_;
  }
  if (from._internal_mqtt_ignore_time() != 0) {
    _this->_impl_.mqtt_ignore_time_ = from._impl_.mqtt_ignore_time_;
  }
  if (from._internal_screen_dim_level() != 0) {
    _this->_impl_.screen_dim_level_ = from._impl_.screen_dim_level_;
  }
  if (from._internal_screensaver_dim_level() != 0) {
    _this->_impl_.screensaver_dim_level_ = from._impl_.screensaver_dim_level_;
  }
  if (from._internal_screensaver_activation_timeout() != 0) {
    _this->_impl_.screensaver_activation_timeout_ = from._impl_.screensaver_activation_timeout_;
  }
  if (from._internal_screensaver_mode() != 0) {
    _this->_impl_.screensaver_mode_ = from._impl_.screensaver_mode_;
  }
  if (from._internal_reverse_color_temp() != 0) {
    _this->_impl_.reverse_color_temp_ = from._impl_.reverse_color_temp_;
  }
  if (from._internal_is_us_panel() != 0) {
    _this->_impl_.is_us_panel_ = from._impl_.is_us_panel_;
  }
  if (from._internal_lock_to_default_room() != 0) {
    _this->_impl_.lock_to_default_room_ = from._impl_.lock_to_default_room_;
  }
  if (from._internal_reverse_relays() != 0) {
    _this->_impl_.reverse_relays_ = from._impl_.reverse_relays_;
  }
  if (from._internal_clock_format() != 0) {
    _this->_impl_.clock_format_ = from._impl_.clock_format_;
  }
  if (from._internal_temperature_unit() != 0) {
    _this->_impl_.temperature_unit_ = from._impl_.temperature_unit_;
  }
  if (from._internal_temperature_calibration() != 0) {
    _this->_impl_.temperature_calibration_ = from._impl_.temperature_calibration_;
  }
  if (from._internal_button1_mode() != 0) {
    _this->_impl_.button1_mode_ = from._impl_.button1_mode_;
  }
  if (from._internal_button2_mode() != 0) {
    _this->_impl_.button2_mode_ = from._impl_.button2_mode_;
  }
  if (cached_has_bits & 0x00000060u) {
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.button1_detached_light_id_ = from._impl_.button1_detached_light_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.button2_detached_light_id_ = from._impl_.button2_detached_light_id_;
    }
  }
  if (from._internal_relay1_default_mode() != 0) {
    _this->_impl_.relay1_default_mode_ = from._impl_.relay1_default_mode_;
  }
  if (from._internal_relay2_default_mode() != 0) {
    _this->_impl_.relay2_default_mode_ = from._impl_.relay2_default_mode_;
  }
  if (from._internal_denied() != 0) {
    _this->_impl_.denied_ = from._impl_.denied_;
  }
  if (from._internal_accepted() != 0) {
    _this->_impl_.accepted_ = from._impl_.accepted_;
  }
  if (from._internal_relay1_register_type() != 0) {
    _this->_impl_.relay1_register_type_ = from._impl_.relay1_register_type_;
  }
  if (from._internal_relay2_register_type() != 0) {
    _this->_impl_.relay2_register_type_ = from._impl_.relay2_register_type_;
  }
  if (from._internal_default_room() != 0) {
    _this->_impl_.default_room_ = from._impl_.default_room_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NSPanelSettings::CopyFrom(const NSPanelSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NSPanelSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NSPanelSettings::InternalSwap(NSPanelSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rooms_.InternalSwap(&other->_impl_.rooms_);
  _impl_.scenes_.InternalSwap(&other->_impl_.scenes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mac_address_, &other->_impl_.mac_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.button1_mqtt_topic_, &other->_impl_.button1_mqtt_topic_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.button2_mqtt_topic_, &other->_impl_.button2_mqtt_topic_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.button1_mqtt_payload_, &other->_impl_.button1_mqtt_payload_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.button2_mqtt_payload_, &other->_impl_.button2_mqtt_payload_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_address_, &other->_impl_.ip_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.default_room_)
      + sizeof(NSPanelSettings::_impl_.default_room_)
      - PROTOBUF_FIELD_OFFSET(NSPanelSettings, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata NSPanelSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MQTTManagerPrivateSettings::_Internal {
 public:
};

MQTTManagerPrivateSettings::MQTTManagerPrivateSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MQTTManagerPrivateSettings)
}
inline PROTOBUF_NDEBUG_INLINE MQTTManagerPrivateSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::MQTTManagerPrivateSettings& from_msg)
      : home_assistant_address_(arena, from.home_assistant_address_),
        home_assistant_token_(arena, from.home_assistant_token_),
        openhab_address_(arena, from.openhab_address_),
        openhab_token_(arena, from.openhab_token_),
        mqtt_server_(arena, from.mqtt_server_),
        mqtt_username_(arena, from.mqtt_username_),
        mqtt_password_(arena, from.mqtt_password_),
        _cached_size_{0} {}

MQTTManagerPrivateSettings::MQTTManagerPrivateSettings(
    ::google::protobuf::Arena* arena,
    const MQTTManagerPrivateSettings& from)
    : ::google::protobuf::Message(arena) {
  MQTTManagerPrivateSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.mqtt_server_port_ = from._impl_.mqtt_server_port_;

  // @@protoc_insertion_point(copy_constructor:MQTTManagerPrivateSettings)
}
inline PROTOBUF_NDEBUG_INLINE MQTTManagerPrivateSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : home_assistant_address_(arena),
        home_assistant_token_(arena),
        openhab_address_(arena),
        openhab_token_(arena),
        mqtt_server_(arena),
        mqtt_username_(arena),
        mqtt_password_(arena),
        _cached_size_{0} {}

inline void MQTTManagerPrivateSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mqtt_server_port_ = {};
}
MQTTManagerPrivateSettings::~MQTTManagerPrivateSettings() {
  // @@protoc_insertion_point(destructor:MQTTManagerPrivateSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MQTTManagerPrivateSettings::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.home_assistant_address_.Destroy();
  _impl_.home_assistant_token_.Destroy();
  _impl_.openhab_address_.Destroy();
  _impl_.openhab_token_.Destroy();
  _impl_.mqtt_server_.Destroy();
  _impl_.mqtt_username_.Destroy();
  _impl_.mqtt_password_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
MQTTManagerPrivateSettings::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_._cached_size_),
              false,
          },
          &MQTTManagerPrivateSettings::MergeImpl,
          &MQTTManagerPrivateSettings::kDescriptorMethods,
          &descriptor_table_protobuf_5fmqttmanager_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 150, 2> MQTTManagerPrivateSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MQTTManagerPrivateSettings_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MQTTManagerPrivateSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string mqtt_password = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.mqtt_password_)}},
    // string home_assistant_address = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.home_assistant_address_)}},
    // string home_assistant_token = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.home_assistant_token_)}},
    // string openhab_address = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.openhab_address_)}},
    // string openhab_token = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.openhab_token_)}},
    // string mqtt_server = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.mqtt_server_)}},
    // int32 mqtt_server_port = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerPrivateSettings, _impl_.mqtt_server_port_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.mqtt_server_port_)}},
    // string mqtt_username = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.mqtt_username_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string home_assistant_address = 1;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.home_assistant_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string home_assistant_token = 2;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.home_assistant_token_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string openhab_address = 3;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.openhab_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string openhab_token = 4;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.openhab_token_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mqtt_server = 5;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.mqtt_server_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 mqtt_server_port = 6;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.mqtt_server_port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string mqtt_username = 7;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.mqtt_username_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mqtt_password = 8;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerPrivateSettings, _impl_.mqtt_password_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\26\24\17\15\13\0\15\15\0\0\0\0\0\0\0"
    "MQTTManagerPrivateSettings"
    "home_assistant_address"
    "home_assistant_token"
    "openhab_address"
    "openhab_token"
    "mqtt_server"
    "mqtt_username"
    "mqtt_password"
  }},
};

PROTOBUF_NOINLINE void MQTTManagerPrivateSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:MQTTManagerPrivateSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.home_assistant_address_.ClearToEmpty();
  _impl_.home_assistant_token_.ClearToEmpty();
  _impl_.openhab_address_.ClearToEmpty();
  _impl_.openhab_token_.ClearToEmpty();
  _impl_.mqtt_server_.ClearToEmpty();
  _impl_.mqtt_username_.ClearToEmpty();
  _impl_.mqtt_password_.ClearToEmpty();
  _impl_.mqtt_server_port_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MQTTManagerPrivateSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MQTTManagerPrivateSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string home_assistant_address = 1;
  if (!this->_internal_home_assistant_address().empty()) {
    const std::string& _s = this->_internal_home_assistant_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerPrivateSettings.home_assistant_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string home_assistant_token = 2;
  if (!this->_internal_home_assistant_token().empty()) {
    const std::string& _s = this->_internal_home_assistant_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerPrivateSettings.home_assistant_token");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string openhab_address = 3;
  if (!this->_internal_openhab_address().empty()) {
    const std::string& _s = this->_internal_openhab_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerPrivateSettings.openhab_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string openhab_token = 4;
  if (!this->_internal_openhab_token().empty()) {
    const std::string& _s = this->_internal_openhab_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerPrivateSettings.openhab_token");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string mqtt_server = 5;
  if (!this->_internal_mqtt_server().empty()) {
    const std::string& _s = this->_internal_mqtt_server();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerPrivateSettings.mqtt_server");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int32 mqtt_server_port = 6;
  if (this->_internal_mqtt_server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_mqtt_server_port(), target);
  }

  // string mqtt_username = 7;
  if (!this->_internal_mqtt_username().empty()) {
    const std::string& _s = this->_internal_mqtt_username();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerPrivateSettings.mqtt_username");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string mqtt_password = 8;
  if (!this->_internal_mqtt_password().empty()) {
    const std::string& _s = this->_internal_mqtt_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerPrivateSettings.mqtt_password");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MQTTManagerPrivateSettings)
  return target;
}

::size_t MQTTManagerPrivateSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MQTTManagerPrivateSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string home_assistant_address = 1;
  if (!this->_internal_home_assistant_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_home_assistant_address());
  }

  // string home_assistant_token = 2;
  if (!this->_internal_home_assistant_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_home_assistant_token());
  }

  // string openhab_address = 3;
  if (!this->_internal_openhab_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_openhab_address());
  }

  // string openhab_token = 4;
  if (!this->_internal_openhab_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_openhab_token());
  }

  // string mqtt_server = 5;
  if (!this->_internal_mqtt_server().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mqtt_server());
  }

  // string mqtt_username = 7;
  if (!this->_internal_mqtt_username().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mqtt_username());
  }

  // string mqtt_password = 8;
  if (!this->_internal_mqtt_password().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mqtt_password());
  }

  // int32 mqtt_server_port = 6;
  if (this->_internal_mqtt_server_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_mqtt_server_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void MQTTManagerPrivateSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MQTTManagerPrivateSettings*>(&to_msg);
  auto& from = static_cast<const MQTTManagerPrivateSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MQTTManagerPrivateSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_home_assistant_address().empty()) {
    _this->_internal_set_home_assistant_address(from._internal_home_assistant_address());
  }
  if (!from._internal_home_assistant_token().empty()) {
    _this->_internal_set_home_assistant_token(from._internal_home_assistant_token());
  }
  if (!from._internal_openhab_address().empty()) {
    _this->_internal_set_openhab_address(from._internal_openhab_address());
  }
  if (!from._internal_openhab_token().empty()) {
    _this->_internal_set_openhab_token(from._internal_openhab_token());
  }
  if (!from._internal_mqtt_server().empty()) {
    _this->_internal_set_mqtt_server(from._internal_mqtt_server());
  }
  if (!from._internal_mqtt_username().empty()) {
    _this->_internal_set_mqtt_username(from._internal_mqtt_username());
  }
  if (!from._internal_mqtt_password().empty()) {
    _this->_internal_set_mqtt_password(from._internal_mqtt_password());
  }
  if (from._internal_mqtt_server_port() != 0) {
    _this->_impl_.mqtt_server_port_ = from._impl_.mqtt_server_port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MQTTManagerPrivateSettings::CopyFrom(const MQTTManagerPrivateSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MQTTManagerPrivateSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MQTTManagerPrivateSettings::InternalSwap(MQTTManagerPrivateSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.home_assistant_address_, &other->_impl_.home_assistant_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.home_assistant_token_, &other->_impl_.home_assistant_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_address_, &other->_impl_.openhab_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.openhab_token_, &other->_impl_.openhab_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mqtt_server_, &other->_impl_.mqtt_server_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mqtt_username_, &other->_impl_.mqtt_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mqtt_password_, &other->_impl_.mqtt_password_, arena);
        swap(_impl_.mqtt_server_port_, other->_impl_.mqtt_server_port_);
}

::google::protobuf::Metadata MQTTManagerPrivateSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MQTTManagerSettings::_Internal {
 public:
};

MQTTManagerSettings::MQTTManagerSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MQTTManagerSettings)
}
inline PROTOBUF_NDEBUG_INLINE MQTTManagerSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::MQTTManagerSettings& from_msg)
      : date_format_(arena, from.date_format_),
        outside_temp_sensor_provider_(arena, from.outside_temp_sensor_provider_),
        outside_temp_sensor_entity_id_(arena, from.outside_temp_sensor_entity_id_),
        weather_location_latitude_(arena, from.weather_location_latitude_),
        weather_location_longitude_(arena, from.weather_location_longitude_),
        manager_address_(arena, from.manager_address_),
        _cached_size_{0} {}

MQTTManagerSettings::MQTTManagerSettings(
    ::google::protobuf::Arena* arena,
    const MQTTManagerSettings& from)
    : ::google::protobuf::Message(arena) {
  MQTTManagerSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_temp_min_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, color_temp_min_),
           offsetof(Impl_, optimistic_mode_) -
               offsetof(Impl_, color_temp_min_) +
               sizeof(Impl_::optimistic_mode_));

  // @@protoc_insertion_point(copy_constructor:MQTTManagerSettings)
}
inline PROTOBUF_NDEBUG_INLINE MQTTManagerSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : date_format_(arena),
        outside_temp_sensor_provider_(arena),
        outside_temp_sensor_entity_id_(arena),
        weather_location_latitude_(arena),
        weather_location_longitude_(arena),
        manager_address_(arena),
        _cached_size_{0} {}

inline void MQTTManagerSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_temp_min_),
           0,
           offsetof(Impl_, optimistic_mode_) -
               offsetof(Impl_, color_temp_min_) +
               sizeof(Impl_::optimistic_mode_));
}
MQTTManagerSettings::~MQTTManagerSettings() {
  // @@protoc_insertion_point(destructor:MQTTManagerSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MQTTManagerSettings::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.date_format_.Destroy();
  _impl_.outside_temp_sensor_provider_.Destroy();
  _impl_.outside_temp_sensor_entity_id_.Destroy();
  _impl_.weather_location_latitude_.Destroy();
  _impl_.weather_location_longitude_.Destroy();
  _impl_.manager_address_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
MQTTManagerSettings::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_._cached_size_),
              false,
          },
          &MQTTManagerSettings::MergeImpl,
          &MQTTManagerSettings::kDescriptorMethods,
          &descriptor_table_protobuf_5fmqttmanager_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 19, 0, 178, 2> MQTTManagerSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    19, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294443008,  // skipmap
    offsetof(decltype(_table_), field_entries),
    19,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MQTTManagerSettings_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MQTTManagerSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 color_temp_min = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerSettings, _impl_.color_temp_min_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.color_temp_min_)}},
    // uint32 color_temp_max = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerSettings, _impl_.color_temp_max_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.color_temp_max_)}},
    // string date_format = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.date_format_)}},
    // string outside_temp_sensor_provider = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.outside_temp_sensor_provider_)}},
    // string outside_temp_sensor_entity_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.outside_temp_sensor_entity_id_)}},
    // string weather_location_latitude = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_location_latitude_)}},
    // string weather_location_longitude = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_location_longitude_)}},
    // .wind_speed_format weather_wind_speed_format = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerSettings, _impl_.weather_wind_speed_format_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_wind_speed_format_)}},
    // .precipitation_format weather_precipitation_unit = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerSettings, _impl_.weather_precipitation_unit_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_precipitation_unit_)}},
    // int32 weather_update_interval_minutes = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerSettings, _impl_.weather_update_interval_minutes_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_update_interval_minutes_)}},
    // .time_format clock_format = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerSettings, _impl_.clock_format_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.clock_format_)}},
    // .temperature_format temperature_unit = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerSettings, _impl_.temperature_unit_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.temperature_unit_)}},
    // int32 max_log_buffer_size = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerSettings, _impl_.max_log_buffer_size_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.max_log_buffer_size_)}},
    // int32 manager_port = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MQTTManagerSettings, _impl_.manager_port_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.manager_port_)}},
    // string manager_address = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.manager_address_)}},
    // .MQTTManagerSettings.turn_on_behavior light_turn_on_behavior = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.light_turn_on_behavior_)}},
    // bool is_home_assistant_addon = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.is_home_assistant_addon_)}},
    // int32 mqtt_wait_time = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.mqtt_wait_time_)}},
    // bool optimistic_mode = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.optimistic_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 color_temp_min = 1;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.color_temp_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 color_temp_max = 2;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.color_temp_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string date_format = 3;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.date_format_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string outside_temp_sensor_provider = 4;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.outside_temp_sensor_provider_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string outside_temp_sensor_entity_id = 5;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.outside_temp_sensor_entity_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string weather_location_latitude = 6;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_location_latitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string weather_location_longitude = 7;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_location_longitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .wind_speed_format weather_wind_speed_format = 8;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_wind_speed_format_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .precipitation_format weather_precipitation_unit = 9;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_precipitation_unit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 weather_update_interval_minutes = 10;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.weather_update_interval_minutes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .time_format clock_format = 11;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.clock_format_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .temperature_format temperature_unit = 12;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.temperature_unit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 max_log_buffer_size = 13;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.max_log_buffer_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 manager_port = 14;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.manager_port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string manager_address = 15;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.manager_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .MQTTManagerSettings.turn_on_behavior light_turn_on_behavior = 16;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.light_turn_on_behavior_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_home_assistant_addon = 17;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.is_home_assistant_addon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 mqtt_wait_time = 18;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.mqtt_wait_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool optimistic_mode = 19;
    {PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.optimistic_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\23\0\0\13\34\35\31\32\0\0\0\0\0\0\0\17\0\0\0\0\0\0\0\0"
    "MQTTManagerSettings"
    "date_format"
    "outside_temp_sensor_provider"
    "outside_temp_sensor_entity_id"
    "weather_location_latitude"
    "weather_location_longitude"
    "manager_address"
  }},
};

PROTOBUF_NOINLINE void MQTTManagerSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:MQTTManagerSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.date_format_.ClearToEmpty();
  _impl_.outside_temp_sensor_provider_.ClearToEmpty();
  _impl_.outside_temp_sensor_entity_id_.ClearToEmpty();
  _impl_.weather_location_latitude_.ClearToEmpty();
  _impl_.weather_location_longitude_.ClearToEmpty();
  _impl_.manager_address_.ClearToEmpty();
  ::memset(&_impl_.color_temp_min_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.optimistic_mode_) -
      reinterpret_cast<char*>(&_impl_.color_temp_min_)) + sizeof(_impl_.optimistic_mode_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MQTTManagerSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MQTTManagerSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 color_temp_min = 1;
  if (this->_internal_color_temp_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_color_temp_min(), target);
  }

  // uint32 color_temp_max = 2;
  if (this->_internal_color_temp_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_color_temp_max(), target);
  }

  // string date_format = 3;
  if (!this->_internal_date_format().empty()) {
    const std::string& _s = this->_internal_date_format();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerSettings.date_format");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string outside_temp_sensor_provider = 4;
  if (!this->_internal_outside_temp_sensor_provider().empty()) {
    const std::string& _s = this->_internal_outside_temp_sensor_provider();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerSettings.outside_temp_sensor_provider");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string outside_temp_sensor_entity_id = 5;
  if (!this->_internal_outside_temp_sensor_entity_id().empty()) {
    const std::string& _s = this->_internal_outside_temp_sensor_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerSettings.outside_temp_sensor_entity_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string weather_location_latitude = 6;
  if (!this->_internal_weather_location_latitude().empty()) {
    const std::string& _s = this->_internal_weather_location_latitude();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerSettings.weather_location_latitude");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string weather_location_longitude = 7;
  if (!this->_internal_weather_location_longitude().empty()) {
    const std::string& _s = this->_internal_weather_location_longitude();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerSettings.weather_location_longitude");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // .wind_speed_format weather_wind_speed_format = 8;
  if (this->_internal_weather_wind_speed_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_weather_wind_speed_format(), target);
  }

  // .precipitation_format weather_precipitation_unit = 9;
  if (this->_internal_weather_precipitation_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_weather_precipitation_unit(), target);
  }

  // int32 weather_update_interval_minutes = 10;
  if (this->_internal_weather_update_interval_minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_weather_update_interval_minutes(), target);
  }

  // .time_format clock_format = 11;
  if (this->_internal_clock_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_clock_format(), target);
  }

  // .temperature_format temperature_unit = 12;
  if (this->_internal_temperature_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        12, this->_internal_temperature_unit(), target);
  }

  // int32 max_log_buffer_size = 13;
  if (this->_internal_max_log_buffer_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<13>(
            stream, this->_internal_max_log_buffer_size(), target);
  }

  // int32 manager_port = 14;
  if (this->_internal_manager_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<14>(
            stream, this->_internal_manager_port(), target);
  }

  // string manager_address = 15;
  if (!this->_internal_manager_address().empty()) {
    const std::string& _s = this->_internal_manager_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "MQTTManagerSettings.manager_address");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // .MQTTManagerSettings.turn_on_behavior light_turn_on_behavior = 16;
  if (this->_internal_light_turn_on_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        16, this->_internal_light_turn_on_behavior(), target);
  }

  // bool is_home_assistant_addon = 17;
  if (this->_internal_is_home_assistant_addon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_is_home_assistant_addon(), target);
  }

  // int32 mqtt_wait_time = 18;
  if (this->_internal_mqtt_wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this->_internal_mqtt_wait_time(), target);
  }

  // bool optimistic_mode = 19;
  if (this->_internal_optimistic_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_optimistic_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MQTTManagerSettings)
  return target;
}

::size_t MQTTManagerSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MQTTManagerSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string date_format = 3;
  if (!this->_internal_date_format().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_date_format());
  }

  // string outside_temp_sensor_provider = 4;
  if (!this->_internal_outside_temp_sensor_provider().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_outside_temp_sensor_provider());
  }

  // string outside_temp_sensor_entity_id = 5;
  if (!this->_internal_outside_temp_sensor_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_outside_temp_sensor_entity_id());
  }

  // string weather_location_latitude = 6;
  if (!this->_internal_weather_location_latitude().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_weather_location_latitude());
  }

  // string weather_location_longitude = 7;
  if (!this->_internal_weather_location_longitude().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_weather_location_longitude());
  }

  // string manager_address = 15;
  if (!this->_internal_manager_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_manager_address());
  }

  // uint32 color_temp_min = 1;
  if (this->_internal_color_temp_min() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_color_temp_min());
  }

  // uint32 color_temp_max = 2;
  if (this->_internal_color_temp_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_color_temp_max());
  }

  // .wind_speed_format weather_wind_speed_format = 8;
  if (this->_internal_weather_wind_speed_format() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_weather_wind_speed_format());
  }

  // .precipitation_format weather_precipitation_unit = 9;
  if (this->_internal_weather_precipitation_unit() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_weather_precipitation_unit());
  }

  // int32 weather_update_interval_minutes = 10;
  if (this->_internal_weather_update_interval_minutes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_weather_update_interval_minutes());
  }

  // .time_format clock_format = 11;
  if (this->_internal_clock_format() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_clock_format());
  }

  // .temperature_format temperature_unit = 12;
  if (this->_internal_temperature_unit() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_temperature_unit());
  }

  // int32 max_log_buffer_size = 13;
  if (this->_internal_max_log_buffer_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_log_buffer_size());
  }

  // int32 manager_port = 14;
  if (this->_internal_manager_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_manager_port());
  }

  // .MQTTManagerSettings.turn_on_behavior light_turn_on_behavior = 16;
  if (this->_internal_light_turn_on_behavior() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_light_turn_on_behavior());
  }

  // int32 mqtt_wait_time = 18;
  if (this->_internal_mqtt_wait_time() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_mqtt_wait_time());
  }

  // bool is_home_assistant_addon = 17;
  if (this->_internal_is_home_assistant_addon() != 0) {
    total_size += 3;
  }

  // bool optimistic_mode = 19;
  if (this->_internal_optimistic_mode() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void MQTTManagerSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MQTTManagerSettings*>(&to_msg);
  auto& from = static_cast<const MQTTManagerSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MQTTManagerSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_date_format().empty()) {
    _this->_internal_set_date_format(from._internal_date_format());
  }
  if (!from._internal_outside_temp_sensor_provider().empty()) {
    _this->_internal_set_outside_temp_sensor_provider(from._internal_outside_temp_sensor_provider());
  }
  if (!from._internal_outside_temp_sensor_entity_id().empty()) {
    _this->_internal_set_outside_temp_sensor_entity_id(from._internal_outside_temp_sensor_entity_id());
  }
  if (!from._internal_weather_location_latitude().empty()) {
    _this->_internal_set_weather_location_latitude(from._internal_weather_location_latitude());
  }
  if (!from._internal_weather_location_longitude().empty()) {
    _this->_internal_set_weather_location_longitude(from._internal_weather_location_longitude());
  }
  if (!from._internal_manager_address().empty()) {
    _this->_internal_set_manager_address(from._internal_manager_address());
  }
  if (from._internal_color_temp_min() != 0) {
    _this->_impl_.color_temp_min_ = from._impl_.color_temp_min_;
  }
  if (from._internal_color_temp_max() != 0) {
    _this->_impl_.color_temp_max_ = from._impl_.color_temp_max_;
  }
  if (from._internal_weather_wind_speed_format() != 0) {
    _this->_impl_.weather_wind_speed_format_ = from._impl_.weather_wind_speed_format_;
  }
  if (from._internal_weather_precipitation_unit() != 0) {
    _this->_impl_.weather_precipitation_unit_ = from._impl_.weather_precipitation_unit_;
  }
  if (from._internal_weather_update_interval_minutes() != 0) {
    _this->_impl_.weather_update_interval_minutes_ = from._impl_.weather_update_interval_minutes_;
  }
  if (from._internal_clock_format() != 0) {
    _this->_impl_.clock_format_ = from._impl_.clock_format_;
  }
  if (from._internal_temperature_unit() != 0) {
    _this->_impl_.temperature_unit_ = from._impl_.temperature_unit_;
  }
  if (from._internal_max_log_buffer_size() != 0) {
    _this->_impl_.max_log_buffer_size_ = from._impl_.max_log_buffer_size_;
  }
  if (from._internal_manager_port() != 0) {
    _this->_impl_.manager_port_ = from._impl_.manager_port_;
  }
  if (from._internal_light_turn_on_behavior() != 0) {
    _this->_impl_.light_turn_on_behavior_ = from._impl_.light_turn_on_behavior_;
  }
  if (from._internal_mqtt_wait_time() != 0) {
    _this->_impl_.mqtt_wait_time_ = from._impl_.mqtt_wait_time_;
  }
  if (from._internal_is_home_assistant_addon() != 0) {
    _this->_impl_.is_home_assistant_addon_ = from._impl_.is_home_assistant_addon_;
  }
  if (from._internal_optimistic_mode() != 0) {
    _this->_impl_.optimistic_mode_ = from._impl_.optimistic_mode_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MQTTManagerSettings::CopyFrom(const MQTTManagerSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MQTTManagerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MQTTManagerSettings::InternalSwap(MQTTManagerSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.date_format_, &other->_impl_.date_format_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.outside_temp_sensor_provider_, &other->_impl_.outside_temp_sensor_provider_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.outside_temp_sensor_entity_id_, &other->_impl_.outside_temp_sensor_entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weather_location_latitude_, &other->_impl_.weather_location_latitude_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weather_location_longitude_, &other->_impl_.weather_location_longitude_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.manager_address_, &other->_impl_.manager_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.optimistic_mode_)
      + sizeof(MQTTManagerSettings::_impl_.optimistic_mode_)
      - PROTOBUF_FIELD_OFFSET(MQTTManagerSettings, _impl_.color_temp_min_)>(
          reinterpret_cast<char*>(&_impl_.color_temp_min_),
          reinterpret_cast<char*>(&other->_impl_.color_temp_min_));
}

::google::protobuf::Metadata MQTTManagerSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MultipleNSPanelsSettings::_Internal {
 public:
};

MultipleNSPanelsSettings::MultipleNSPanelsSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MultipleNSPanelsSettings)
}
inline PROTOBUF_NDEBUG_INLINE MultipleNSPanelsSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::MultipleNSPanelsSettings& from_msg)
      : nspanels_{visibility, arena, from.nspanels_},
        _cached_size_{0} {}

MultipleNSPanelsSettings::MultipleNSPanelsSettings(
    ::google::protobuf::Arena* arena,
    const MultipleNSPanelsSettings& from)
    : ::google::protobuf::Message(arena) {
  MultipleNSPanelsSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:MultipleNSPanelsSettings)
}
inline PROTOBUF_NDEBUG_INLINE MultipleNSPanelsSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nspanels_{visibility, arena},
        _cached_size_{0} {}

inline void MultipleNSPanelsSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MultipleNSPanelsSettings::~MultipleNSPanelsSettings() {
  // @@protoc_insertion_point(destructor:MultipleNSPanelsSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MultipleNSPanelsSettings::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
MultipleNSPanelsSettings::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(MultipleNSPanelsSettings, _impl_._cached_size_),
              false,
          },
          &MultipleNSPanelsSettings::MergeImpl,
          &MultipleNSPanelsSettings::kDescriptorMethods,
          &descriptor_table_protobuf_5fmqttmanager_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MultipleNSPanelsSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MultipleNSPanelsSettings_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MultipleNSPanelsSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .NSPanelSettings nspanels = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MultipleNSPanelsSettings, _impl_.nspanels_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .NSPanelSettings nspanels = 1;
    {PROTOBUF_FIELD_OFFSET(MultipleNSPanelsSettings, _impl_.nspanels_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::NSPanelSettings>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MultipleNSPanelsSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:MultipleNSPanelsSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nspanels_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MultipleNSPanelsSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MultipleNSPanelsSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .NSPanelSettings nspanels = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_nspanels_size());
       i < n; i++) {
    const auto& repfield = this->_internal_nspanels().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultipleNSPanelsSettings)
  return target;
}

::size_t MultipleNSPanelsSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultipleNSPanelsSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .NSPanelSettings nspanels = 1;
  total_size += 1UL * this->_internal_nspanels_size();
  for (const auto& msg : this->_internal_nspanels()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void MultipleNSPanelsSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MultipleNSPanelsSettings*>(&to_msg);
  auto& from = static_cast<const MultipleNSPanelsSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MultipleNSPanelsSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nspanels()->MergeFrom(
      from._internal_nspanels());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultipleNSPanelsSettings::CopyFrom(const MultipleNSPanelsSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultipleNSPanelsSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MultipleNSPanelsSettings::InternalSwap(MultipleNSPanelsSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nspanels_.InternalSwap(&other->_impl_.nspanels_);
}

::google::protobuf::Metadata MultipleNSPanelsSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_protobuf_5fmqttmanager_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
