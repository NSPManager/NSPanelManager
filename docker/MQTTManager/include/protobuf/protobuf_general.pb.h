// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuf_general.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_5fgeneral_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_5fgeneral_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "protobuf_formats.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protobuf_5fgeneral_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_5fgeneral_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protobuf_5fgeneral_2eproto;
class LightSettings;
struct LightSettingsDefaultTypeInternal;
extern LightSettingsDefaultTypeInternal _LightSettings_default_instance_;
class MultipleLightsSettings;
struct MultipleLightsSettingsDefaultTypeInternal;
extern MultipleLightsSettingsDefaultTypeInternal _MultipleLightsSettings_default_instance_;
class MultipleRoomsSettings;
struct MultipleRoomsSettingsDefaultTypeInternal;
extern MultipleRoomsSettingsDefaultTypeInternal _MultipleRoomsSettings_default_instance_;
class NSPanelSettings;
struct NSPanelSettingsDefaultTypeInternal;
extern NSPanelSettingsDefaultTypeInternal _NSPanelSettings_default_instance_;
class RoomSettings;
struct RoomSettingsDefaultTypeInternal;
extern RoomSettingsDefaultTypeInternal _RoomSettings_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum NSPanelSettings_NSPanelDefaultPage : int {
  NSPanelSettings_NSPanelDefaultPage_MAIN_PAGE = 0,
  NSPanelSettings_NSPanelDefaultPage_SCENES_PAGE = 1,
  NSPanelSettings_NSPanelDefaultPage_ROOM_PAGE = 2,
  NSPanelSettings_NSPanelDefaultPage_NSPanelSettings_NSPanelDefaultPage_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelSettings_NSPanelDefaultPage_NSPanelSettings_NSPanelDefaultPage_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelSettings_NSPanelDefaultPage_IsValid(int value);
extern const uint32_t NSPanelSettings_NSPanelDefaultPage_internal_data_[];
constexpr NSPanelSettings_NSPanelDefaultPage NSPanelSettings_NSPanelDefaultPage_NSPanelDefaultPage_MIN = static_cast<NSPanelSettings_NSPanelDefaultPage>(0);
constexpr NSPanelSettings_NSPanelDefaultPage NSPanelSettings_NSPanelDefaultPage_NSPanelDefaultPage_MAX = static_cast<NSPanelSettings_NSPanelDefaultPage>(2);
constexpr int NSPanelSettings_NSPanelDefaultPage_NSPanelDefaultPage_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelSettings_NSPanelDefaultPage_descriptor();
template <typename T>
const std::string& NSPanelSettings_NSPanelDefaultPage_Name(T value) {
  static_assert(std::is_same<T, NSPanelSettings_NSPanelDefaultPage>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NSPanelDefaultPage_Name().");
  return NSPanelSettings_NSPanelDefaultPage_Name(static_cast<NSPanelSettings_NSPanelDefaultPage>(value));
}
template <>
inline const std::string& NSPanelSettings_NSPanelDefaultPage_Name(NSPanelSettings_NSPanelDefaultPage value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelSettings_NSPanelDefaultPage_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool NSPanelSettings_NSPanelDefaultPage_Parse(absl::string_view name, NSPanelSettings_NSPanelDefaultPage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelSettings_NSPanelDefaultPage>(
      NSPanelSettings_NSPanelDefaultPage_descriptor(), name, value);
}
enum NSPanelSettings_NSPanelScreensaverMode : int {
  NSPanelSettings_NSPanelScreensaverMode_WEATHER_WITH_BACKGROUND = 0,
  NSPanelSettings_NSPanelScreensaverMode_WEATHER_WITHOUT_BACKGROUND = 1,
  NSPanelSettings_NSPanelScreensaverMode_DATETIME_WITH_BACKGROUND = 3,
  NSPanelSettings_NSPanelScreensaverMode_DATETIME_WITHOUT_BACKGROUND = 4,
  NSPanelSettings_NSPanelScreensaverMode_NO_SCREENSAVER = 5,
  NSPanelSettings_NSPanelScreensaverMode_NSPanelSettings_NSPanelScreensaverMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelSettings_NSPanelScreensaverMode_NSPanelSettings_NSPanelScreensaverMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelSettings_NSPanelScreensaverMode_IsValid(int value);
extern const uint32_t NSPanelSettings_NSPanelScreensaverMode_internal_data_[];
constexpr NSPanelSettings_NSPanelScreensaverMode NSPanelSettings_NSPanelScreensaverMode_NSPanelScreensaverMode_MIN = static_cast<NSPanelSettings_NSPanelScreensaverMode>(0);
constexpr NSPanelSettings_NSPanelScreensaverMode NSPanelSettings_NSPanelScreensaverMode_NSPanelScreensaverMode_MAX = static_cast<NSPanelSettings_NSPanelScreensaverMode>(5);
constexpr int NSPanelSettings_NSPanelScreensaverMode_NSPanelScreensaverMode_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelSettings_NSPanelScreensaverMode_descriptor();
template <typename T>
const std::string& NSPanelSettings_NSPanelScreensaverMode_Name(T value) {
  static_assert(std::is_same<T, NSPanelSettings_NSPanelScreensaverMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NSPanelScreensaverMode_Name().");
  return NSPanelSettings_NSPanelScreensaverMode_Name(static_cast<NSPanelSettings_NSPanelScreensaverMode>(value));
}
template <>
inline const std::string& NSPanelSettings_NSPanelScreensaverMode_Name(NSPanelSettings_NSPanelScreensaverMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelSettings_NSPanelScreensaverMode_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool NSPanelSettings_NSPanelScreensaverMode_Parse(absl::string_view name, NSPanelSettings_NSPanelScreensaverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelSettings_NSPanelScreensaverMode>(
      NSPanelSettings_NSPanelScreensaverMode_descriptor(), name, value);
}
enum NSPanelSettings_NSPanelButtonMode : int {
  NSPanelSettings_NSPanelButtonMode_DIRECT_MODE = 0,
  NSPanelSettings_NSPanelButtonMode_DETACHED_MODE = 1,
  NSPanelSettings_NSPanelButtonMode_CUSTOM_MQTT = 2,
  NSPanelSettings_NSPanelButtonMode_FOLLOW_MODE = 3,
  NSPanelSettings_NSPanelButtonMode_NSPanelSettings_NSPanelButtonMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelSettings_NSPanelButtonMode_NSPanelSettings_NSPanelButtonMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelSettings_NSPanelButtonMode_IsValid(int value);
extern const uint32_t NSPanelSettings_NSPanelButtonMode_internal_data_[];
constexpr NSPanelSettings_NSPanelButtonMode NSPanelSettings_NSPanelButtonMode_NSPanelButtonMode_MIN = static_cast<NSPanelSettings_NSPanelButtonMode>(0);
constexpr NSPanelSettings_NSPanelButtonMode NSPanelSettings_NSPanelButtonMode_NSPanelButtonMode_MAX = static_cast<NSPanelSettings_NSPanelButtonMode>(3);
constexpr int NSPanelSettings_NSPanelButtonMode_NSPanelButtonMode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelSettings_NSPanelButtonMode_descriptor();
template <typename T>
const std::string& NSPanelSettings_NSPanelButtonMode_Name(T value) {
  static_assert(std::is_same<T, NSPanelSettings_NSPanelButtonMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NSPanelButtonMode_Name().");
  return NSPanelSettings_NSPanelButtonMode_Name(static_cast<NSPanelSettings_NSPanelButtonMode>(value));
}
template <>
inline const std::string& NSPanelSettings_NSPanelButtonMode_Name(NSPanelSettings_NSPanelButtonMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelSettings_NSPanelButtonMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool NSPanelSettings_NSPanelButtonMode_Parse(absl::string_view name, NSPanelSettings_NSPanelButtonMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelSettings_NSPanelButtonMode>(
      NSPanelSettings_NSPanelButtonMode_descriptor(), name, value);
}
enum NSPanelSettings_RelayRegisterType : int {
  NSPanelSettings_RelayRegisterType_SWITCH = 0,
  NSPanelSettings_RelayRegisterType_LIGHT = 1,
  NSPanelSettings_RelayRegisterType_NSPanelSettings_RelayRegisterType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NSPanelSettings_RelayRegisterType_NSPanelSettings_RelayRegisterType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NSPanelSettings_RelayRegisterType_IsValid(int value);
extern const uint32_t NSPanelSettings_RelayRegisterType_internal_data_[];
constexpr NSPanelSettings_RelayRegisterType NSPanelSettings_RelayRegisterType_RelayRegisterType_MIN = static_cast<NSPanelSettings_RelayRegisterType>(0);
constexpr NSPanelSettings_RelayRegisterType NSPanelSettings_RelayRegisterType_RelayRegisterType_MAX = static_cast<NSPanelSettings_RelayRegisterType>(1);
constexpr int NSPanelSettings_RelayRegisterType_RelayRegisterType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
NSPanelSettings_RelayRegisterType_descriptor();
template <typename T>
const std::string& NSPanelSettings_RelayRegisterType_Name(T value) {
  static_assert(std::is_same<T, NSPanelSettings_RelayRegisterType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RelayRegisterType_Name().");
  return NSPanelSettings_RelayRegisterType_Name(static_cast<NSPanelSettings_RelayRegisterType>(value));
}
template <>
inline const std::string& NSPanelSettings_RelayRegisterType_Name(NSPanelSettings_RelayRegisterType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NSPanelSettings_RelayRegisterType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool NSPanelSettings_RelayRegisterType_Parse(absl::string_view name, NSPanelSettings_RelayRegisterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NSPanelSettings_RelayRegisterType>(
      NSPanelSettings_RelayRegisterType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RoomSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RoomSettings) */ {
 public:
  inline RoomSettings() : RoomSettings(nullptr) {}
  ~RoomSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RoomSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline RoomSettings(const RoomSettings& from) : RoomSettings(nullptr, from) {}
  inline RoomSettings(RoomSettings&& from) noexcept
      : RoomSettings(nullptr, std::move(from)) {}
  inline RoomSettings& operator=(const RoomSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomSettings& operator=(RoomSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomSettings* internal_default_instance() {
    return reinterpret_cast<const RoomSettings*>(
        &_RoomSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RoomSettings& a, RoomSettings& b) { a.Swap(&b); }
  inline void Swap(RoomSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RoomSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoomSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RoomSettings& from) { RoomSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RoomSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RoomSettings"; }

 protected:
  explicit RoomSettings(::google::protobuf::Arena* arena);
  RoomSettings(::google::protobuf::Arena* arena, const RoomSettings& from);
  RoomSettings(::google::protobuf::Arena* arena, RoomSettings&& from) noexcept
      : RoomSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLightIdsFieldNumber = 3,
    kSceneIdsFieldNumber = 4,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated int32 light_ids = 3;
  int light_ids_size() const;
  private:
  int _internal_light_ids_size() const;

  public:
  void clear_light_ids() ;
  ::int32_t light_ids(int index) const;
  void set_light_ids(int index, ::int32_t value);
  void add_light_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& light_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_light_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_light_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_light_ids();

  public:
  // repeated int32 scene_ids = 4;
  int scene_ids_size() const;
  private:
  int _internal_scene_ids_size() const;

  public:
  void clear_scene_ids() ;
  ::int32_t scene_ids(int index) const;
  void set_scene_ids(int index, ::int32_t value);
  void add_scene_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& scene_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_scene_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_scene_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_scene_ids();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:RoomSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      25, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RoomSettings_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RoomSettings& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> light_ids_;
    mutable ::google::protobuf::internal::CachedSize _light_ids_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> scene_ids_;
    mutable ::google::protobuf::internal::CachedSize _scene_ids_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fgeneral_2eproto;
};
// -------------------------------------------------------------------

class NSPanelSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NSPanelSettings) */ {
 public:
  inline NSPanelSettings() : NSPanelSettings(nullptr) {}
  ~NSPanelSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NSPanelSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline NSPanelSettings(const NSPanelSettings& from) : NSPanelSettings(nullptr, from) {}
  inline NSPanelSettings(NSPanelSettings&& from) noexcept
      : NSPanelSettings(nullptr, std::move(from)) {}
  inline NSPanelSettings& operator=(const NSPanelSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NSPanelSettings& operator=(NSPanelSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NSPanelSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const NSPanelSettings* internal_default_instance() {
    return reinterpret_cast<const NSPanelSettings*>(
        &_NSPanelSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NSPanelSettings& a, NSPanelSettings& b) { a.Swap(&b); }
  inline void Swap(NSPanelSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NSPanelSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NSPanelSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NSPanelSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NSPanelSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NSPanelSettings& from) { NSPanelSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NSPanelSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NSPanelSettings"; }

 protected:
  explicit NSPanelSettings(::google::protobuf::Arena* arena);
  NSPanelSettings(::google::protobuf::Arena* arena, const NSPanelSettings& from);
  NSPanelSettings(::google::protobuf::Arena* arena, NSPanelSettings&& from) noexcept
      : NSPanelSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using NSPanelDefaultPage = NSPanelSettings_NSPanelDefaultPage;
  static constexpr NSPanelDefaultPage MAIN_PAGE = NSPanelSettings_NSPanelDefaultPage_MAIN_PAGE;
  static constexpr NSPanelDefaultPage SCENES_PAGE = NSPanelSettings_NSPanelDefaultPage_SCENES_PAGE;
  static constexpr NSPanelDefaultPage ROOM_PAGE = NSPanelSettings_NSPanelDefaultPage_ROOM_PAGE;
  static inline bool NSPanelDefaultPage_IsValid(int value) {
    return NSPanelSettings_NSPanelDefaultPage_IsValid(value);
  }
  static constexpr NSPanelDefaultPage NSPanelDefaultPage_MIN = NSPanelSettings_NSPanelDefaultPage_NSPanelDefaultPage_MIN;
  static constexpr NSPanelDefaultPage NSPanelDefaultPage_MAX = NSPanelSettings_NSPanelDefaultPage_NSPanelDefaultPage_MAX;
  static constexpr int NSPanelDefaultPage_ARRAYSIZE = NSPanelSettings_NSPanelDefaultPage_NSPanelDefaultPage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NSPanelDefaultPage_descriptor() {
    return NSPanelSettings_NSPanelDefaultPage_descriptor();
  }
  template <typename T>
  static inline const std::string& NSPanelDefaultPage_Name(T value) {
    return NSPanelSettings_NSPanelDefaultPage_Name(value);
  }
  static inline bool NSPanelDefaultPage_Parse(absl::string_view name, NSPanelDefaultPage* value) {
    return NSPanelSettings_NSPanelDefaultPage_Parse(name, value);
  }
  using NSPanelScreensaverMode = NSPanelSettings_NSPanelScreensaverMode;
  static constexpr NSPanelScreensaverMode WEATHER_WITH_BACKGROUND = NSPanelSettings_NSPanelScreensaverMode_WEATHER_WITH_BACKGROUND;
  static constexpr NSPanelScreensaverMode WEATHER_WITHOUT_BACKGROUND = NSPanelSettings_NSPanelScreensaverMode_WEATHER_WITHOUT_BACKGROUND;
  static constexpr NSPanelScreensaverMode DATETIME_WITH_BACKGROUND = NSPanelSettings_NSPanelScreensaverMode_DATETIME_WITH_BACKGROUND;
  static constexpr NSPanelScreensaverMode DATETIME_WITHOUT_BACKGROUND = NSPanelSettings_NSPanelScreensaverMode_DATETIME_WITHOUT_BACKGROUND;
  static constexpr NSPanelScreensaverMode NO_SCREENSAVER = NSPanelSettings_NSPanelScreensaverMode_NO_SCREENSAVER;
  static inline bool NSPanelScreensaverMode_IsValid(int value) {
    return NSPanelSettings_NSPanelScreensaverMode_IsValid(value);
  }
  static constexpr NSPanelScreensaverMode NSPanelScreensaverMode_MIN = NSPanelSettings_NSPanelScreensaverMode_NSPanelScreensaverMode_MIN;
  static constexpr NSPanelScreensaverMode NSPanelScreensaverMode_MAX = NSPanelSettings_NSPanelScreensaverMode_NSPanelScreensaverMode_MAX;
  static constexpr int NSPanelScreensaverMode_ARRAYSIZE = NSPanelSettings_NSPanelScreensaverMode_NSPanelScreensaverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NSPanelScreensaverMode_descriptor() {
    return NSPanelSettings_NSPanelScreensaverMode_descriptor();
  }
  template <typename T>
  static inline const std::string& NSPanelScreensaverMode_Name(T value) {
    return NSPanelSettings_NSPanelScreensaverMode_Name(value);
  }
  static inline bool NSPanelScreensaverMode_Parse(absl::string_view name, NSPanelScreensaverMode* value) {
    return NSPanelSettings_NSPanelScreensaverMode_Parse(name, value);
  }
  using NSPanelButtonMode = NSPanelSettings_NSPanelButtonMode;
  static constexpr NSPanelButtonMode DIRECT_MODE = NSPanelSettings_NSPanelButtonMode_DIRECT_MODE;
  static constexpr NSPanelButtonMode DETACHED_MODE = NSPanelSettings_NSPanelButtonMode_DETACHED_MODE;
  static constexpr NSPanelButtonMode CUSTOM_MQTT = NSPanelSettings_NSPanelButtonMode_CUSTOM_MQTT;
  static constexpr NSPanelButtonMode FOLLOW_MODE = NSPanelSettings_NSPanelButtonMode_FOLLOW_MODE;
  static inline bool NSPanelButtonMode_IsValid(int value) {
    return NSPanelSettings_NSPanelButtonMode_IsValid(value);
  }
  static constexpr NSPanelButtonMode NSPanelButtonMode_MIN = NSPanelSettings_NSPanelButtonMode_NSPanelButtonMode_MIN;
  static constexpr NSPanelButtonMode NSPanelButtonMode_MAX = NSPanelSettings_NSPanelButtonMode_NSPanelButtonMode_MAX;
  static constexpr int NSPanelButtonMode_ARRAYSIZE = NSPanelSettings_NSPanelButtonMode_NSPanelButtonMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NSPanelButtonMode_descriptor() {
    return NSPanelSettings_NSPanelButtonMode_descriptor();
  }
  template <typename T>
  static inline const std::string& NSPanelButtonMode_Name(T value) {
    return NSPanelSettings_NSPanelButtonMode_Name(value);
  }
  static inline bool NSPanelButtonMode_Parse(absl::string_view name, NSPanelButtonMode* value) {
    return NSPanelSettings_NSPanelButtonMode_Parse(name, value);
  }
  using RelayRegisterType = NSPanelSettings_RelayRegisterType;
  static constexpr RelayRegisterType SWITCH = NSPanelSettings_RelayRegisterType_SWITCH;
  static constexpr RelayRegisterType LIGHT = NSPanelSettings_RelayRegisterType_LIGHT;
  static inline bool RelayRegisterType_IsValid(int value) {
    return NSPanelSettings_RelayRegisterType_IsValid(value);
  }
  static constexpr RelayRegisterType RelayRegisterType_MIN = NSPanelSettings_RelayRegisterType_RelayRegisterType_MIN;
  static constexpr RelayRegisterType RelayRegisterType_MAX = NSPanelSettings_RelayRegisterType_RelayRegisterType_MAX;
  static constexpr int RelayRegisterType_ARRAYSIZE = NSPanelSettings_RelayRegisterType_RelayRegisterType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* RelayRegisterType_descriptor() {
    return NSPanelSettings_RelayRegisterType_descriptor();
  }
  template <typename T>
  static inline const std::string& RelayRegisterType_Name(T value) {
    return NSPanelSettings_RelayRegisterType_Name(value);
  }
  static inline bool RelayRegisterType_Parse(absl::string_view name, RelayRegisterType* value) {
    return NSPanelSettings_RelayRegisterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kRoomsFieldNumber = 47,
    kScenesFieldNumber = 48,
    kMacAddressFieldNumber = 2,
    kNameFieldNumber = 3,
    kButton1MqttTopicFieldNumber = 29,
    kButton2MqttTopicFieldNumber = 30,
    kButton1MqttPayloadFieldNumber = 31,
    kButton2MqttPayloadFieldNumber = 32,
    kIpAddressFieldNumber = 49,
    kIdFieldNumber = 1,
    kHomeFieldNumber = 4,
    kDefaultPageFieldNumber = 5,
    kRaiseTo100LightLevelFieldNumber = 6,
    kColorTempMinFieldNumber = 7,
    kColorTempMaxFieldNumber = 8,
    kMinButtonPushTimeFieldNumber = 10,
    kButtonLongPressTimeFieldNumber = 11,
    kSpecialModeTriggerTimeFieldNumber = 12,
    kSpecialModeReleaseTimeFieldNumber = 13,
    kMqttIgnoreTimeFieldNumber = 14,
    kScreenDimLevelFieldNumber = 15,
    kScreensaverDimLevelFieldNumber = 16,
    kScreensaverActivationTimeoutFieldNumber = 17,
    kScreensaverModeFieldNumber = 18,
    kReverseColorTempFieldNumber = 9,
    kIsUsPanelFieldNumber = 21,
    kLockToDefaultRoomFieldNumber = 22,
    kReverseRelaysFieldNumber = 23,
    kClockFormatFieldNumber = 19,
    kTemperatureUnitFieldNumber = 20,
    kTemperatureCalibrationFieldNumber = 26,
    kButton1ModeFieldNumber = 27,
    kButton2ModeFieldNumber = 28,
    kButton1DetachedLightIdFieldNumber = 33,
    kButton2DetachedLightIdFieldNumber = 34,
    kRelay1DefaultModeFieldNumber = 24,
    kRelay2DefaultModeFieldNumber = 25,
    kDeniedFieldNumber = 45,
    kAcceptedFieldNumber = 46,
    kRelay1RegisterTypeFieldNumber = 50,
    kRelay2RegisterTypeFieldNumber = 51,
  };
  // repeated int32 rooms = 47;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;

  public:
  void clear_rooms() ;
  ::int32_t rooms(int index) const;
  void set_rooms(int index, ::int32_t value);
  void add_rooms(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& rooms() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_rooms();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_rooms() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_rooms();

  public:
  // repeated int32 scenes = 48;
  int scenes_size() const;
  private:
  int _internal_scenes_size() const;

  public:
  void clear_scenes() ;
  ::int32_t scenes(int index) const;
  void set_scenes(int index, ::int32_t value);
  void add_scenes(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& scenes() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_scenes();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_scenes() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_scenes();

  public:
  // string mac_address = 2;
  void clear_mac_address() ;
  const std::string& mac_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mac_address(Arg_&& arg, Args_... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* value);

  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(
      const std::string& value);
  std::string* _internal_mutable_mac_address();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string button1_mqtt_topic = 29;
  bool has_button1_mqtt_topic() const;
  void clear_button1_mqtt_topic() ;
  const std::string& button1_mqtt_topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_button1_mqtt_topic(Arg_&& arg, Args_... args);
  std::string* mutable_button1_mqtt_topic();
  PROTOBUF_NODISCARD std::string* release_button1_mqtt_topic();
  void set_allocated_button1_mqtt_topic(std::string* value);

  private:
  const std::string& _internal_button1_mqtt_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_button1_mqtt_topic(
      const std::string& value);
  std::string* _internal_mutable_button1_mqtt_topic();

  public:
  // optional string button2_mqtt_topic = 30;
  bool has_button2_mqtt_topic() const;
  void clear_button2_mqtt_topic() ;
  const std::string& button2_mqtt_topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_button2_mqtt_topic(Arg_&& arg, Args_... args);
  std::string* mutable_button2_mqtt_topic();
  PROTOBUF_NODISCARD std::string* release_button2_mqtt_topic();
  void set_allocated_button2_mqtt_topic(std::string* value);

  private:
  const std::string& _internal_button2_mqtt_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_button2_mqtt_topic(
      const std::string& value);
  std::string* _internal_mutable_button2_mqtt_topic();

  public:
  // optional string button1_mqtt_payload = 31;
  bool has_button1_mqtt_payload() const;
  void clear_button1_mqtt_payload() ;
  const std::string& button1_mqtt_payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_button1_mqtt_payload(Arg_&& arg, Args_... args);
  std::string* mutable_button1_mqtt_payload();
  PROTOBUF_NODISCARD std::string* release_button1_mqtt_payload();
  void set_allocated_button1_mqtt_payload(std::string* value);

  private:
  const std::string& _internal_button1_mqtt_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_button1_mqtt_payload(
      const std::string& value);
  std::string* _internal_mutable_button1_mqtt_payload();

  public:
  // optional string button2_mqtt_payload = 32;
  bool has_button2_mqtt_payload() const;
  void clear_button2_mqtt_payload() ;
  const std::string& button2_mqtt_payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_button2_mqtt_payload(Arg_&& arg, Args_... args);
  std::string* mutable_button2_mqtt_payload();
  PROTOBUF_NODISCARD std::string* release_button2_mqtt_payload();
  void set_allocated_button2_mqtt_payload(std::string* value);

  private:
  const std::string& _internal_button2_mqtt_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_button2_mqtt_payload(
      const std::string& value);
  std::string* _internal_mutable_button2_mqtt_payload();

  public:
  // string ip_address = 49;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* value);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // optional int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 home = 4;
  void clear_home() ;
  ::int32_t home() const;
  void set_home(::int32_t value);

  private:
  ::int32_t _internal_home() const;
  void _internal_set_home(::int32_t value);

  public:
  // .NSPanelSettings.NSPanelDefaultPage default_page = 5;
  void clear_default_page() ;
  ::NSPanelSettings_NSPanelDefaultPage default_page() const;
  void set_default_page(::NSPanelSettings_NSPanelDefaultPage value);

  private:
  ::NSPanelSettings_NSPanelDefaultPage _internal_default_page() const;
  void _internal_set_default_page(::NSPanelSettings_NSPanelDefaultPage value);

  public:
  // int32 raise_to_100_light_level = 6;
  void clear_raise_to_100_light_level() ;
  ::int32_t raise_to_100_light_level() const;
  void set_raise_to_100_light_level(::int32_t value);

  private:
  ::int32_t _internal_raise_to_100_light_level() const;
  void _internal_set_raise_to_100_light_level(::int32_t value);

  public:
  // int32 color_temp_min = 7;
  void clear_color_temp_min() ;
  ::int32_t color_temp_min() const;
  void set_color_temp_min(::int32_t value);

  private:
  ::int32_t _internal_color_temp_min() const;
  void _internal_set_color_temp_min(::int32_t value);

  public:
  // int32 color_temp_max = 8;
  void clear_color_temp_max() ;
  ::int32_t color_temp_max() const;
  void set_color_temp_max(::int32_t value);

  private:
  ::int32_t _internal_color_temp_max() const;
  void _internal_set_color_temp_max(::int32_t value);

  public:
  // int32 min_button_push_time = 10;
  void clear_min_button_push_time() ;
  ::int32_t min_button_push_time() const;
  void set_min_button_push_time(::int32_t value);

  private:
  ::int32_t _internal_min_button_push_time() const;
  void _internal_set_min_button_push_time(::int32_t value);

  public:
  // int32 button_long_press_time = 11;
  void clear_button_long_press_time() ;
  ::int32_t button_long_press_time() const;
  void set_button_long_press_time(::int32_t value);

  private:
  ::int32_t _internal_button_long_press_time() const;
  void _internal_set_button_long_press_time(::int32_t value);

  public:
  // int32 special_mode_trigger_time = 12;
  void clear_special_mode_trigger_time() ;
  ::int32_t special_mode_trigger_time() const;
  void set_special_mode_trigger_time(::int32_t value);

  private:
  ::int32_t _internal_special_mode_trigger_time() const;
  void _internal_set_special_mode_trigger_time(::int32_t value);

  public:
  // int32 special_mode_release_time = 13;
  void clear_special_mode_release_time() ;
  ::int32_t special_mode_release_time() const;
  void set_special_mode_release_time(::int32_t value);

  private:
  ::int32_t _internal_special_mode_release_time() const;
  void _internal_set_special_mode_release_time(::int32_t value);

  public:
  // int32 mqtt_ignore_time = 14;
  void clear_mqtt_ignore_time() ;
  ::int32_t mqtt_ignore_time() const;
  void set_mqtt_ignore_time(::int32_t value);

  private:
  ::int32_t _internal_mqtt_ignore_time() const;
  void _internal_set_mqtt_ignore_time(::int32_t value);

  public:
  // int32 screen_dim_level = 15;
  void clear_screen_dim_level() ;
  ::int32_t screen_dim_level() const;
  void set_screen_dim_level(::int32_t value);

  private:
  ::int32_t _internal_screen_dim_level() const;
  void _internal_set_screen_dim_level(::int32_t value);

  public:
  // int32 screensaver_dim_level = 16;
  void clear_screensaver_dim_level() ;
  ::int32_t screensaver_dim_level() const;
  void set_screensaver_dim_level(::int32_t value);

  private:
  ::int32_t _internal_screensaver_dim_level() const;
  void _internal_set_screensaver_dim_level(::int32_t value);

  public:
  // int32 screensaver_activation_timeout = 17;
  void clear_screensaver_activation_timeout() ;
  ::int32_t screensaver_activation_timeout() const;
  void set_screensaver_activation_timeout(::int32_t value);

  private:
  ::int32_t _internal_screensaver_activation_timeout() const;
  void _internal_set_screensaver_activation_timeout(::int32_t value);

  public:
  // .NSPanelSettings.NSPanelScreensaverMode screensaver_mode = 18;
  void clear_screensaver_mode() ;
  ::NSPanelSettings_NSPanelScreensaverMode screensaver_mode() const;
  void set_screensaver_mode(::NSPanelSettings_NSPanelScreensaverMode value);

  private:
  ::NSPanelSettings_NSPanelScreensaverMode _internal_screensaver_mode() const;
  void _internal_set_screensaver_mode(::NSPanelSettings_NSPanelScreensaverMode value);

  public:
  // bool reverse_color_temp = 9;
  void clear_reverse_color_temp() ;
  bool reverse_color_temp() const;
  void set_reverse_color_temp(bool value);

  private:
  bool _internal_reverse_color_temp() const;
  void _internal_set_reverse_color_temp(bool value);

  public:
  // bool is_us_panel = 21;
  void clear_is_us_panel() ;
  bool is_us_panel() const;
  void set_is_us_panel(bool value);

  private:
  bool _internal_is_us_panel() const;
  void _internal_set_is_us_panel(bool value);

  public:
  // bool lock_to_default_room = 22;
  void clear_lock_to_default_room() ;
  bool lock_to_default_room() const;
  void set_lock_to_default_room(bool value);

  private:
  bool _internal_lock_to_default_room() const;
  void _internal_set_lock_to_default_room(bool value);

  public:
  // bool reverse_relays = 23;
  void clear_reverse_relays() ;
  bool reverse_relays() const;
  void set_reverse_relays(bool value);

  private:
  bool _internal_reverse_relays() const;
  void _internal_set_reverse_relays(bool value);

  public:
  // .time_format clock_format = 19;
  void clear_clock_format() ;
  ::time_format clock_format() const;
  void set_clock_format(::time_format value);

  private:
  ::time_format _internal_clock_format() const;
  void _internal_set_clock_format(::time_format value);

  public:
  // .temperature_format temperature_unit = 20;
  void clear_temperature_unit() ;
  ::temperature_format temperature_unit() const;
  void set_temperature_unit(::temperature_format value);

  private:
  ::temperature_format _internal_temperature_unit() const;
  void _internal_set_temperature_unit(::temperature_format value);

  public:
  // int32 temperature_calibration = 26;
  void clear_temperature_calibration() ;
  ::int32_t temperature_calibration() const;
  void set_temperature_calibration(::int32_t value);

  private:
  ::int32_t _internal_temperature_calibration() const;
  void _internal_set_temperature_calibration(::int32_t value);

  public:
  // .NSPanelSettings.NSPanelButtonMode button1_mode = 27;
  void clear_button1_mode() ;
  ::NSPanelSettings_NSPanelButtonMode button1_mode() const;
  void set_button1_mode(::NSPanelSettings_NSPanelButtonMode value);

  private:
  ::NSPanelSettings_NSPanelButtonMode _internal_button1_mode() const;
  void _internal_set_button1_mode(::NSPanelSettings_NSPanelButtonMode value);

  public:
  // .NSPanelSettings.NSPanelButtonMode button2_mode = 28;
  void clear_button2_mode() ;
  ::NSPanelSettings_NSPanelButtonMode button2_mode() const;
  void set_button2_mode(::NSPanelSettings_NSPanelButtonMode value);

  private:
  ::NSPanelSettings_NSPanelButtonMode _internal_button2_mode() const;
  void _internal_set_button2_mode(::NSPanelSettings_NSPanelButtonMode value);

  public:
  // optional int32 button1_detached_light_id = 33;
  bool has_button1_detached_light_id() const;
  void clear_button1_detached_light_id() ;
  ::int32_t button1_detached_light_id() const;
  void set_button1_detached_light_id(::int32_t value);

  private:
  ::int32_t _internal_button1_detached_light_id() const;
  void _internal_set_button1_detached_light_id(::int32_t value);

  public:
  // optional int32 button2_detached_light_id = 34;
  bool has_button2_detached_light_id() const;
  void clear_button2_detached_light_id() ;
  ::int32_t button2_detached_light_id() const;
  void set_button2_detached_light_id(::int32_t value);

  private:
  ::int32_t _internal_button2_detached_light_id() const;
  void _internal_set_button2_detached_light_id(::int32_t value);

  public:
  // bool relay1_default_mode = 24;
  void clear_relay1_default_mode() ;
  bool relay1_default_mode() const;
  void set_relay1_default_mode(bool value);

  private:
  bool _internal_relay1_default_mode() const;
  void _internal_set_relay1_default_mode(bool value);

  public:
  // bool relay2_default_mode = 25;
  void clear_relay2_default_mode() ;
  bool relay2_default_mode() const;
  void set_relay2_default_mode(bool value);

  private:
  bool _internal_relay2_default_mode() const;
  void _internal_set_relay2_default_mode(bool value);

  public:
  // bool denied = 45;
  void clear_denied() ;
  bool denied() const;
  void set_denied(bool value);

  private:
  bool _internal_denied() const;
  void _internal_set_denied(bool value);

  public:
  // bool accepted = 46;
  void clear_accepted() ;
  bool accepted() const;
  void set_accepted(bool value);

  private:
  bool _internal_accepted() const;
  void _internal_set_accepted(bool value);

  public:
  // .NSPanelSettings.RelayRegisterType relay1_register_type = 50;
  void clear_relay1_register_type() ;
  ::NSPanelSettings_RelayRegisterType relay1_register_type() const;
  void set_relay1_register_type(::NSPanelSettings_RelayRegisterType value);

  private:
  ::NSPanelSettings_RelayRegisterType _internal_relay1_register_type() const;
  void _internal_set_relay1_register_type(::NSPanelSettings_RelayRegisterType value);

  public:
  // .NSPanelSettings.RelayRegisterType relay2_register_type = 51;
  void clear_relay2_register_type() ;
  ::NSPanelSettings_RelayRegisterType relay2_register_type() const;
  void set_relay2_register_type(::NSPanelSettings_RelayRegisterType value);

  private:
  ::NSPanelSettings_RelayRegisterType _internal_relay2_register_type() const;
  void _internal_set_relay2_register_type(::NSPanelSettings_RelayRegisterType value);

  public:
  // @@protoc_insertion_point(class_scope:NSPanelSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 41, 0,
      165, 9>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NSPanelSettings_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NSPanelSettings& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> rooms_;
    mutable ::google::protobuf::internal::CachedSize _rooms_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> scenes_;
    mutable ::google::protobuf::internal::CachedSize _scenes_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr mac_address_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr button1_mqtt_topic_;
    ::google::protobuf::internal::ArenaStringPtr button2_mqtt_topic_;
    ::google::protobuf::internal::ArenaStringPtr button1_mqtt_payload_;
    ::google::protobuf::internal::ArenaStringPtr button2_mqtt_payload_;
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    ::int32_t id_;
    ::int32_t home_;
    int default_page_;
    ::int32_t raise_to_100_light_level_;
    ::int32_t color_temp_min_;
    ::int32_t color_temp_max_;
    ::int32_t min_button_push_time_;
    ::int32_t button_long_press_time_;
    ::int32_t special_mode_trigger_time_;
    ::int32_t special_mode_release_time_;
    ::int32_t mqtt_ignore_time_;
    ::int32_t screen_dim_level_;
    ::int32_t screensaver_dim_level_;
    ::int32_t screensaver_activation_timeout_;
    int screensaver_mode_;
    bool reverse_color_temp_;
    bool is_us_panel_;
    bool lock_to_default_room_;
    bool reverse_relays_;
    int clock_format_;
    int temperature_unit_;
    ::int32_t temperature_calibration_;
    int button1_mode_;
    int button2_mode_;
    ::int32_t button1_detached_light_id_;
    ::int32_t button2_detached_light_id_;
    bool relay1_default_mode_;
    bool relay2_default_mode_;
    bool denied_;
    bool accepted_;
    int relay1_register_type_;
    int relay2_register_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fgeneral_2eproto;
};
// -------------------------------------------------------------------

class LightSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LightSettings) */ {
 public:
  inline LightSettings() : LightSettings(nullptr) {}
  ~LightSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LightSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline LightSettings(const LightSettings& from) : LightSettings(nullptr, from) {}
  inline LightSettings(LightSettings&& from) noexcept
      : LightSettings(nullptr, std::move(from)) {}
  inline LightSettings& operator=(const LightSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightSettings& operator=(LightSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightSettings* internal_default_instance() {
    return reinterpret_cast<const LightSettings*>(
        &_LightSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(LightSettings& a, LightSettings& b) { a.Swap(&b); }
  inline void Swap(LightSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LightSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LightSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LightSettings& from) { LightSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LightSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "LightSettings"; }

 protected:
  explicit LightSettings(::google::protobuf::Arena* arena);
  LightSettings(::google::protobuf::Arena* arena, const LightSettings& from);
  LightSettings(::google::protobuf::Arena* arena, LightSettings&& from) noexcept
      : LightSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kTypeFieldNumber = 4,
    kHomeAssistantNameFieldNumber = 9,
    kOpenhabNameFieldNumber = 10,
    kOpenhabControlModeFieldNumber = 11,
    kOpenhabItemSwitchFieldNumber = 12,
    kOpenhabItemDimmerFieldNumber = 13,
    kOpenhabItemColorTempFieldNumber = 14,
    kOpenhabItemRgbFieldNumber = 15,
    kIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kIsCeilingLightFieldNumber = 5,
    kCanDimFieldNumber = 6,
    kCanColorTemperatureFieldNumber = 7,
    kCanRgbFieldNumber = 8,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string type = 4;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional string home_assistant_name = 9;
  bool has_home_assistant_name() const;
  void clear_home_assistant_name() ;
  const std::string& home_assistant_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_home_assistant_name(Arg_&& arg, Args_... args);
  std::string* mutable_home_assistant_name();
  PROTOBUF_NODISCARD std::string* release_home_assistant_name();
  void set_allocated_home_assistant_name(std::string* value);

  private:
  const std::string& _internal_home_assistant_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home_assistant_name(
      const std::string& value);
  std::string* _internal_mutable_home_assistant_name();

  public:
  // optional string openhab_name = 10;
  bool has_openhab_name() const;
  void clear_openhab_name() ;
  const std::string& openhab_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_openhab_name(Arg_&& arg, Args_... args);
  std::string* mutable_openhab_name();
  PROTOBUF_NODISCARD std::string* release_openhab_name();
  void set_allocated_openhab_name(std::string* value);

  private:
  const std::string& _internal_openhab_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openhab_name(
      const std::string& value);
  std::string* _internal_mutable_openhab_name();

  public:
  // optional string openhab_control_mode = 11;
  bool has_openhab_control_mode() const;
  void clear_openhab_control_mode() ;
  const std::string& openhab_control_mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_openhab_control_mode(Arg_&& arg, Args_... args);
  std::string* mutable_openhab_control_mode();
  PROTOBUF_NODISCARD std::string* release_openhab_control_mode();
  void set_allocated_openhab_control_mode(std::string* value);

  private:
  const std::string& _internal_openhab_control_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openhab_control_mode(
      const std::string& value);
  std::string* _internal_mutable_openhab_control_mode();

  public:
  // optional string openhab_item_switch = 12;
  bool has_openhab_item_switch() const;
  void clear_openhab_item_switch() ;
  const std::string& openhab_item_switch() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_openhab_item_switch(Arg_&& arg, Args_... args);
  std::string* mutable_openhab_item_switch();
  PROTOBUF_NODISCARD std::string* release_openhab_item_switch();
  void set_allocated_openhab_item_switch(std::string* value);

  private:
  const std::string& _internal_openhab_item_switch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openhab_item_switch(
      const std::string& value);
  std::string* _internal_mutable_openhab_item_switch();

  public:
  // optional string openhab_item_dimmer = 13;
  bool has_openhab_item_dimmer() const;
  void clear_openhab_item_dimmer() ;
  const std::string& openhab_item_dimmer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_openhab_item_dimmer(Arg_&& arg, Args_... args);
  std::string* mutable_openhab_item_dimmer();
  PROTOBUF_NODISCARD std::string* release_openhab_item_dimmer();
  void set_allocated_openhab_item_dimmer(std::string* value);

  private:
  const std::string& _internal_openhab_item_dimmer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openhab_item_dimmer(
      const std::string& value);
  std::string* _internal_mutable_openhab_item_dimmer();

  public:
  // optional string openhab_item_color_temp = 14;
  bool has_openhab_item_color_temp() const;
  void clear_openhab_item_color_temp() ;
  const std::string& openhab_item_color_temp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_openhab_item_color_temp(Arg_&& arg, Args_... args);
  std::string* mutable_openhab_item_color_temp();
  PROTOBUF_NODISCARD std::string* release_openhab_item_color_temp();
  void set_allocated_openhab_item_color_temp(std::string* value);

  private:
  const std::string& _internal_openhab_item_color_temp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openhab_item_color_temp(
      const std::string& value);
  std::string* _internal_mutable_openhab_item_color_temp();

  public:
  // optional string openhab_item_rgb = 15;
  bool has_openhab_item_rgb() const;
  void clear_openhab_item_rgb() ;
  const std::string& openhab_item_rgb() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_openhab_item_rgb(Arg_&& arg, Args_... args);
  std::string* mutable_openhab_item_rgb();
  PROTOBUF_NODISCARD std::string* release_openhab_item_rgb();
  void set_allocated_openhab_item_rgb(std::string* value);

  private:
  const std::string& _internal_openhab_item_rgb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openhab_item_rgb(
      const std::string& value);
  std::string* _internal_mutable_openhab_item_rgb();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 room_id = 2;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool is_ceiling_light = 5;
  void clear_is_ceiling_light() ;
  bool is_ceiling_light() const;
  void set_is_ceiling_light(bool value);

  private:
  bool _internal_is_ceiling_light() const;
  void _internal_set_is_ceiling_light(bool value);

  public:
  // bool can_dim = 6;
  void clear_can_dim() ;
  bool can_dim() const;
  void set_can_dim(bool value);

  private:
  bool _internal_can_dim() const;
  void _internal_set_can_dim(bool value);

  public:
  // bool can_color_temperature = 7;
  void clear_can_color_temperature() ;
  bool can_color_temperature() const;
  void set_can_color_temperature(bool value);

  private:
  bool _internal_can_color_temperature() const;
  void _internal_set_can_color_temperature(bool value);

  public:
  // bool can_rgb = 8;
  void clear_can_rgb() ;
  bool can_rgb() const;
  void set_can_rgb(bool value);

  private:
  bool _internal_can_rgb() const;
  void _internal_set_can_rgb(bool value);

  public:
  // @@protoc_insertion_point(class_scope:LightSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 0,
      166, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LightSettings_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LightSettings& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr home_assistant_name_;
    ::google::protobuf::internal::ArenaStringPtr openhab_name_;
    ::google::protobuf::internal::ArenaStringPtr openhab_control_mode_;
    ::google::protobuf::internal::ArenaStringPtr openhab_item_switch_;
    ::google::protobuf::internal::ArenaStringPtr openhab_item_dimmer_;
    ::google::protobuf::internal::ArenaStringPtr openhab_item_color_temp_;
    ::google::protobuf::internal::ArenaStringPtr openhab_item_rgb_;
    ::int32_t id_;
    ::int32_t room_id_;
    bool is_ceiling_light_;
    bool can_dim_;
    bool can_color_temperature_;
    bool can_rgb_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fgeneral_2eproto;
};
// -------------------------------------------------------------------

class MultipleRoomsSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MultipleRoomsSettings) */ {
 public:
  inline MultipleRoomsSettings() : MultipleRoomsSettings(nullptr) {}
  ~MultipleRoomsSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultipleRoomsSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline MultipleRoomsSettings(const MultipleRoomsSettings& from) : MultipleRoomsSettings(nullptr, from) {}
  inline MultipleRoomsSettings(MultipleRoomsSettings&& from) noexcept
      : MultipleRoomsSettings(nullptr, std::move(from)) {}
  inline MultipleRoomsSettings& operator=(const MultipleRoomsSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleRoomsSettings& operator=(MultipleRoomsSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultipleRoomsSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultipleRoomsSettings* internal_default_instance() {
    return reinterpret_cast<const MultipleRoomsSettings*>(
        &_MultipleRoomsSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MultipleRoomsSettings& a, MultipleRoomsSettings& b) { a.Swap(&b); }
  inline void Swap(MultipleRoomsSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultipleRoomsSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultipleRoomsSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MultipleRoomsSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultipleRoomsSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MultipleRoomsSettings& from) { MultipleRoomsSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MultipleRoomsSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MultipleRoomsSettings"; }

 protected:
  explicit MultipleRoomsSettings(::google::protobuf::Arena* arena);
  MultipleRoomsSettings(::google::protobuf::Arena* arena, const MultipleRoomsSettings& from);
  MultipleRoomsSettings(::google::protobuf::Arena* arena, MultipleRoomsSettings&& from) noexcept
      : MultipleRoomsSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomsFieldNumber = 1,
  };
  // repeated .RoomSettings rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;

  public:
  void clear_rooms() ;
  ::RoomSettings* mutable_rooms(int index);
  ::google::protobuf::RepeatedPtrField<::RoomSettings>* mutable_rooms();

  private:
  const ::google::protobuf::RepeatedPtrField<::RoomSettings>& _internal_rooms() const;
  ::google::protobuf::RepeatedPtrField<::RoomSettings>* _internal_mutable_rooms();
  public:
  const ::RoomSettings& rooms(int index) const;
  ::RoomSettings* add_rooms();
  const ::google::protobuf::RepeatedPtrField<::RoomSettings>& rooms() const;
  // @@protoc_insertion_point(class_scope:MultipleRoomsSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MultipleRoomsSettings_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MultipleRoomsSettings& from_msg);
    ::google::protobuf::RepeatedPtrField< ::RoomSettings > rooms_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fgeneral_2eproto;
};
// -------------------------------------------------------------------

class MultipleLightsSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MultipleLightsSettings) */ {
 public:
  inline MultipleLightsSettings() : MultipleLightsSettings(nullptr) {}
  ~MultipleLightsSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultipleLightsSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline MultipleLightsSettings(const MultipleLightsSettings& from) : MultipleLightsSettings(nullptr, from) {}
  inline MultipleLightsSettings(MultipleLightsSettings&& from) noexcept
      : MultipleLightsSettings(nullptr, std::move(from)) {}
  inline MultipleLightsSettings& operator=(const MultipleLightsSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleLightsSettings& operator=(MultipleLightsSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultipleLightsSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultipleLightsSettings* internal_default_instance() {
    return reinterpret_cast<const MultipleLightsSettings*>(
        &_MultipleLightsSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(MultipleLightsSettings& a, MultipleLightsSettings& b) { a.Swap(&b); }
  inline void Swap(MultipleLightsSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultipleLightsSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultipleLightsSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MultipleLightsSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultipleLightsSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MultipleLightsSettings& from) { MultipleLightsSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MultipleLightsSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "MultipleLightsSettings"; }

 protected:
  explicit MultipleLightsSettings(::google::protobuf::Arena* arena);
  MultipleLightsSettings(::google::protobuf::Arena* arena, const MultipleLightsSettings& from);
  MultipleLightsSettings(::google::protobuf::Arena* arena, MultipleLightsSettings&& from) noexcept
      : MultipleLightsSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLightsFieldNumber = 1,
  };
  // repeated .LightSettings lights = 1;
  int lights_size() const;
  private:
  int _internal_lights_size() const;

  public:
  void clear_lights() ;
  ::LightSettings* mutable_lights(int index);
  ::google::protobuf::RepeatedPtrField<::LightSettings>* mutable_lights();

  private:
  const ::google::protobuf::RepeatedPtrField<::LightSettings>& _internal_lights() const;
  ::google::protobuf::RepeatedPtrField<::LightSettings>* _internal_mutable_lights();
  public:
  const ::LightSettings& lights(int index) const;
  ::LightSettings* add_lights();
  const ::google::protobuf::RepeatedPtrField<::LightSettings>& lights() const;
  // @@protoc_insertion_point(class_scope:MultipleLightsSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MultipleLightsSettings_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MultipleLightsSettings& from_msg);
    ::google::protobuf::RepeatedPtrField< ::LightSettings > lights_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_5fgeneral_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NSPanelSettings

// optional int32 id = 1;
inline bool NSPanelSettings::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NSPanelSettings::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t NSPanelSettings::id() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.id)
  return _internal_id();
}
inline void NSPanelSettings::set_id(::int32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:NSPanelSettings.id)
}
inline ::int32_t NSPanelSettings::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void NSPanelSettings::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string mac_address = 2;
inline void NSPanelSettings::clear_mac_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.ClearToEmpty();
}
inline const std::string& NSPanelSettings::mac_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelSettings.mac_address)
  return _internal_mac_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelSettings::set_mac_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelSettings.mac_address)
}
inline std::string* NSPanelSettings::mutable_mac_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:NSPanelSettings.mac_address)
  return _s;
}
inline const std::string& NSPanelSettings::_internal_mac_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mac_address_.Get();
}
inline void NSPanelSettings::_internal_set_mac_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.Set(value, GetArena());
}
inline std::string* NSPanelSettings::_internal_mutable_mac_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mac_address_.Mutable( GetArena());
}
inline std::string* NSPanelSettings::release_mac_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelSettings.mac_address)
  return _impl_.mac_address_.Release();
}
inline void NSPanelSettings::set_allocated_mac_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mac_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mac_address_.IsDefault()) {
          _impl_.mac_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelSettings.mac_address)
}

// string name = 3;
inline void NSPanelSettings::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NSPanelSettings::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelSettings.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelSettings::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelSettings.name)
}
inline std::string* NSPanelSettings::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:NSPanelSettings.name)
  return _s;
}
inline const std::string& NSPanelSettings::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NSPanelSettings::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NSPanelSettings::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NSPanelSettings::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelSettings.name)
  return _impl_.name_.Release();
}
inline void NSPanelSettings::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelSettings.name)
}

// int32 home = 4;
inline void NSPanelSettings::clear_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.home_ = 0;
}
inline ::int32_t NSPanelSettings::home() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.home)
  return _internal_home();
}
inline void NSPanelSettings::set_home(::int32_t value) {
  _internal_set_home(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.home)
}
inline ::int32_t NSPanelSettings::_internal_home() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.home_;
}
inline void NSPanelSettings::_internal_set_home(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.home_ = value;
}

// .NSPanelSettings.NSPanelDefaultPage default_page = 5;
inline void NSPanelSettings::clear_default_page() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_page_ = 0;
}
inline ::NSPanelSettings_NSPanelDefaultPage NSPanelSettings::default_page() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.default_page)
  return _internal_default_page();
}
inline void NSPanelSettings::set_default_page(::NSPanelSettings_NSPanelDefaultPage value) {
  _internal_set_default_page(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.default_page)
}
inline ::NSPanelSettings_NSPanelDefaultPage NSPanelSettings::_internal_default_page() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelSettings_NSPanelDefaultPage>(_impl_.default_page_);
}
inline void NSPanelSettings::_internal_set_default_page(::NSPanelSettings_NSPanelDefaultPage value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_page_ = value;
}

// int32 raise_to_100_light_level = 6;
inline void NSPanelSettings::clear_raise_to_100_light_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.raise_to_100_light_level_ = 0;
}
inline ::int32_t NSPanelSettings::raise_to_100_light_level() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.raise_to_100_light_level)
  return _internal_raise_to_100_light_level();
}
inline void NSPanelSettings::set_raise_to_100_light_level(::int32_t value) {
  _internal_set_raise_to_100_light_level(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.raise_to_100_light_level)
}
inline ::int32_t NSPanelSettings::_internal_raise_to_100_light_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.raise_to_100_light_level_;
}
inline void NSPanelSettings::_internal_set_raise_to_100_light_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.raise_to_100_light_level_ = value;
}

// int32 color_temp_min = 7;
inline void NSPanelSettings::clear_color_temp_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_temp_min_ = 0;
}
inline ::int32_t NSPanelSettings::color_temp_min() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.color_temp_min)
  return _internal_color_temp_min();
}
inline void NSPanelSettings::set_color_temp_min(::int32_t value) {
  _internal_set_color_temp_min(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.color_temp_min)
}
inline ::int32_t NSPanelSettings::_internal_color_temp_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.color_temp_min_;
}
inline void NSPanelSettings::_internal_set_color_temp_min(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_temp_min_ = value;
}

// int32 color_temp_max = 8;
inline void NSPanelSettings::clear_color_temp_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_temp_max_ = 0;
}
inline ::int32_t NSPanelSettings::color_temp_max() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.color_temp_max)
  return _internal_color_temp_max();
}
inline void NSPanelSettings::set_color_temp_max(::int32_t value) {
  _internal_set_color_temp_max(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.color_temp_max)
}
inline ::int32_t NSPanelSettings::_internal_color_temp_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.color_temp_max_;
}
inline void NSPanelSettings::_internal_set_color_temp_max(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_temp_max_ = value;
}

// bool reverse_color_temp = 9;
inline void NSPanelSettings::clear_reverse_color_temp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_color_temp_ = false;
}
inline bool NSPanelSettings::reverse_color_temp() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.reverse_color_temp)
  return _internal_reverse_color_temp();
}
inline void NSPanelSettings::set_reverse_color_temp(bool value) {
  _internal_set_reverse_color_temp(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.reverse_color_temp)
}
inline bool NSPanelSettings::_internal_reverse_color_temp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reverse_color_temp_;
}
inline void NSPanelSettings::_internal_set_reverse_color_temp(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_color_temp_ = value;
}

// int32 min_button_push_time = 10;
inline void NSPanelSettings::clear_min_button_push_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_button_push_time_ = 0;
}
inline ::int32_t NSPanelSettings::min_button_push_time() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.min_button_push_time)
  return _internal_min_button_push_time();
}
inline void NSPanelSettings::set_min_button_push_time(::int32_t value) {
  _internal_set_min_button_push_time(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.min_button_push_time)
}
inline ::int32_t NSPanelSettings::_internal_min_button_push_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_button_push_time_;
}
inline void NSPanelSettings::_internal_set_min_button_push_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_button_push_time_ = value;
}

// int32 button_long_press_time = 11;
inline void NSPanelSettings::clear_button_long_press_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_long_press_time_ = 0;
}
inline ::int32_t NSPanelSettings::button_long_press_time() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.button_long_press_time)
  return _internal_button_long_press_time();
}
inline void NSPanelSettings::set_button_long_press_time(::int32_t value) {
  _internal_set_button_long_press_time(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.button_long_press_time)
}
inline ::int32_t NSPanelSettings::_internal_button_long_press_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button_long_press_time_;
}
inline void NSPanelSettings::_internal_set_button_long_press_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_long_press_time_ = value;
}

// int32 special_mode_trigger_time = 12;
inline void NSPanelSettings::clear_special_mode_trigger_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.special_mode_trigger_time_ = 0;
}
inline ::int32_t NSPanelSettings::special_mode_trigger_time() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.special_mode_trigger_time)
  return _internal_special_mode_trigger_time();
}
inline void NSPanelSettings::set_special_mode_trigger_time(::int32_t value) {
  _internal_set_special_mode_trigger_time(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.special_mode_trigger_time)
}
inline ::int32_t NSPanelSettings::_internal_special_mode_trigger_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.special_mode_trigger_time_;
}
inline void NSPanelSettings::_internal_set_special_mode_trigger_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.special_mode_trigger_time_ = value;
}

// int32 special_mode_release_time = 13;
inline void NSPanelSettings::clear_special_mode_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.special_mode_release_time_ = 0;
}
inline ::int32_t NSPanelSettings::special_mode_release_time() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.special_mode_release_time)
  return _internal_special_mode_release_time();
}
inline void NSPanelSettings::set_special_mode_release_time(::int32_t value) {
  _internal_set_special_mode_release_time(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.special_mode_release_time)
}
inline ::int32_t NSPanelSettings::_internal_special_mode_release_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.special_mode_release_time_;
}
inline void NSPanelSettings::_internal_set_special_mode_release_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.special_mode_release_time_ = value;
}

// int32 mqtt_ignore_time = 14;
inline void NSPanelSettings::clear_mqtt_ignore_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mqtt_ignore_time_ = 0;
}
inline ::int32_t NSPanelSettings::mqtt_ignore_time() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.mqtt_ignore_time)
  return _internal_mqtt_ignore_time();
}
inline void NSPanelSettings::set_mqtt_ignore_time(::int32_t value) {
  _internal_set_mqtt_ignore_time(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.mqtt_ignore_time)
}
inline ::int32_t NSPanelSettings::_internal_mqtt_ignore_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mqtt_ignore_time_;
}
inline void NSPanelSettings::_internal_set_mqtt_ignore_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mqtt_ignore_time_ = value;
}

// int32 screen_dim_level = 15;
inline void NSPanelSettings::clear_screen_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_dim_level_ = 0;
}
inline ::int32_t NSPanelSettings::screen_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.screen_dim_level)
  return _internal_screen_dim_level();
}
inline void NSPanelSettings::set_screen_dim_level(::int32_t value) {
  _internal_set_screen_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.screen_dim_level)
}
inline ::int32_t NSPanelSettings::_internal_screen_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screen_dim_level_;
}
inline void NSPanelSettings::_internal_set_screen_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_dim_level_ = value;
}

// int32 screensaver_dim_level = 16;
inline void NSPanelSettings::clear_screensaver_dim_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_dim_level_ = 0;
}
inline ::int32_t NSPanelSettings::screensaver_dim_level() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.screensaver_dim_level)
  return _internal_screensaver_dim_level();
}
inline void NSPanelSettings::set_screensaver_dim_level(::int32_t value) {
  _internal_set_screensaver_dim_level(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.screensaver_dim_level)
}
inline ::int32_t NSPanelSettings::_internal_screensaver_dim_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screensaver_dim_level_;
}
inline void NSPanelSettings::_internal_set_screensaver_dim_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_dim_level_ = value;
}

// int32 screensaver_activation_timeout = 17;
inline void NSPanelSettings::clear_screensaver_activation_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_activation_timeout_ = 0;
}
inline ::int32_t NSPanelSettings::screensaver_activation_timeout() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.screensaver_activation_timeout)
  return _internal_screensaver_activation_timeout();
}
inline void NSPanelSettings::set_screensaver_activation_timeout(::int32_t value) {
  _internal_set_screensaver_activation_timeout(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.screensaver_activation_timeout)
}
inline ::int32_t NSPanelSettings::_internal_screensaver_activation_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screensaver_activation_timeout_;
}
inline void NSPanelSettings::_internal_set_screensaver_activation_timeout(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_activation_timeout_ = value;
}

// .NSPanelSettings.NSPanelScreensaverMode screensaver_mode = 18;
inline void NSPanelSettings::clear_screensaver_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_mode_ = 0;
}
inline ::NSPanelSettings_NSPanelScreensaverMode NSPanelSettings::screensaver_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.screensaver_mode)
  return _internal_screensaver_mode();
}
inline void NSPanelSettings::set_screensaver_mode(::NSPanelSettings_NSPanelScreensaverMode value) {
  _internal_set_screensaver_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.screensaver_mode)
}
inline ::NSPanelSettings_NSPanelScreensaverMode NSPanelSettings::_internal_screensaver_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelSettings_NSPanelScreensaverMode>(_impl_.screensaver_mode_);
}
inline void NSPanelSettings::_internal_set_screensaver_mode(::NSPanelSettings_NSPanelScreensaverMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screensaver_mode_ = value;
}

// .time_format clock_format = 19;
inline void NSPanelSettings::clear_clock_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_format_ = 0;
}
inline ::time_format NSPanelSettings::clock_format() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.clock_format)
  return _internal_clock_format();
}
inline void NSPanelSettings::set_clock_format(::time_format value) {
  _internal_set_clock_format(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.clock_format)
}
inline ::time_format NSPanelSettings::_internal_clock_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::time_format>(_impl_.clock_format_);
}
inline void NSPanelSettings::_internal_set_clock_format(::time_format value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_format_ = value;
}

// .temperature_format temperature_unit = 20;
inline void NSPanelSettings::clear_temperature_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_unit_ = 0;
}
inline ::temperature_format NSPanelSettings::temperature_unit() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.temperature_unit)
  return _internal_temperature_unit();
}
inline void NSPanelSettings::set_temperature_unit(::temperature_format value) {
  _internal_set_temperature_unit(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.temperature_unit)
}
inline ::temperature_format NSPanelSettings::_internal_temperature_unit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::temperature_format>(_impl_.temperature_unit_);
}
inline void NSPanelSettings::_internal_set_temperature_unit(::temperature_format value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_unit_ = value;
}

// bool is_us_panel = 21;
inline void NSPanelSettings::clear_is_us_panel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_us_panel_ = false;
}
inline bool NSPanelSettings::is_us_panel() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.is_us_panel)
  return _internal_is_us_panel();
}
inline void NSPanelSettings::set_is_us_panel(bool value) {
  _internal_set_is_us_panel(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.is_us_panel)
}
inline bool NSPanelSettings::_internal_is_us_panel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_us_panel_;
}
inline void NSPanelSettings::_internal_set_is_us_panel(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_us_panel_ = value;
}

// bool lock_to_default_room = 22;
inline void NSPanelSettings::clear_lock_to_default_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lock_to_default_room_ = false;
}
inline bool NSPanelSettings::lock_to_default_room() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.lock_to_default_room)
  return _internal_lock_to_default_room();
}
inline void NSPanelSettings::set_lock_to_default_room(bool value) {
  _internal_set_lock_to_default_room(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.lock_to_default_room)
}
inline bool NSPanelSettings::_internal_lock_to_default_room() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lock_to_default_room_;
}
inline void NSPanelSettings::_internal_set_lock_to_default_room(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lock_to_default_room_ = value;
}

// bool reverse_relays = 23;
inline void NSPanelSettings::clear_reverse_relays() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_relays_ = false;
}
inline bool NSPanelSettings::reverse_relays() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.reverse_relays)
  return _internal_reverse_relays();
}
inline void NSPanelSettings::set_reverse_relays(bool value) {
  _internal_set_reverse_relays(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.reverse_relays)
}
inline bool NSPanelSettings::_internal_reverse_relays() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reverse_relays_;
}
inline void NSPanelSettings::_internal_set_reverse_relays(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_relays_ = value;
}

// bool relay1_default_mode = 24;
inline void NSPanelSettings::clear_relay1_default_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay1_default_mode_ = false;
}
inline bool NSPanelSettings::relay1_default_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.relay1_default_mode)
  return _internal_relay1_default_mode();
}
inline void NSPanelSettings::set_relay1_default_mode(bool value) {
  _internal_set_relay1_default_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.relay1_default_mode)
}
inline bool NSPanelSettings::_internal_relay1_default_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relay1_default_mode_;
}
inline void NSPanelSettings::_internal_set_relay1_default_mode(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay1_default_mode_ = value;
}

// bool relay2_default_mode = 25;
inline void NSPanelSettings::clear_relay2_default_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay2_default_mode_ = false;
}
inline bool NSPanelSettings::relay2_default_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.relay2_default_mode)
  return _internal_relay2_default_mode();
}
inline void NSPanelSettings::set_relay2_default_mode(bool value) {
  _internal_set_relay2_default_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.relay2_default_mode)
}
inline bool NSPanelSettings::_internal_relay2_default_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relay2_default_mode_;
}
inline void NSPanelSettings::_internal_set_relay2_default_mode(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay2_default_mode_ = value;
}

// int32 temperature_calibration = 26;
inline void NSPanelSettings::clear_temperature_calibration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_calibration_ = 0;
}
inline ::int32_t NSPanelSettings::temperature_calibration() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.temperature_calibration)
  return _internal_temperature_calibration();
}
inline void NSPanelSettings::set_temperature_calibration(::int32_t value) {
  _internal_set_temperature_calibration(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.temperature_calibration)
}
inline ::int32_t NSPanelSettings::_internal_temperature_calibration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_calibration_;
}
inline void NSPanelSettings::_internal_set_temperature_calibration(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_calibration_ = value;
}

// .NSPanelSettings.NSPanelButtonMode button1_mode = 27;
inline void NSPanelSettings::clear_button1_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button1_mode_ = 0;
}
inline ::NSPanelSettings_NSPanelButtonMode NSPanelSettings::button1_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.button1_mode)
  return _internal_button1_mode();
}
inline void NSPanelSettings::set_button1_mode(::NSPanelSettings_NSPanelButtonMode value) {
  _internal_set_button1_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.button1_mode)
}
inline ::NSPanelSettings_NSPanelButtonMode NSPanelSettings::_internal_button1_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelSettings_NSPanelButtonMode>(_impl_.button1_mode_);
}
inline void NSPanelSettings::_internal_set_button1_mode(::NSPanelSettings_NSPanelButtonMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button1_mode_ = value;
}

// .NSPanelSettings.NSPanelButtonMode button2_mode = 28;
inline void NSPanelSettings::clear_button2_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button2_mode_ = 0;
}
inline ::NSPanelSettings_NSPanelButtonMode NSPanelSettings::button2_mode() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.button2_mode)
  return _internal_button2_mode();
}
inline void NSPanelSettings::set_button2_mode(::NSPanelSettings_NSPanelButtonMode value) {
  _internal_set_button2_mode(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.button2_mode)
}
inline ::NSPanelSettings_NSPanelButtonMode NSPanelSettings::_internal_button2_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelSettings_NSPanelButtonMode>(_impl_.button2_mode_);
}
inline void NSPanelSettings::_internal_set_button2_mode(::NSPanelSettings_NSPanelButtonMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button2_mode_ = value;
}

// optional string button1_mqtt_topic = 29;
inline bool NSPanelSettings::has_button1_mqtt_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NSPanelSettings::clear_button1_mqtt_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button1_mqtt_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NSPanelSettings::button1_mqtt_topic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelSettings.button1_mqtt_topic)
  return _internal_button1_mqtt_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelSettings::set_button1_mqtt_topic(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.button1_mqtt_topic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelSettings.button1_mqtt_topic)
}
inline std::string* NSPanelSettings::mutable_button1_mqtt_topic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_button1_mqtt_topic();
  // @@protoc_insertion_point(field_mutable:NSPanelSettings.button1_mqtt_topic)
  return _s;
}
inline const std::string& NSPanelSettings::_internal_button1_mqtt_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button1_mqtt_topic_.Get();
}
inline void NSPanelSettings::_internal_set_button1_mqtt_topic(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.button1_mqtt_topic_.Set(value, GetArena());
}
inline std::string* NSPanelSettings::_internal_mutable_button1_mqtt_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.button1_mqtt_topic_.Mutable( GetArena());
}
inline std::string* NSPanelSettings::release_button1_mqtt_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelSettings.button1_mqtt_topic)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.button1_mqtt_topic_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.button1_mqtt_topic_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NSPanelSettings::set_allocated_button1_mqtt_topic(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.button1_mqtt_topic_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.button1_mqtt_topic_.IsDefault()) {
          _impl_.button1_mqtt_topic_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelSettings.button1_mqtt_topic)
}

// optional string button2_mqtt_topic = 30;
inline bool NSPanelSettings::has_button2_mqtt_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NSPanelSettings::clear_button2_mqtt_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button2_mqtt_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NSPanelSettings::button2_mqtt_topic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelSettings.button2_mqtt_topic)
  return _internal_button2_mqtt_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelSettings::set_button2_mqtt_topic(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.button2_mqtt_topic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelSettings.button2_mqtt_topic)
}
inline std::string* NSPanelSettings::mutable_button2_mqtt_topic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_button2_mqtt_topic();
  // @@protoc_insertion_point(field_mutable:NSPanelSettings.button2_mqtt_topic)
  return _s;
}
inline const std::string& NSPanelSettings::_internal_button2_mqtt_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button2_mqtt_topic_.Get();
}
inline void NSPanelSettings::_internal_set_button2_mqtt_topic(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.button2_mqtt_topic_.Set(value, GetArena());
}
inline std::string* NSPanelSettings::_internal_mutable_button2_mqtt_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.button2_mqtt_topic_.Mutable( GetArena());
}
inline std::string* NSPanelSettings::release_button2_mqtt_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelSettings.button2_mqtt_topic)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.button2_mqtt_topic_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.button2_mqtt_topic_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NSPanelSettings::set_allocated_button2_mqtt_topic(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.button2_mqtt_topic_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.button2_mqtt_topic_.IsDefault()) {
          _impl_.button2_mqtt_topic_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelSettings.button2_mqtt_topic)
}

// optional string button1_mqtt_payload = 31;
inline bool NSPanelSettings::has_button1_mqtt_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NSPanelSettings::clear_button1_mqtt_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button1_mqtt_payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NSPanelSettings::button1_mqtt_payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelSettings.button1_mqtt_payload)
  return _internal_button1_mqtt_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelSettings::set_button1_mqtt_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.button1_mqtt_payload_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelSettings.button1_mqtt_payload)
}
inline std::string* NSPanelSettings::mutable_button1_mqtt_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_button1_mqtt_payload();
  // @@protoc_insertion_point(field_mutable:NSPanelSettings.button1_mqtt_payload)
  return _s;
}
inline const std::string& NSPanelSettings::_internal_button1_mqtt_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button1_mqtt_payload_.Get();
}
inline void NSPanelSettings::_internal_set_button1_mqtt_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.button1_mqtt_payload_.Set(value, GetArena());
}
inline std::string* NSPanelSettings::_internal_mutable_button1_mqtt_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.button1_mqtt_payload_.Mutable( GetArena());
}
inline std::string* NSPanelSettings::release_button1_mqtt_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelSettings.button1_mqtt_payload)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.button1_mqtt_payload_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.button1_mqtt_payload_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NSPanelSettings::set_allocated_button1_mqtt_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.button1_mqtt_payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.button1_mqtt_payload_.IsDefault()) {
          _impl_.button1_mqtt_payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelSettings.button1_mqtt_payload)
}

// optional string button2_mqtt_payload = 32;
inline bool NSPanelSettings::has_button2_mqtt_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NSPanelSettings::clear_button2_mqtt_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button2_mqtt_payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NSPanelSettings::button2_mqtt_payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelSettings.button2_mqtt_payload)
  return _internal_button2_mqtt_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelSettings::set_button2_mqtt_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.button2_mqtt_payload_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelSettings.button2_mqtt_payload)
}
inline std::string* NSPanelSettings::mutable_button2_mqtt_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_button2_mqtt_payload();
  // @@protoc_insertion_point(field_mutable:NSPanelSettings.button2_mqtt_payload)
  return _s;
}
inline const std::string& NSPanelSettings::_internal_button2_mqtt_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button2_mqtt_payload_.Get();
}
inline void NSPanelSettings::_internal_set_button2_mqtt_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.button2_mqtt_payload_.Set(value, GetArena());
}
inline std::string* NSPanelSettings::_internal_mutable_button2_mqtt_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.button2_mqtt_payload_.Mutable( GetArena());
}
inline std::string* NSPanelSettings::release_button2_mqtt_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelSettings.button2_mqtt_payload)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.button2_mqtt_payload_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.button2_mqtt_payload_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NSPanelSettings::set_allocated_button2_mqtt_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.button2_mqtt_payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.button2_mqtt_payload_.IsDefault()) {
          _impl_.button2_mqtt_payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelSettings.button2_mqtt_payload)
}

// optional int32 button1_detached_light_id = 33;
inline bool NSPanelSettings::has_button1_detached_light_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NSPanelSettings::clear_button1_detached_light_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button1_detached_light_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t NSPanelSettings::button1_detached_light_id() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.button1_detached_light_id)
  return _internal_button1_detached_light_id();
}
inline void NSPanelSettings::set_button1_detached_light_id(::int32_t value) {
  _internal_set_button1_detached_light_id(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:NSPanelSettings.button1_detached_light_id)
}
inline ::int32_t NSPanelSettings::_internal_button1_detached_light_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button1_detached_light_id_;
}
inline void NSPanelSettings::_internal_set_button1_detached_light_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button1_detached_light_id_ = value;
}

// optional int32 button2_detached_light_id = 34;
inline bool NSPanelSettings::has_button2_detached_light_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void NSPanelSettings::clear_button2_detached_light_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button2_detached_light_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t NSPanelSettings::button2_detached_light_id() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.button2_detached_light_id)
  return _internal_button2_detached_light_id();
}
inline void NSPanelSettings::set_button2_detached_light_id(::int32_t value) {
  _internal_set_button2_detached_light_id(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:NSPanelSettings.button2_detached_light_id)
}
inline ::int32_t NSPanelSettings::_internal_button2_detached_light_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button2_detached_light_id_;
}
inline void NSPanelSettings::_internal_set_button2_detached_light_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button2_detached_light_id_ = value;
}

// bool denied = 45;
inline void NSPanelSettings::clear_denied() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denied_ = false;
}
inline bool NSPanelSettings::denied() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.denied)
  return _internal_denied();
}
inline void NSPanelSettings::set_denied(bool value) {
  _internal_set_denied(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.denied)
}
inline bool NSPanelSettings::_internal_denied() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denied_;
}
inline void NSPanelSettings::_internal_set_denied(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denied_ = value;
}

// bool accepted = 46;
inline void NSPanelSettings::clear_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = false;
}
inline bool NSPanelSettings::accepted() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.accepted)
  return _internal_accepted();
}
inline void NSPanelSettings::set_accepted(bool value) {
  _internal_set_accepted(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.accepted)
}
inline bool NSPanelSettings::_internal_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accepted_;
}
inline void NSPanelSettings::_internal_set_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = value;
}

// repeated int32 rooms = 47;
inline int NSPanelSettings::_internal_rooms_size() const {
  return _internal_rooms().size();
}
inline int NSPanelSettings::rooms_size() const {
  return _internal_rooms_size();
}
inline void NSPanelSettings::clear_rooms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rooms_.Clear();
}
inline ::int32_t NSPanelSettings::rooms(int index) const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.rooms)
  return _internal_rooms().Get(index);
}
inline void NSPanelSettings::set_rooms(int index, ::int32_t value) {
  _internal_mutable_rooms()->Set(index, value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.rooms)
}
inline void NSPanelSettings::add_rooms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rooms()->Add(value);
  // @@protoc_insertion_point(field_add:NSPanelSettings.rooms)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NSPanelSettings::rooms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelSettings.rooms)
  return _internal_rooms();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelSettings::mutable_rooms()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelSettings.rooms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rooms();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NSPanelSettings::_internal_rooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rooms_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelSettings::_internal_mutable_rooms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rooms_;
}

// repeated int32 scenes = 48;
inline int NSPanelSettings::_internal_scenes_size() const {
  return _internal_scenes().size();
}
inline int NSPanelSettings::scenes_size() const {
  return _internal_scenes_size();
}
inline void NSPanelSettings::clear_scenes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scenes_.Clear();
}
inline ::int32_t NSPanelSettings::scenes(int index) const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.scenes)
  return _internal_scenes().Get(index);
}
inline void NSPanelSettings::set_scenes(int index, ::int32_t value) {
  _internal_mutable_scenes()->Set(index, value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.scenes)
}
inline void NSPanelSettings::add_scenes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_scenes()->Add(value);
  // @@protoc_insertion_point(field_add:NSPanelSettings.scenes)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NSPanelSettings::scenes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NSPanelSettings.scenes)
  return _internal_scenes();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelSettings::mutable_scenes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NSPanelSettings.scenes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_scenes();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NSPanelSettings::_internal_scenes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scenes_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NSPanelSettings::_internal_mutable_scenes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.scenes_;
}

// string ip_address = 49;
inline void NSPanelSettings::clear_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& NSPanelSettings::ip_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NSPanelSettings.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NSPanelSettings::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NSPanelSettings.ip_address)
}
inline std::string* NSPanelSettings::mutable_ip_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:NSPanelSettings.ip_address)
  return _s;
}
inline const std::string& NSPanelSettings::_internal_ip_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_address_.Get();
}
inline void NSPanelSettings::_internal_set_ip_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(value, GetArena());
}
inline std::string* NSPanelSettings::_internal_mutable_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ip_address_.Mutable( GetArena());
}
inline std::string* NSPanelSettings::release_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NSPanelSettings.ip_address)
  return _impl_.ip_address_.Release();
}
inline void NSPanelSettings::set_allocated_ip_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_address_.IsDefault()) {
          _impl_.ip_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NSPanelSettings.ip_address)
}

// .NSPanelSettings.RelayRegisterType relay1_register_type = 50;
inline void NSPanelSettings::clear_relay1_register_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay1_register_type_ = 0;
}
inline ::NSPanelSettings_RelayRegisterType NSPanelSettings::relay1_register_type() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.relay1_register_type)
  return _internal_relay1_register_type();
}
inline void NSPanelSettings::set_relay1_register_type(::NSPanelSettings_RelayRegisterType value) {
  _internal_set_relay1_register_type(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.relay1_register_type)
}
inline ::NSPanelSettings_RelayRegisterType NSPanelSettings::_internal_relay1_register_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelSettings_RelayRegisterType>(_impl_.relay1_register_type_);
}
inline void NSPanelSettings::_internal_set_relay1_register_type(::NSPanelSettings_RelayRegisterType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay1_register_type_ = value;
}

// .NSPanelSettings.RelayRegisterType relay2_register_type = 51;
inline void NSPanelSettings::clear_relay2_register_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay2_register_type_ = 0;
}
inline ::NSPanelSettings_RelayRegisterType NSPanelSettings::relay2_register_type() const {
  // @@protoc_insertion_point(field_get:NSPanelSettings.relay2_register_type)
  return _internal_relay2_register_type();
}
inline void NSPanelSettings::set_relay2_register_type(::NSPanelSettings_RelayRegisterType value) {
  _internal_set_relay2_register_type(value);
  // @@protoc_insertion_point(field_set:NSPanelSettings.relay2_register_type)
}
inline ::NSPanelSettings_RelayRegisterType NSPanelSettings::_internal_relay2_register_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::NSPanelSettings_RelayRegisterType>(_impl_.relay2_register_type_);
}
inline void NSPanelSettings::_internal_set_relay2_register_type(::NSPanelSettings_RelayRegisterType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relay2_register_type_ = value;
}

// -------------------------------------------------------------------

// RoomSettings

// int32 id = 1;
inline void RoomSettings::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t RoomSettings::id() const {
  // @@protoc_insertion_point(field_get:RoomSettings.id)
  return _internal_id();
}
inline void RoomSettings::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RoomSettings.id)
}
inline ::int32_t RoomSettings::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void RoomSettings::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string name = 2;
inline void RoomSettings::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RoomSettings::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RoomSettings.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomSettings::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RoomSettings.name)
}
inline std::string* RoomSettings::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:RoomSettings.name)
  return _s;
}
inline const std::string& RoomSettings::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void RoomSettings::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* RoomSettings::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* RoomSettings::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RoomSettings.name)
  return _impl_.name_.Release();
}
inline void RoomSettings::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RoomSettings.name)
}

// repeated int32 light_ids = 3;
inline int RoomSettings::_internal_light_ids_size() const {
  return _internal_light_ids().size();
}
inline int RoomSettings::light_ids_size() const {
  return _internal_light_ids_size();
}
inline void RoomSettings::clear_light_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.light_ids_.Clear();
}
inline ::int32_t RoomSettings::light_ids(int index) const {
  // @@protoc_insertion_point(field_get:RoomSettings.light_ids)
  return _internal_light_ids().Get(index);
}
inline void RoomSettings::set_light_ids(int index, ::int32_t value) {
  _internal_mutable_light_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:RoomSettings.light_ids)
}
inline void RoomSettings::add_light_ids(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_light_ids()->Add(value);
  // @@protoc_insertion_point(field_add:RoomSettings.light_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoomSettings::light_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:RoomSettings.light_ids)
  return _internal_light_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoomSettings::mutable_light_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:RoomSettings.light_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_light_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
RoomSettings::_internal_light_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.light_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoomSettings::_internal_mutable_light_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.light_ids_;
}

// repeated int32 scene_ids = 4;
inline int RoomSettings::_internal_scene_ids_size() const {
  return _internal_scene_ids().size();
}
inline int RoomSettings::scene_ids_size() const {
  return _internal_scene_ids_size();
}
inline void RoomSettings::clear_scene_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scene_ids_.Clear();
}
inline ::int32_t RoomSettings::scene_ids(int index) const {
  // @@protoc_insertion_point(field_get:RoomSettings.scene_ids)
  return _internal_scene_ids().Get(index);
}
inline void RoomSettings::set_scene_ids(int index, ::int32_t value) {
  _internal_mutable_scene_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:RoomSettings.scene_ids)
}
inline void RoomSettings::add_scene_ids(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_scene_ids()->Add(value);
  // @@protoc_insertion_point(field_add:RoomSettings.scene_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoomSettings::scene_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:RoomSettings.scene_ids)
  return _internal_scene_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoomSettings::mutable_scene_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:RoomSettings.scene_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_scene_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
RoomSettings::_internal_scene_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scene_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoomSettings::_internal_mutable_scene_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.scene_ids_;
}

// -------------------------------------------------------------------

// MultipleRoomsSettings

// repeated .RoomSettings rooms = 1;
inline int MultipleRoomsSettings::_internal_rooms_size() const {
  return _internal_rooms().size();
}
inline int MultipleRoomsSettings::rooms_size() const {
  return _internal_rooms_size();
}
inline void MultipleRoomsSettings::clear_rooms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rooms_.Clear();
}
inline ::RoomSettings* MultipleRoomsSettings::mutable_rooms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MultipleRoomsSettings.rooms)
  return _internal_mutable_rooms()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::RoomSettings>* MultipleRoomsSettings::mutable_rooms()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MultipleRoomsSettings.rooms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rooms();
}
inline const ::RoomSettings& MultipleRoomsSettings::rooms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MultipleRoomsSettings.rooms)
  return _internal_rooms().Get(index);
}
inline ::RoomSettings* MultipleRoomsSettings::add_rooms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::RoomSettings* _add = _internal_mutable_rooms()->Add();
  // @@protoc_insertion_point(field_add:MultipleRoomsSettings.rooms)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::RoomSettings>& MultipleRoomsSettings::rooms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MultipleRoomsSettings.rooms)
  return _internal_rooms();
}
inline const ::google::protobuf::RepeatedPtrField<::RoomSettings>&
MultipleRoomsSettings::_internal_rooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rooms_;
}
inline ::google::protobuf::RepeatedPtrField<::RoomSettings>*
MultipleRoomsSettings::_internal_mutable_rooms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rooms_;
}

// -------------------------------------------------------------------

// LightSettings

// int32 id = 1;
inline void LightSettings::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t LightSettings::id() const {
  // @@protoc_insertion_point(field_get:LightSettings.id)
  return _internal_id();
}
inline void LightSettings::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LightSettings.id)
}
inline ::int32_t LightSettings::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void LightSettings::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// int32 room_id = 2;
inline void LightSettings::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t LightSettings::room_id() const {
  // @@protoc_insertion_point(field_get:LightSettings.room_id)
  return _internal_room_id();
}
inline void LightSettings::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:LightSettings.room_id)
}
inline ::int32_t LightSettings::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void LightSettings::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string name = 3;
inline void LightSettings::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LightSettings::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LightSettings.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LightSettings::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LightSettings.name)
}
inline std::string* LightSettings::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:LightSettings.name)
  return _s;
}
inline const std::string& LightSettings::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void LightSettings::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* LightSettings::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* LightSettings::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LightSettings.name)
  return _impl_.name_.Release();
}
inline void LightSettings::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LightSettings.name)
}

// string type = 4;
inline void LightSettings::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& LightSettings::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LightSettings.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LightSettings::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LightSettings.type)
}
inline std::string* LightSettings::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:LightSettings.type)
  return _s;
}
inline const std::string& LightSettings::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void LightSettings::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* LightSettings::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* LightSettings::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LightSettings.type)
  return _impl_.type_.Release();
}
inline void LightSettings::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LightSettings.type)
}

// bool is_ceiling_light = 5;
inline void LightSettings::clear_is_ceiling_light() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_ceiling_light_ = false;
}
inline bool LightSettings::is_ceiling_light() const {
  // @@protoc_insertion_point(field_get:LightSettings.is_ceiling_light)
  return _internal_is_ceiling_light();
}
inline void LightSettings::set_is_ceiling_light(bool value) {
  _internal_set_is_ceiling_light(value);
  // @@protoc_insertion_point(field_set:LightSettings.is_ceiling_light)
}
inline bool LightSettings::_internal_is_ceiling_light() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_ceiling_light_;
}
inline void LightSettings::_internal_set_is_ceiling_light(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_ceiling_light_ = value;
}

// bool can_dim = 6;
inline void LightSettings::clear_can_dim() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_dim_ = false;
}
inline bool LightSettings::can_dim() const {
  // @@protoc_insertion_point(field_get:LightSettings.can_dim)
  return _internal_can_dim();
}
inline void LightSettings::set_can_dim(bool value) {
  _internal_set_can_dim(value);
  // @@protoc_insertion_point(field_set:LightSettings.can_dim)
}
inline bool LightSettings::_internal_can_dim() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_dim_;
}
inline void LightSettings::_internal_set_can_dim(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_dim_ = value;
}

// bool can_color_temperature = 7;
inline void LightSettings::clear_can_color_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_color_temperature_ = false;
}
inline bool LightSettings::can_color_temperature() const {
  // @@protoc_insertion_point(field_get:LightSettings.can_color_temperature)
  return _internal_can_color_temperature();
}
inline void LightSettings::set_can_color_temperature(bool value) {
  _internal_set_can_color_temperature(value);
  // @@protoc_insertion_point(field_set:LightSettings.can_color_temperature)
}
inline bool LightSettings::_internal_can_color_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_color_temperature_;
}
inline void LightSettings::_internal_set_can_color_temperature(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_color_temperature_ = value;
}

// bool can_rgb = 8;
inline void LightSettings::clear_can_rgb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_rgb_ = false;
}
inline bool LightSettings::can_rgb() const {
  // @@protoc_insertion_point(field_get:LightSettings.can_rgb)
  return _internal_can_rgb();
}
inline void LightSettings::set_can_rgb(bool value) {
  _internal_set_can_rgb(value);
  // @@protoc_insertion_point(field_set:LightSettings.can_rgb)
}
inline bool LightSettings::_internal_can_rgb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_rgb_;
}
inline void LightSettings::_internal_set_can_rgb(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_rgb_ = value;
}

// optional string home_assistant_name = 9;
inline bool LightSettings::has_home_assistant_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LightSettings::clear_home_assistant_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.home_assistant_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LightSettings::home_assistant_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LightSettings.home_assistant_name)
  return _internal_home_assistant_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LightSettings::set_home_assistant_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.home_assistant_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LightSettings.home_assistant_name)
}
inline std::string* LightSettings::mutable_home_assistant_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_home_assistant_name();
  // @@protoc_insertion_point(field_mutable:LightSettings.home_assistant_name)
  return _s;
}
inline const std::string& LightSettings::_internal_home_assistant_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.home_assistant_name_.Get();
}
inline void LightSettings::_internal_set_home_assistant_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.home_assistant_name_.Set(value, GetArena());
}
inline std::string* LightSettings::_internal_mutable_home_assistant_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.home_assistant_name_.Mutable( GetArena());
}
inline std::string* LightSettings::release_home_assistant_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LightSettings.home_assistant_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.home_assistant_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.home_assistant_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LightSettings::set_allocated_home_assistant_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.home_assistant_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.home_assistant_name_.IsDefault()) {
          _impl_.home_assistant_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LightSettings.home_assistant_name)
}

// optional string openhab_name = 10;
inline bool LightSettings::has_openhab_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LightSettings::clear_openhab_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.openhab_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LightSettings::openhab_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LightSettings.openhab_name)
  return _internal_openhab_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LightSettings::set_openhab_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.openhab_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LightSettings.openhab_name)
}
inline std::string* LightSettings::mutable_openhab_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_openhab_name();
  // @@protoc_insertion_point(field_mutable:LightSettings.openhab_name)
  return _s;
}
inline const std::string& LightSettings::_internal_openhab_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.openhab_name_.Get();
}
inline void LightSettings::_internal_set_openhab_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.openhab_name_.Set(value, GetArena());
}
inline std::string* LightSettings::_internal_mutable_openhab_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.openhab_name_.Mutable( GetArena());
}
inline std::string* LightSettings::release_openhab_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LightSettings.openhab_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.openhab_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openhab_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LightSettings::set_allocated_openhab_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.openhab_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.openhab_name_.IsDefault()) {
          _impl_.openhab_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LightSettings.openhab_name)
}

// optional string openhab_control_mode = 11;
inline bool LightSettings::has_openhab_control_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LightSettings::clear_openhab_control_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.openhab_control_mode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LightSettings::openhab_control_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LightSettings.openhab_control_mode)
  return _internal_openhab_control_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LightSettings::set_openhab_control_mode(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.openhab_control_mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LightSettings.openhab_control_mode)
}
inline std::string* LightSettings::mutable_openhab_control_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_openhab_control_mode();
  // @@protoc_insertion_point(field_mutable:LightSettings.openhab_control_mode)
  return _s;
}
inline const std::string& LightSettings::_internal_openhab_control_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.openhab_control_mode_.Get();
}
inline void LightSettings::_internal_set_openhab_control_mode(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.openhab_control_mode_.Set(value, GetArena());
}
inline std::string* LightSettings::_internal_mutable_openhab_control_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.openhab_control_mode_.Mutable( GetArena());
}
inline std::string* LightSettings::release_openhab_control_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LightSettings.openhab_control_mode)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.openhab_control_mode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openhab_control_mode_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LightSettings::set_allocated_openhab_control_mode(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.openhab_control_mode_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.openhab_control_mode_.IsDefault()) {
          _impl_.openhab_control_mode_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LightSettings.openhab_control_mode)
}

// optional string openhab_item_switch = 12;
inline bool LightSettings::has_openhab_item_switch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void LightSettings::clear_openhab_item_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.openhab_item_switch_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LightSettings::openhab_item_switch() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LightSettings.openhab_item_switch)
  return _internal_openhab_item_switch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LightSettings::set_openhab_item_switch(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.openhab_item_switch_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LightSettings.openhab_item_switch)
}
inline std::string* LightSettings::mutable_openhab_item_switch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_openhab_item_switch();
  // @@protoc_insertion_point(field_mutable:LightSettings.openhab_item_switch)
  return _s;
}
inline const std::string& LightSettings::_internal_openhab_item_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.openhab_item_switch_.Get();
}
inline void LightSettings::_internal_set_openhab_item_switch(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.openhab_item_switch_.Set(value, GetArena());
}
inline std::string* LightSettings::_internal_mutable_openhab_item_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.openhab_item_switch_.Mutable( GetArena());
}
inline std::string* LightSettings::release_openhab_item_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LightSettings.openhab_item_switch)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.openhab_item_switch_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openhab_item_switch_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LightSettings::set_allocated_openhab_item_switch(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.openhab_item_switch_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.openhab_item_switch_.IsDefault()) {
          _impl_.openhab_item_switch_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LightSettings.openhab_item_switch)
}

// optional string openhab_item_dimmer = 13;
inline bool LightSettings::has_openhab_item_dimmer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void LightSettings::clear_openhab_item_dimmer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.openhab_item_dimmer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& LightSettings::openhab_item_dimmer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LightSettings.openhab_item_dimmer)
  return _internal_openhab_item_dimmer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LightSettings::set_openhab_item_dimmer(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.openhab_item_dimmer_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LightSettings.openhab_item_dimmer)
}
inline std::string* LightSettings::mutable_openhab_item_dimmer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_openhab_item_dimmer();
  // @@protoc_insertion_point(field_mutable:LightSettings.openhab_item_dimmer)
  return _s;
}
inline const std::string& LightSettings::_internal_openhab_item_dimmer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.openhab_item_dimmer_.Get();
}
inline void LightSettings::_internal_set_openhab_item_dimmer(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.openhab_item_dimmer_.Set(value, GetArena());
}
inline std::string* LightSettings::_internal_mutable_openhab_item_dimmer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.openhab_item_dimmer_.Mutable( GetArena());
}
inline std::string* LightSettings::release_openhab_item_dimmer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LightSettings.openhab_item_dimmer)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.openhab_item_dimmer_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openhab_item_dimmer_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LightSettings::set_allocated_openhab_item_dimmer(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.openhab_item_dimmer_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.openhab_item_dimmer_.IsDefault()) {
          _impl_.openhab_item_dimmer_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LightSettings.openhab_item_dimmer)
}

// optional string openhab_item_color_temp = 14;
inline bool LightSettings::has_openhab_item_color_temp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void LightSettings::clear_openhab_item_color_temp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.openhab_item_color_temp_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& LightSettings::openhab_item_color_temp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LightSettings.openhab_item_color_temp)
  return _internal_openhab_item_color_temp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LightSettings::set_openhab_item_color_temp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.openhab_item_color_temp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LightSettings.openhab_item_color_temp)
}
inline std::string* LightSettings::mutable_openhab_item_color_temp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_openhab_item_color_temp();
  // @@protoc_insertion_point(field_mutable:LightSettings.openhab_item_color_temp)
  return _s;
}
inline const std::string& LightSettings::_internal_openhab_item_color_temp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.openhab_item_color_temp_.Get();
}
inline void LightSettings::_internal_set_openhab_item_color_temp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.openhab_item_color_temp_.Set(value, GetArena());
}
inline std::string* LightSettings::_internal_mutable_openhab_item_color_temp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.openhab_item_color_temp_.Mutable( GetArena());
}
inline std::string* LightSettings::release_openhab_item_color_temp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LightSettings.openhab_item_color_temp)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.openhab_item_color_temp_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openhab_item_color_temp_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LightSettings::set_allocated_openhab_item_color_temp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.openhab_item_color_temp_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.openhab_item_color_temp_.IsDefault()) {
          _impl_.openhab_item_color_temp_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LightSettings.openhab_item_color_temp)
}

// optional string openhab_item_rgb = 15;
inline bool LightSettings::has_openhab_item_rgb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void LightSettings::clear_openhab_item_rgb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.openhab_item_rgb_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& LightSettings::openhab_item_rgb() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LightSettings.openhab_item_rgb)
  return _internal_openhab_item_rgb();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LightSettings::set_openhab_item_rgb(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.openhab_item_rgb_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LightSettings.openhab_item_rgb)
}
inline std::string* LightSettings::mutable_openhab_item_rgb() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_openhab_item_rgb();
  // @@protoc_insertion_point(field_mutable:LightSettings.openhab_item_rgb)
  return _s;
}
inline const std::string& LightSettings::_internal_openhab_item_rgb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.openhab_item_rgb_.Get();
}
inline void LightSettings::_internal_set_openhab_item_rgb(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.openhab_item_rgb_.Set(value, GetArena());
}
inline std::string* LightSettings::_internal_mutable_openhab_item_rgb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.openhab_item_rgb_.Mutable( GetArena());
}
inline std::string* LightSettings::release_openhab_item_rgb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LightSettings.openhab_item_rgb)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.openhab_item_rgb_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openhab_item_rgb_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LightSettings::set_allocated_openhab_item_rgb(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.openhab_item_rgb_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.openhab_item_rgb_.IsDefault()) {
          _impl_.openhab_item_rgb_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LightSettings.openhab_item_rgb)
}

// -------------------------------------------------------------------

// MultipleLightsSettings

// repeated .LightSettings lights = 1;
inline int MultipleLightsSettings::_internal_lights_size() const {
  return _internal_lights().size();
}
inline int MultipleLightsSettings::lights_size() const {
  return _internal_lights_size();
}
inline void MultipleLightsSettings::clear_lights() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lights_.Clear();
}
inline ::LightSettings* MultipleLightsSettings::mutable_lights(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MultipleLightsSettings.lights)
  return _internal_mutable_lights()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::LightSettings>* MultipleLightsSettings::mutable_lights()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MultipleLightsSettings.lights)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_lights();
}
inline const ::LightSettings& MultipleLightsSettings::lights(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MultipleLightsSettings.lights)
  return _internal_lights().Get(index);
}
inline ::LightSettings* MultipleLightsSettings::add_lights() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::LightSettings* _add = _internal_mutable_lights()->Add();
  // @@protoc_insertion_point(field_add:MultipleLightsSettings.lights)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::LightSettings>& MultipleLightsSettings::lights() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MultipleLightsSettings.lights)
  return _internal_lights();
}
inline const ::google::protobuf::RepeatedPtrField<::LightSettings>&
MultipleLightsSettings::_internal_lights() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lights_;
}
inline ::google::protobuf::RepeatedPtrField<::LightSettings>*
MultipleLightsSettings::_internal_mutable_lights() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.lights_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::NSPanelSettings_NSPanelDefaultPage> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelSettings_NSPanelDefaultPage>() {
  return ::NSPanelSettings_NSPanelDefaultPage_descriptor();
}
template <>
struct is_proto_enum<::NSPanelSettings_NSPanelScreensaverMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelSettings_NSPanelScreensaverMode>() {
  return ::NSPanelSettings_NSPanelScreensaverMode_descriptor();
}
template <>
struct is_proto_enum<::NSPanelSettings_NSPanelButtonMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelSettings_NSPanelButtonMode>() {
  return ::NSPanelSettings_NSPanelButtonMode_descriptor();
}
template <>
struct is_proto_enum<::NSPanelSettings_RelayRegisterType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NSPanelSettings_RelayRegisterType>() {
  return ::NSPanelSettings_RelayRegisterType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protobuf_5fgeneral_2eproto_2epb_2eh
