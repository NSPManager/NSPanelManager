syntax = "proto3";

// Protobufs defined in this .proto file are used to communicate with the MQTTManager

message NSPanelScene {
    int32 scene_id = 1;
    bool can_save = 2;
    string name = 3;
}

message NSPanelConfig {
    string name = 1;
    int32 default_room = 2;
    int32 default_page = 3;
    int32 screensaver_activation_timeout = 4;
    int32 min_button_push_time = 5;
    int32 button_long_press_time = 6;
    int32 special_mode_trigger_time = 7;
    int32 special_mode_release_time = 8;
    int32 screen_dim_level = 9;
    int32 screensaver_dim_level = 10;

    // Make sure this is updated together with protobuf_mqttmanager
    enum NSPanelScreensaverMode {
        WEATHER_WITH_BACKGROUND = 0;
        WEATHER_WITHOUT_BACKGROUND = 1;
        DATETIME_WITH_BACKGROUND = 3;
        DATETIME_WITHOUT_BACKGROUND = 4;
        NO_SCREENSAVER = 5;
    }
    NSPanelScreensaverMode screensaver_mode = 11;
    bool clock_us_style = 12;
    bool use_fahrenheit = 13;
    bool is_us_panel = 14;
    repeated int32 room_ids = 15; // Allowed rooms
    bool reverse_relays = 16;
    bool relay1_default_mode = 17;
    bool relay2_default_mode = 18;
    float temperature_calibration = 19;
    int32 button1_mode = 20;
    string button1_mqtt_topic = 21;
    string button1_mqtt_payload = 22;
    int32 button2_mode = 23;
    string button2_mqtt_topic = 24;
    string button2_mqtt_payload = 25;
    int32 button1_detached_light_id = 26;
    int32 button2_detached_light_id = 27;
    repeated NSPanelScene global_scenes = 28;
    bool optimistic_mode = 29;
}

enum NSPanelWarningLevel {
    CRITICAL = 0;
    ERROR =1;
    WARNING = 2;
    INFO = 3;
    DEBUG = 4;
    TRACE = 5;
}

message NSPanelWarning {
    NSPanelWarningLevel level = 1;
    string text = 2;
}

message NSPanelStatusReport {
    enum state {
        ONLINE = 0;
        OFFLINE = 1;
        UPDATING_TFT = 2;
        UPDATING_FIRMWARE = 3;
        UPDATING_LITTLEFS = 4;
    }
    state nspanel_state = 1;
    int32 update_progress = 2;
    int32 rssi = 3;
    int32 heap_used_pct = 4;
    string mac_address = 5;
    string temperature = 6;
    string ip_address = 7;

    repeated NSPanelWarning warnings = 8;
}

message NSPanelLightStatus {
    int32 id = 1;
    string name = 2;
    bool can_dim = 3;
    bool can_color_temperature = 4;
    bool can_rgb = 5;
    int32 light_level = 6;
    int32 color_temp = 7;
    int32 hue = 8;
    int32 saturation = 9;
    int32 room_view_position = 10;
}

message NSPanelRoomStatus {
    int32 id = 1;
    string name = 2;
    int32 average_dim_level = 3;
    int32 ceiling_lights_dim_level = 4;
    int32 table_lights_dim_level = 5;
    int32 average_color_temperature = 6;
    int32 ceiling_lights_color_temperature_value = 7;
    int32 table_lights_color_temperature_value = 8;
    repeated NSPanelLightStatus lights = 9;
    repeated NSPanelScene scenes = 10;
    bool has_ceiling_lights = 11;
    bool has_table_lights = 12;
}


message NSPanelWeatherUpdate {
    message ForecastItem {
        string weather_icon = 1;
        string precipitation_string = 2;
        string temperature_maxmin_string = 3;
        string wind_string = 4;
        string display_string = 5;
    }
    repeated ForecastItem forecast_items = 1;
    string current_weather_icon = 2;
    string current_temperature_string = 3;
    string current_maxmin_temperature = 4;
    string current_wind_string = 5;
    string sunrise_string = 6;
    string sunset_string = 7;
    string current_precipitation_string = 8;
}

// Command send from NSPanel to MQTTManager
message NSPanelMQTTManagerCommand {
    enum AffectLightsOptions {
        ALL = 0;
        TABLE_LIGHTS = 1;
        CEILING_LIGHTS = 2;
    }
    message FirstPageTurnLightOn {
        AffectLightsOptions affect_lights = 1;
        int32 brightness_slider_value = 2;
        int32 kelvin_slider_value = 3;
        int32 selected_room = 4;
        bool global = 5;
        bool has_brightness_value = 6;
        bool has_kelvin_value = 7;
    }
    message FirstPageTurnLightOff {
        AffectLightsOptions affect_lights = 1;
        bool global = 2;
    }
    // TODO: Once protobuf-c-compiler gets updated, perhaps it's possible to build protobuf C files
    // with optional arguments.
    message LightCommand {
        repeated int32 light_ids = 1;
        bool has_brightness = 2;
        int32 brightness = 3;
        bool has_color_temperature = 4;
        int32 color_temperature = 5;
        bool has_hue = 6;
        int32 hue = 7;
        bool has_saturation = 8;
        int32 saturation = 9;
    }

    oneof CommandData {
        FirstPageTurnLightOn first_page_turn_on = 1;
        FirstPageTurnLightOff first_page_turn_off = 2;
        LightCommand light_command = 3;
    }
}
